// fill in the matrix coefficients
//
printF("========== Running Sijia's 4th-orderMapped script ==========\n");

Real drl,dsl,drr,dsr;
Real a00,a01,a02,a03,a04,a10,a11,a12,a13,a14,a20,a21,a22,a23,a24,a30,a31,a32,a33,a34,a40,a41,a42,a43,a44;
//Real hI,SlI,b1LI=abs(b1L),b1RI=abs(b1R);
Real hI,SlI,b1LI=b1L,b1RI=b1R;
int shftI4=2;

int is=1;

drl = drL[0];
dsl = drL[1];

drr = drR[0];
dsr = drR[1];

hI = drr;

if (side==0){
	is=-1;
	b1LI = is*b1L;
	b1RI = is*b1R;
	if (Sl<0){
		SlI=-1.*Sl/b1RI;
	}
	else{
		SlI=Sl/b1RI;
	}
}
else{
	is=1;
	if (Sl<0){
		SlI=-1.*Sl/b1RI;
	}
	else{
		SlI=Sl/b1RI;
	}
}

printF("     side1=%i, side2=%i, axis1=%i, axis2=%i, is=%i \n", side,side2,axis1,axis2,is );
printF("     theta=%g, beta=%g, Sl=%g, SlI=%g, hI=%g \n", theta,beta,Sl,SlI,hI);
printF("     drl=%g, dsl=%g, drr=%g, dsr=%g \n", drl, dsl,drr,dsr);


a00  = Sl * b1RI;
a01  = (-0.2e1 *   (Sl * hI + 4) *     pow(  hI,   3) * pow(b1RI, 0.2e1) * ((b2L * theta - b2R) * b1Rs4 - b1RI * (b2Ls4 * theta - b2Rs4)) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * pow(c11R, 0.2e1) * c12Rss4 +   (Sl * hI + 4) * (b2L * theta - b2R) *     pow(  hI,   3) * pow(b1RI, 0.3e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * pow(c11R, 0.2e1) * c1Rss4 + 0.2e1 *     pow(  hI,   3) * c12R * pow(b1RI, 0.4e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c2Rrs4 + 0.2e1 * (-0.6e1 *   hI * c11R * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Rs4 + (-0.3e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c11Rs4 + (  hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c11Rr4 + 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c12Rs4 + 0.6e1 *   hI * c11R * c12R *   (Sl * hI + 4) * c12Rr4 +   hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * c11R) * b1RI) * theta *   (hI * hI) * pow(b1RI, 0.2e1) * c11R * b2Lss4 + 0.2e1 *   (Sl * hI + 4) * (0.2e1 * c12R * (b2L * theta - b2R) * b1Rs4 + b1RI * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R))) * c12R *     pow(  hI,   3) * pow(b1RI, 0.2e1) * pow(c11R, 0.2e1) * c11Rrs4 + 0.2e1 *   (Sl * hI + 4) * (b2L * theta - b2R) * c12R *     pow(  hI,   3) * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) * c1Rrs4 + pow(b1RI, 0.4e1) *     pow(  hI,   3) * pow(c11R, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c2Rss4 - 0.24e2 *     pow(  hI,   3) * pow(c11R, 0.2e1) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(b1Rs4, 0.3e1) + 0.4e1 * pow(b1RI, 0.3e1) *     pow(  hI,   3) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Lsss2 - 0.2e1 *   (hI * hI) * b1RI * c11R * (-0.12e2 *   hI * c11R * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * b1Rs4 + b1RI * (-0.3e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rs4 + (  hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rr4 + 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 + 0.6e1 *   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 + 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 - 0.6e1 *   hI * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 + (  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) * c11R)) * b1Rss4 - 0.4e1 *   (Sl * hI + 4) * c12R *     pow(  hI,   3) * pow(b1RI, 0.2e1) * ((b2L * theta - b2R) * b1Rs4 - b1RI * (b2Ls4 * theta - b2Rs4)) * pow(c11R, 0.3e1) * c12Rrs4 +   (Sl * hI + 4) * (0.2e1 * c12R * (b2L * theta - b2R) * b1Rs4 + b1RI * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R))) *     pow(  hI,   3) * pow(b1RI, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * c11R * c11Rss4 + 0.6e1 * (-0.2e1 / 0.3e1 *   (hI * hI) * c12R * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(c11Rs4, 0.2e1) + (-0.8e1 *   hI * pow(c12R, 0.2e1) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rr4 + 0.2e1 *   hI * (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 + 0.6e1 *   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 + 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 - 0.6e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 + (b2L * theta - b2R) * (((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.12e2 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4))) *   hI * c11R * c11Rs4 / 0.3e1 + (0.2e1 / 0.3e1 *   (hI * hI) * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(c11Rr4, 0.2e1) + 0.2e1 * (  hI * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 -   hI * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 / 0.3e1 -   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 / 0.3e1 +   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 / 0.3e1 + (((-0.2e1 / 0.3e1 *   Sl *   hI * is - 0.2e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) *   hI * c11Rr4 + 0.4e1 / 0.3e1 *   (hI * hI) * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(c12Rs4, 0.2e1) + 0.2e1 * (-0.2e1 / 0.3e1 *   hI * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 - 0.2e1 / 0.3e1 *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 + 0.2e1 / 0.3e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 + (b2L * theta - b2R) * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4))) *   hI * c12Rs4 - (0.4e1 *   hI * c12R * theta *   (Sl * hI + 4) * b2Ls4 - 0.4e1 *   hI * c12R *   (Sl * hI + 4) * b2Rs4 + ((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R)) *   hI * c11R * c12Rr4 - 0.2e1 / 0.3e1 * (  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * theta *   hI * b2Ls4 + 0.2e1 / 0.3e1 * (  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) *   hI * b2Rs4 -   (hI * hI) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rs4 / 0.3e1 + 0.2e1 / 0.3e1 *   (hI * hI) * c12R * c11R * beta * (b2L * theta - b2R) *   (Sl * hI + 4) * c2Ls4 -   (hI * hI) * c12R * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rr4 -   (hI * hI) * c12R * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c2Rs4 / 0.3e1 +   (hI * hI) * pow(c11R, 0.2e1) * (b2L * theta - b2R) *   (Sl * hI + 4) * c2Rr4 / 0.3e1 + 0.2e1 / 0.3e1 *   (hI * hI) * c12R * b1LI * beta * theta * c11R *   (Sl * hI + 4) * c2Lr4 + ((  (4 * Sl * hI + 8) * c12R + 0.2e1 / 0.3e1 * is *   hI * c2R *   (Sl * hI + 3)) * pow(c11R, 0.2e1) - ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * c12R +   hI * c2R *   (Sl * hI + 4)) * c1R *   hI * c11R / 0.3e1 + c12R *   (hI * hI) * pow(c1R, 0.2e1) *   (Sl * hI + 4)) * (b2L * theta - b2R)) * pow(c11R, 0.2e1)) *   hI * pow(b1RI, 0.2e1) * b1Rs4 + (-0.2e1 *   (Sl * hI + 4) *     pow(  hI,   3) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) * pow(c11Rs4, 0.2e1) - 0.6e1 * (0.4e1 / 0.3e1 *   (Sl * hI + 4) * c12R *   hI * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) * c11Rr4 + 0.2e1 / 0.3e1 *   (Sl * hI + 4) * (theta * (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1)) * b2Ls4 + (-c11R * c22R + 0.8e1 * pow(c12R, 0.2e1)) * b2Rs4 + ((c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) * c12R) *   hI * c12Rs4 - 0.2e1 / 0.3e1 * (-0.3e1 * c12R * theta * b2Ls4 + 0.3e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) *   (Sl * hI + 4) *   hI * c11R * c12Rr4 + theta * (((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.12e2 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * b2Ls4 / 0.3e1 + (((-0.8e1 / 0.3e1 *   Sl *   hI * is - 0.8e1 * is) * pow(c12R, 0.2e1) - 0.2e1 / 0.3e1 *   hI * c2R *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4) / 0.3e1) * c11R + 0.4e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * b2Rs4 +   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rs4 / 0.3e1 -   (Sl * hI + 4) * beta *   hI * ((c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c2Ls4 / 0.3e1 +   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rr4 / 0.3e1 +   hI * b1RI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c2Rs4 / 0.3e1 +   hI * c12R * b1RI * c11R *   (Sl * hI + 4) * c2Rr4 / 0.3e1 - b1LI *   hI * c11R * c12R * beta * theta *   (Sl * hI + 4) * c2Lr4 / 0.3e1 + ((c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4))) *   (hI * hI) * c11R * c11Rs4 + (0.2e1 *   (Sl * hI + 4) *     pow(  hI,   3) * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R)) * pow(c11Rr4, 0.2e1) + 0.3e1 *   (hI * hI) * (-0.4e1 *   hI * c12R * (b2Ls4 * theta - b2Rs4) *   (Sl * hI + 4) * c12Rs4 + 0.4e1 / 0.3e1 *   hI * c11R * (b2Ls4 * theta - b2Rs4) *   (Sl * hI + 4) * c12Rr4 - 0.4e1 * theta * (((-0.2e1 / 0.3e1 *   Sl *   hI * is - 0.2e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * b2Ls4 + (((-0.8e1 / 0.3e1 *   Sl *   hI * is - 0.8e1 * is) * c12R - 0.2e1 / 0.3e1 *   hI * c2R *   (Sl * hI + 4)) * c11R + 0.4e1 * c12R *   hI * c1R *   (Sl * hI + 4)) * b2Rs4 - 0.2e1 *   hI * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rs4 - 0.2e1 / 0.3e1 *   (Sl * hI + 4) * (-0.3e1 * c12R * b1RI + c11R * (b2L * theta - b2R)) * beta *   hI * c2Ls4 + 0.2e1 / 0.3e1 *   hI * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c1Rr4 - 0.2e1 * b1RI *   hI * c12R *   (Sl * hI + 4) * c2Rs4 + 0.2e1 / 0.3e1 *   hI * b1RI * c11R *   (Sl * hI + 4) * c2Rr4 - 0.2e1 / 0.3e1 * b1LI *   hI * c11R * beta * theta *   (Sl * hI + 4) * c2Lr4 + ((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * ((c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R))) * c11Rr4 - 0.8e1 *     pow(  hI,   3) * c12R * (b2Ls4 * theta - b2Rs4) *   (Sl * hI + 4) * pow(c12Rs4, 0.2e1) - 0.12e2 * (-0.2e1 / 0.3e1 *   hI * c11R * (b2Ls4 * theta - b2Rs4) *   (Sl * hI + 4) * c12Rr4 + (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * theta * b2Ls4 + (((0.4e1 / 0.3e1 *   Sl *   hI * is + 0.4e1 * is) * c12R +   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R - c12R *   hI * c1R *   (Sl * hI + 4)) * b2Rs4 +   (Sl * hI + 4) * c12R *   hI * ((b2L * theta - b2R) * c1Rs4 - b1RI * (c2Ls4 * beta - c2Rs4)) / 0.3e1) *   (hI * hI) * c12Rs4 + 0.6e1 * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * theta * b2Ls4 + ((0.4e1 / 0.3e1 *   Sl *   hI * is + 0.4e1 * is) * c11R - c1R *   hI *   (Sl * hI + 4)) * b2Rs4 + 0.2e1 / 0.3e1 *   (Sl * hI + 4) *   hI * ((b2L * theta - b2R) * c1Rs4 - b1RI * (c2Ls4 * beta - c2Rs4))) *   (hI * hI) * c11R * c12Rr4 - 0.4e1 *     pow(  hI,   3) * c12R * c2Lr4 * beta * theta * c11R *   (Sl * hI + 4) * b1Ls4 - 0.6e1 * (-  (hI * hI) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c1Rs4 / 0.3e1 + 0.2e1 / 0.3e1 *   (hI * hI) * c12R * c11R * beta *   (Sl * hI + 4) * c2Ls4 -   (hI * hI) * c12R * c11R *   (Sl * hI + 4) * c1Rr4 -   (hI * hI) * c12R * c11R *   (Sl * hI + 4) * c2Rs4 / 0.3e1 +   (hI * hI) * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c2Rr4 / 0.3e1 + (  (4 * Sl * hI + 8) * c12R + 0.2e1 / 0.3e1 * is *   hI * c2R *   (Sl * hI + 3)) * pow(c11R, 0.2e1) - ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * c12R +   hI * c2R *   (Sl * hI + 4)) * c1R *   hI * c11R / 0.3e1 + c12R *   (hI * hI) * pow(c1R, 0.2e1) *   (Sl * hI + 4)) * theta *   hI * b2Ls4 + 0.6e1 * (-  (hI * hI) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c1Rs4 / 0.3e1 + 0.2e1 / 0.3e1 *   (hI * hI) * c12R * c11R * beta *   (Sl * hI + 4) * c2Ls4 -   (hI * hI) * c12R * c11R *   (Sl * hI + 4) * c1Rr4 -   (hI * hI) * c12R * c11R *   (Sl * hI + 4) * c2Rs4 / 0.3e1 +   (hI * hI) * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c2Rr4 / 0.3e1 + (  (4 * Sl * hI + 8) * c12R + 0.2e1 / 0.3e1 * is *   hI * c2R *   (Sl * hI + 3)) * pow(c11R, 0.2e1) - ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * c12R +   hI * c2R *   (Sl * hI + 4)) * c1R *   hI * c11R / 0.3e1 + c12R *   (hI * hI) * pow(c1R, 0.2e1) *   (Sl * hI + 4)) *   hI * b2Rs4 + 0.2e1 * (  hI * (c2L * beta - c2R) *   (Sl * hI + 4) * c12R * b1RI - 0.3e1 * (b2L * theta - b2R) * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4))) *   (hI * hI) * c1Rs4 + ((((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * c12R +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4)) * c11R + 0.4e1 * c12R *   hI * c1R *   (Sl * hI + 4)) * b1RI - 0.2e1 * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R) * c11R) * beta *   (hI * hI) * c2Ls4 - 0.2e1 *   (hI * hI) * (  hI * (c2L * beta - c2R) *   (Sl * hI + 4) * b1RI - 0.3e1 / 0.2e1 * ((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R)) * c11R * c1Rr4 - 0.4e1 *   (hI * hI) * (((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.4e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * b1RI * c2Rs4 +   (hI * hI) * ((-0.4e1 *   Sl *   hI * is - 0.12e2 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1RI * c11R * c2Rr4 + (c1L *   hI * beta *   (Sl * hI + 4) * b1RI - 0.2e1 * theta * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1LI) * beta *   (hI * hI) * c11R * c2Lr4 + (  (12 * Sl * hI + 24) * pow(c11R, 0.2e1) - 0.4e1 * is *   hI * c1R *   (Sl * hI + 3) * c11R +   (hI * hI) * pow(c1R, 0.2e1) *   (Sl * hI + 4)) *   hI * (c2L * beta - c2R) * b1RI - ((-0.24e2 *   Sl *   hI * is - 0.24e2 * is) * pow(c11R, 0.3e1) + 0.12e2 * c1R *   hI *   (Sl * hI + 2) * pow(c11R, 0.2e1) - 0.4e1 * pow(c1R, 0.2e1) *   (hI * hI) * is *   (Sl * hI + 3) * c11R +     pow(  hI,   3) * pow(c1R, 0.3e1) *   (Sl * hI + 4)) * (b2L * theta - b2R)) * pow(c11R, 0.2e1)) * pow(b1RI, 0.3e1) + 0.4e1 *   (hI * hI) * b1RI * c11R * (-0.3e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rs4 + (  hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rr4 + 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 + 0.6e1 *   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 + 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 - 0.6e1 *   hI * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 + (  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) * c11R) * pow(b1Rs4, 0.2e1) +     pow(  hI,   3) * c11L * beta * beta * pow(b1RI, 0.4e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c2Lrr4 - 0.4e1 *   (Sl * hI + 4) * beta *     pow(  hI,   3) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * pow(b1RI, 0.3e1) * pow(c11R, 0.2e1) * c2Lss4 - 0.4e1 * pow(b1RI, 0.3e1) *     pow(  hI,   3) * pow(c11R, 0.2e1) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rsss2 - 0.4e1 *   (Sl * hI + 4) * (b2L * theta - b2R) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *     pow(  hI,   3) * pow(b1RI, 0.2e1) * pow(c11R, 0.2e1) * b1Rsss2 - 0.4e1 *   (Sl * hI + 4) * beta *     pow(  hI,   3) * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c2Lrs4 -   (Sl * hI + 4) * (0.2e1 * c12R * (b2L * theta - b2R) * b1Rs4 + b1RI * (-0.2e1 * c12R * theta * b2Ls4 + 0.2e1 * c12R * b2Rs4 + (c2L * beta - c2R) * b1RI - c1R * (b2L * theta - b2R))) *     pow(  hI,   3) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * c11Rrr4 -   (Sl * hI + 4) * (b2L * theta - b2R) *     pow(  hI,   3) * pow(b1RI, 0.3e1) * pow(c11R, 0.4e1) * c1Rrr4 -     pow(  hI,   3) * pow(c11R, 0.4e1) * pow(b1RI, 0.4e1) *   (Sl * hI + 4) * c2Rrr4 + 0.2e1 *   (Sl * hI + 4) *     pow(  hI,   3) * pow(b1RI, 0.2e1) * ((b2L * theta - b2R) * b1Rs4 - b1RI * (b2Ls4 * theta - b2Rs4)) * pow(c11R, 0.4e1) * c12Rrr4 - 0.2e1 * (-0.6e1 *   hI * c11R * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Rs4 + (-0.3e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c11Rs4 + (  hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c11Rr4 + 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c12Rs4 + 0.6e1 *   hI * c11R * c12R *   (Sl * hI + 4) * c12Rr4 +   hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 -   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 - 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 *   hI * c2R *   (Sl * hI + 4) * c12R + c22R *   hI * c1R *   (Sl * hI + 4)) * c11R - 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * c11R) * b1RI) *   (hI * hI) * pow(b1RI, 0.2e1) * c11R * b2Rss4) * b1RI * pow(b1RI, -0.4e1) * pow(c11R, -0.5e1) / 0.24e2; 
a02  = (-0.12e2 * b1RI *   (hI * hI) * pow(c11R, 0.2e1) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * b1Rss4 - 0.2e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) *   (hI * hI) * pow(b1RI, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * c11R * c11Rss4 + 0.2e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * c11Rrr4 - 0.4e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) * c12R *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.2e1) * c11Rrs4 + 0.2e1 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rss4 - 0.4e1 *   (Sl * hI + 4) * beta *   (hI * hI) * pow(b1RI, 0.2e1) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * pow(c11R, 0.2e1) * c22Lss4 - 0.2e1 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.4e1) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rrr4 + 0.4e1 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.3e1) * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rrs4 + 0.12e2 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Lss4 - 0.12e2 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rss4 - 0.4e1 *   (Sl * hI + 4) * beta *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c22Lrs4 + pow(b1RI, 0.3e1) *   (hI * hI) * pow(c11R, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c22Rss4 +   (hI * hI) * c11L * beta * beta * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c22Lrr4 -   (hI * hI) * pow(c11R, 0.4e1) * pow(b1RI, 0.3e1) *   (Sl * hI + 4) * c22Rrr4 + 0.2e1 *   (hI * hI) * c12R * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c22Rrs4 + 0.4e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) *   (hI * hI) * pow(b1RI, 0.2e1) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * pow(c11Rs4, 0.2e1) + 0.2e1 *   hI * (0.6e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * b1Rs4 + (0.8e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) * c12R *   hI * c11Rr4 - 0.2e1 *   (Sl * hI + 4) * (c12R * (c22L * beta - c22R) * b1RI + (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R)) *   hI * c12Rs4 - 0.6e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.3e1 + c22R / 0.3e1) * b1RI + c12R * (b2L * theta - b2R)) *   hI * c11R * c12Rr4 - 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 + 0.6e1 *   hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 -   hI * b1RI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c22Rs4 +   (Sl * hI + 4) * beta *   hI * ((c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c22Ls4 -   hI * c12R * b1RI * c11R *   (Sl * hI + 4) * c22Rr4 + b1LI *   hI * c11R * c12R * beta * theta *   (Sl * hI + 4) * c22Lr4 + ((0.4e1 * is * (c22L * beta - c22R) *   (Sl * hI + 3) * c12R +   (Sl * hI + 4) * ((c2L * beta - 0.3e1 / 0.2e1 * c2R) * c22R + c2R * c22L * beta / 0.2e1) *   hI) * c11R - 0.6e1 *   (Sl * hI + 4) * ((c2L * beta - c2R) * c12R + c1R * (c22L * beta - c22R) / 0.2e1) * c12R *   hI) * b1RI + (((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * pow(c12R, 0.2e1) +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4)) * c11R + 0.12e2 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) * b1RI) * b1RI * c11R * c11Rs4 + (0.24e2 *   (hI * hI) * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(b1Rs4, 0.2e1) + 0.4e1 * (-  hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c11Rr4 - 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 - 0.6e1 *   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 - 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 + 0.6e1 *   hI * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 -   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c22Rs4 +   hI * c11R * c12R * beta * (b2L * theta - b2R) *   (Sl * hI + 4) * c22Ls4 +   hI * pow(c11R, 0.2e1) * (b2L * theta - b2R) *   (Sl * hI + 4) * c22Rr4 + b1LI *   hI * c11R * c12R * beta * theta *   (Sl * hI + 4) * c22Lr4 + (0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * pow(c12R, 0.2e1) +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4)) * c11R + 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) *   hI * b1RI * b1Rs4 + (-0.4e1 *   (Sl * hI + 4) * ((-c22L * beta / 0.2e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) *   (hI * hI) * pow(c11Rr4, 0.2e1) - 0.2e1 * (0.6e1 *   hI * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rs4 - 0.2e1 *   hI * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 - 0.2e1 *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 + 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 + 0.3e1 * b1RI *   hI * c12R *   (Sl * hI + 4) * c22Rs4 +   (Sl * hI + 4) * (-0.3e1 * c12R * b1RI + c11R * (b2L * theta - b2R)) * beta *   hI * c22Ls4 -   hI * b1RI * c11R *   (Sl * hI + 4) * c22Rr4 + b1LI *   hI * c11R * beta * theta *   (Sl * hI + 4) * c22Lr4 + (0.2e1 * is * (c22L * beta - c22R) *   (Sl * hI + 3) * c11R - 0.3e1 *   (Sl * hI + 4) * ((c2L * beta - c2R) * c12R + c1R * (c22L * beta - c22R) / 0.2e1) *   hI) * b1RI + (((-0.4e1 *   Sl *   hI * is - 0.12e2 * is) * c12R +   hI * (c2L * beta - c2R) *   (Sl * hI + 4)) * c11R + 0.6e1 * c12R *   hI * c1R *   (Sl * hI + 4)) * (b2L * theta - b2R)) *   hI * c11Rr4 - 0.4e1 *   (hI * hI) * c12R * c22Lr4 * beta * theta * c11R *   (Sl * hI + 4) * b1Ls4 - 0.8e1 *   (hI * hI) * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * pow(c12Rs4, 0.2e1) + 0.4e1 * (0.2e1 *   hI * c11R * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Rr4 + 0.2e1 *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Ls4 - 0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b2Rs4 - b1RI *   hI * c12R *   (Sl * hI + 4) * c22Rs4 + b1RI *   hI * c12R * beta *   (Sl * hI + 4) * c22Ls4 +   hI * (c2L * beta - c2R) *   (Sl * hI + 4) * c12R * b1RI - 0.3e1 * (b2L * theta - b2R) * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4))) *   hI * c12Rs4 - 0.4e1 *   hI * c11R * (-0.6e1 *   hI * c12R * theta *   (Sl * hI + 4) * b2Ls4 + 0.6e1 *   hI * c12R *   (Sl * hI + 4) * b2Rs4 -   hI * b1RI *   (Sl * hI + 4) * c22Rs4 + b1RI *   hI * beta *   (Sl * hI + 4) * c22Ls4 +   hI * (c2L * beta - c2R) *   (Sl * hI + 4) * b1RI - 0.3e1 / 0.2e1 * ((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R)) * c12Rr4 + beta *   hI * (-0.4e1 *   hI * c11R * c12R * theta *   (Sl * hI + 4) * b2Ls4 + 0.4e1 *   hI * c11R * c12R *   (Sl * hI + 4) * b2Rs4 + (((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * c12R +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4)) * c11R + 0.4e1 * c12R *   hI * c1R *   (Sl * hI + 4)) * b1RI - 0.2e1 * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R) * c11R) * c22Ls4 - 0.4e1 * (-  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 +   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 + 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * pow(c12R, 0.2e1) +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4)) * c11R + 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * theta *   hI * b2Ls4 + 0.4e1 * (-  hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 +   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 + 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * pow(c12R, 0.2e1) +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4)) * c11R + 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) *   hI * b2Rs4 - 0.4e1 *   hI * (((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.4e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * b1RI * c22Rs4 + 0.2e1 *   (Sl * hI + 4) * (c12R * (c22L * beta - c22R) * b1RI + (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R)) *   (hI * hI) * c1Rs4 +   hI * ((-0.4e1 *   Sl *   hI * is - 0.12e2 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1RI * c11R * c22Rr4 + 0.6e1 *   (Sl * hI + 4) *   (hI * hI) * c11R * ((-c22L * beta / 0.3e1 + c22R / 0.3e1) * b1RI + c12R * (b2L * theta - b2R)) * c1Rr4 + (c1L *   hI * beta *   (Sl * hI + 4) * b1RI - 0.2e1 * theta * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1LI) * beta *   hI * c11R * c22Lr4 - 0.8e1 *   (Sl * hI + 4) * beta *   (hI * hI) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c2Ls4 + 0.2e1 *   (Sl * hI + 4) * ((c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) *   (hI * hI) * c2Rs4 - 0.2e1 *   (Sl * hI + 4) * (-c12R * b1RI + c11R * (b2L * theta - b2R)) *   (hI * hI) * c11R * c2Rr4 - 0.4e1 *   (Sl * hI + 4) * beta *   (hI * hI) * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c2Lr4 + (0.12e2 * (c22L * beta - c22R) *   (Sl * hI + 2) * pow(c11R, 0.2e1) + (-0.8e1 * is * (c2L * beta - c2R) *   (Sl * hI + 3) * c12R + 0.4e1 * c1R * is *   (Sl * hI + 3) * c22R - 0.4e1 * is * c22L * beta *   (Sl * hI + 3) * c1R +   hI * pow(c2L * beta - c2R, 0.2e1) *   (Sl * hI + 4)) *   hI * c11R + 0.4e1 * c1R *   (Sl * hI + 4) * ((c2L * beta - c2R) * c12R + c1R * (c22L * beta - c22R) / 0.4e1) *   (hI * hI)) * b1RI - 0.2e1 * ((  (12 * Sl * hI + 24) * c12R - 0.2e1 *   hI * is * (c2L * beta - c2R) *   (Sl * hI + 3)) * pow(c11R, 0.2e1) + ((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * c12R +   hI * (c2L * beta - c2R) *   (Sl * hI + 4)) * c1R *   hI * c11R + 0.3e1 * c12R *   (hI * hI) * pow(c1R, 0.2e1) *   (Sl * hI + 4)) * (b2L * theta - b2R)) * pow(b1RI, 0.2e1)) * pow(c11R, 0.2e1)) *   hI * pow(b1RI, -0.3e1) * b1RI * pow(c11R, -0.5e1) / 0.24e2;
a03  = -(-  (Sl * hI + 4) * c12R * (  ((c22L * beta - 3 * c22R) * c11R) + 0.6e1 * pow(c12R, 0.2e1)) *   hI * (b2L * theta - b2R) *   c11R * b1Rs4 + (-  (Sl * hI + 4) * ((  (c11R * c22R) - 0.6e1 * pow(c12R, 0.2e1)) *   (c22L * beta - c22R) * b1RI + c12R * (  ((c22L * beta - 3 * c22R) * c11R) + 0.12e2 * pow(c12R, 0.2e1)) * (b2L * theta - b2R)) *   hI * c11Rs4 / 0.2e1 + (  (Sl * hI + 4) *   hI * (-0.3e1 * c12R *   (c22L * beta - c22R) * b1RI + (  ((c22L * beta - c22R) * c11R) + 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R)) * c11Rr4 / 0.2e1 -   (Sl * hI + 4) * (c12R *   (c22L * beta - c22R) * b1RI + (  (c11R * c22R) - 0.6e1 * pow(c12R, 0.2e1)) * (b2L * theta - b2R)) *   hI * c12Rs4 - 0.3e1 *   (Sl * hI + 4) * ((-  (c22L * beta) / 0.3e1 +   c22R / 0.3e1) * b1RI + c12R * (b2L * theta - b2R)) *   hI *   c11R * c12Rr4 +   (Sl * hI + 4) * theta * c12R * (  ((c22L * beta - 3 * c22R) * c11R) + 0.6e1 * pow(c12R, 0.2e1)) *   hI * b2Ls4 -   (Sl * hI + 4) * c12R * (  ((c22L * beta - 3 * c22R) * c11R) + 0.6e1 * pow(c12R, 0.2e1)) *   hI * b2Rs4 -   (Sl * hI + 4) * ((  (c11R * c22R) - 0.4e1 * pow(c12R, 0.2e1)) * b1RI +   c11R * c12R * (b2L * theta - b2R)) *   hI * c22Rs4 / 0.2e1 + 0.2e1 *   (Sl * hI + 4) * (((-  (c22L * beta) / 0.4e1 +   c22R / 0.2e1) *   c11R - pow(c12R, 0.2e1)) * b1RI +   c11R * c12R * (b2L * theta - b2R)) *   beta *   hI * c22Ls4 +   (Sl * hI + 4) * (-c12R * b1RI +   c11R * (b2L * theta - b2R)) *   hI *   c11R * c22Rr4 / 0.2e1 +   (Sl * hI + 4) *   beta *   hI *   c11R * (b1LI * c12R * theta - c12L *   beta * b1RI / 0.2e1) * c22Lr4 + (-  (c22L * beta - c22R) * (  (-4 * Sl * hI * is - 12 * is) * c12R +   (hI * (c2L * beta - c2R) * (Sl * hI + 4))) *   c11R / 0.2e1 -   (Sl * hI + 4) * c12R *   hI * (  (c2L * beta - c2R) * c12R +   (c1R * (c22L * beta - c22R)))) * b1RI + (b2L * theta - b2R) * (-  (is * (c22L * beta - c22R) * (Sl * hI + 3) *   pow(  c11R,   2)) + (  (-4 * Sl * hI * is - 12 * is) * pow(c12R, 0.2e1) +   hI *   (c2L * beta - c2R) *   (Sl * hI + 4) * c12R +   (hI * c1R * (c22L * beta - c22R) * (Sl * hI + 4)) / 0.2e1) *   c11R + 0.3e1 * pow(c12R, 0.2e1) *   hI *   c1R *   (Sl * hI + 4))) *   c11R) * b1RI) *   (hI * hI) * pow(b1RI, -0.2e1) *     pow(  c11R,   (-4)) * b1RI / 0.6e1;
a04  = -  (Sl * hI + 4) * (-((c22L * beta - c22R) * c11R + 0.4e1 * pow(c12R, 0.2e1)) * (c22L * beta - c22R) * b1RI / 0.4e1 + ((c22L * beta - c22R) * c11R + 0.2e1 * pow(c12R, 0.2e1)) * c12R * (b2L * theta - b2R)) *     pow(  hI,   3) / b1RI * pow(c11R, -0.3e1) * b1RI / 0.6e1;
a10  = (0.4e1 * pow(b1RI, 0.3e1) * pow(hI, 0.3e1) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Lsss2 - 0.4e1 * b1LI * pow(b1RI, 0.2e1) * pow(hI, 0.3e1) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Rsss2 - 0.2e1 * theta * hI * hI * b1RI * (-0.12e2 * b1LI * hI * c11R * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Rs4 + (-0.3e1 * b1LI * hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rs4 + (0.6e1 * hI * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Ls4 + (hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + hI * c11R * c12R * (Sl * hI + 0.4e1) * c22Rs4 - hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c22Rr4 - 0.2e1 * c22R * is * (Sl * hI + 0.3e1) * pow(c11R, 0.2e1) + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.6e1 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * b1LI) * c11R) * b1RI) * c11R * b1Rss4 + 0.2e1 * theta * (-0.6e1 * hI * c11R * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Rs4 + (-0.3e1 * hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rs4 + (hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + hI * c11R * c12R * (Sl * hI + 0.4e1) * c22Rs4 - hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c22Rr4 - 0.2e1 * c22R * is * (Sl * hI + 0.3e1) * pow(c11R, 0.2e1) + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.6e1 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * c11R) * b1RI) * hI * hI * pow(b1RI, 0.2e1) * c11R * b1Lss4 + (Sl * hI + 0.4e1) * (0.2e1 * b1LI * c12R * theta * b1Rs4 + b1RI * (c1L * b1RI * beta - c1R * b1LI * theta - 0.2e1 * c12R * theta * b1Ls4)) * pow(hI, 0.3e1) * pow(b1RI, 0.2e1) * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * c11R * c11Rss4 - (Sl * hI + 0.4e1) * (0.2e1 * b1LI * c12R * theta * b1Rs4 + b1RI * (c1L * b1RI * beta - c1R * b1LI * theta - 0.2e1 * c12R * theta * b1Ls4)) * pow(hI, 0.3e1) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * c11Rrr4 + 0.2e1 * (Sl * hI + 0.4e1) * (0.2e1 * b1LI * c12R * theta * b1Rs4 + b1RI * (c1L * b1RI * beta - c1R * b1LI * theta - 0.2e1 * c12R * theta * b1Ls4)) * c12R * pow(hI, 0.3e1) * pow(b1RI, 0.2e1) * pow(c11R, 0.2e1) * c11Rrs4 - 0.2e1 * pow(b1RI, 0.2e1) * pow(hI, 0.3e1) * pow(c11R, 0.2e1) * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b1LI * b1Rs4 - b1RI * b1Ls4) * (Sl * hI + 0.4e1) * c12Rss4 - 0.4e1 * (Sl * hI + 0.4e1) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * beta * pow(hI, 0.3e1) * pow(b1RI, 0.3e1) * pow(c11R, 0.2e1) * c1Lss4 + 0.2e1 * pow(b1RI, 0.2e1) * pow(hI, 0.3e1) * pow(c11R, 0.4e1) * theta * (b1LI * b1Rs4 - b1RI * b1Ls4) * (Sl * hI + 0.4e1) * c12Rrr4 - 0.4e1 * pow(b1RI, 0.2e1) * pow(hI, 0.3e1) * pow(c11R, 0.3e1) * c12R * theta * (b1LI * b1Rs4 - b1RI * b1Ls4) * (Sl * hI + 0.4e1) * c12Rrs4 - 0.4e1 * (Sl * hI + 0.4e1) * beta * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * pow(hI, 0.3e1) * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) * c1Lrs4 + b1LI * pow(b1RI, 0.3e1) * pow(hI, 0.3e1) * pow(c11R, 0.2e1) * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c1Rss4 + pow(hI, 0.3e1) * c11L * beta * beta * pow(b1RI, 0.4e1) * pow(c11R, 0.3e1) * (Sl * hI + 0.4e1) * c1Lrr4 - pow(hI, 0.3e1) * pow(b1RI, 0.3e1) * pow(c11R, 0.4e1) * b1LI * theta * (Sl * hI + 0.4e1) * c1Rrr4 + 0.2e1 * pow(hI, 0.3e1) * c12R * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) * b1LI * theta * (Sl * hI + 0.4e1) * c1Rrs4 - 0.24e2 * b1LI * pow(hI, 0.3e1) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * pow(b1Rs4, 0.3e1) + 0.4e1 * theta * (-0.3e1 * b1LI * hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rs4 + (0.6e1 * hI * c12R * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Ls4 + (hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + hI * c11R * c12R * (Sl * hI + 0.4e1) * c22Rs4 - hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c22Rr4 - 0.2e1 * c22R * is * (Sl * hI + 0.3e1) * pow(c11R, 0.2e1) + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.6e1 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * b1LI) * c11R) * hI * hI * b1RI * c11R * pow(b1Rs4, 0.2e1) + 0.6e1 * (-0.2e1 / 0.3e1 * hI * hI * c12R * b1LI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * pow(c11Rs4, 0.2e1) + theta * hI * (0.6e1 * hI * c12R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * b1Ls4 + (-0.8e1 * hI * pow(c12R, 0.2e1) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.12e2 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * b1LI) * c11R * c11Rs4 / 0.3e1 + (-0.2e1 / 0.3e1 * theta * (hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + hI * c11R * c12R * (Sl * hI + 0.4e1) * c22Rs4 - hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c22Rr4 - 0.2e1 * c22R * is * (Sl * hI + 0.3e1) * pow(c11R, 0.2e1) + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.6e1 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * hI * b1Ls4 + 0.2e1 / 0.3e1 * hI * hI * c12R * b1LI * theta * (Sl * hI + 0.4e1) * pow(c11Rr4, 0.2e1) + 0.2e1 * (hI * c12R * (Sl * hI + 0.4e1) * c12Rs4 - hI * c11R * (Sl * hI + 0.4e1) * c12Rr4 / 0.3e1 + ((-0.2e1 / 0.3e1 * Sl * hI * is - 0.2e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * theta * hI * b1LI * c11Rr4 + 0.4e1 / 0.3e1 * hI * hI * c12R * b1LI * theta * (Sl * hI + 0.4e1) * pow(c12Rs4, 0.2e1) + 0.2e1 * theta * (-0.2e1 / 0.3e1 * hI * c11R * (Sl * hI + 0.4e1) * c12Rr4 + ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * hI * b1LI * c12Rs4 - theta * ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * hI * c11R * b1LI * c12Rr4 + 0.2e1 / 0.3e1 * hI * hI * c12R * c11R * beta * (b2L * theta - b2R) * (Sl * hI + 0.4e1) * c1Ls4 + theta * (-hI * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c1Rs4 / 0.3e1 - hI * hI * c12R * c11R * (Sl * hI + 0.4e1) * c1Rr4 - hI * hI * c12R * c11R * (Sl * hI + 0.4e1) * c2Rs4 / 0.3e1 + hI * hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c2Rr4 / 0.3e1 + 0.2e1 / 0.3e1 * hI * hI * c12R * c11R * beta * (Sl * hI + 0.4e1) * c1Lr4 + ((0.4e1 * Sl * hI + 0.8e1) * c12R + 0.2e1 / 0.3e1 * is * hI * c2R * (Sl * hI + 0.3e1)) * pow(c11R, 0.2e1) - ((0.8e1 * Sl * hI * is + 0.24e2 * is) * c12R + hI * c2R * (Sl * hI + 0.4e1)) * c1R * hI * c11R / 0.3e1 + c12R * hI * hI * pow(c1R, 0.2e1) * (Sl * hI + 0.4e1)) * b1LI) * pow(c11R, 0.2e1)) * hI * pow(b1RI, 0.2e1) * b1Rs4 + (-0.2e1 * pow(hI, 0.3e1) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (c1L * b1RI * beta - c1R * b1LI * theta - 0.2e1 * c12R * theta * b1Ls4) * (Sl * hI + 0.4e1) * pow(c11Rs4, 0.2e1) - 0.6e1 * hI * hI * (theta * (-0.8e1 * hI * pow(c12R, 0.2e1) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 * hI * (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c12Rs4 + 0.6e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * c12Rr4 + ((0.8e1 * Sl * hI * is + 0.24e2 * is) * pow(c12R, 0.2e1) + 0.2e1 * hI * c2R * (Sl * hI + 0.4e1) * c12R + c22R * hI * c1R * (Sl * hI + 0.4e1)) * c11R - 0.12e2 * pow(c12R, 0.2e1) * hI * c1R * (Sl * hI + 0.4e1)) * b1Ls4 / 0.3e1 + 0.4e1 / 0.3e1 * hI * c12R * (c1L * b1RI * beta - c1R * b1LI * theta) * (Sl * hI + 0.4e1) * c11Rr4 + 0.2e1 / 0.3e1 * hI * c12R * (c1L * b1RI * beta - c1R * b1LI * theta) * (Sl * hI + 0.4e1) * c12Rs4 - 0.2e1 / 0.3e1 * hI * c11R * (c1L * b1RI * beta - c1R * b1LI * theta) * (Sl * hI + 0.4e1) * c12Rr4 - (Sl * hI + 0.4e1) * beta * hI * ((c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c1Ls4 / 0.3e1 + b1LI * hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c1Rs4 / 0.3e1 - b1LI * hI * c11R * c12R * beta * theta * (Sl * hI + 0.4e1) * c1Lr4 / 0.3e1 + hI * c11R * c12R * b1LI * theta * (Sl * hI + 0.4e1) * c1Rr4 / 0.3e1 + (((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * (c1L * b1RI * beta - c1R * b1LI * theta)) * c11R * c11Rs4 + (-0.6e1 * (0.2e1 / 0.3e1 * hI * hI * c12R * (Sl * hI + 0.4e1) * pow(c11Rr4, 0.2e1) + 0.2e1 * (hI * c12R * (Sl * hI + 0.4e1) * c12Rs4 - hI * c11R * (Sl * hI + 0.4e1) * c12Rr4 / 0.3e1 + ((-0.2e1 / 0.3e1 * Sl * hI * is - 0.2e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * hI * c11Rr4 + 0.4e1 / 0.3e1 * hI * hI * c12R * (Sl * hI + 0.4e1) * pow(c12Rs4, 0.2e1) + 0.2e1 * (-0.2e1 / 0.3e1 * hI * c11R * (Sl * hI + 0.4e1) * c12Rr4 + ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * hI * c12Rs4 - ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * hI * c11R * c12Rr4 - hI * hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (Sl * hI + 0.4e1) * c1Rs4 / 0.3e1 + 0.2e1 / 0.3e1 * hI * hI * c12R * c11R * beta * (Sl * hI + 0.4e1) * c1Lr4 - hI * hI * c12R * c11R * (Sl * hI + 0.4e1) * c1Rr4 + hI * hI * pow(c11R, 0.2e1) * (Sl * hI + 0.4e1) * c2Rr4 / 0.3e1 - hI * hI * c12R * c11R * (Sl * hI + 0.4e1) * c2Rs4 / 0.3e1 + ((0.4e1 * Sl * hI + 0.8e1) * c12R + 0.2e1 / 0.3e1 * is * hI * c2R * (Sl * hI + 0.3e1)) * pow(c11R, 0.2e1) - ((0.8e1 * Sl * hI * is + 0.24e2 * is) * c12R + hI * c2R * (Sl * hI + 0.4e1)) * c1R * hI * c11R / 0.3e1 + c12R * hI * hI * pow(c1R, 0.2e1) * (Sl * hI + 0.4e1)) * theta * hI * b1Ls4 + 0.2e1 * pow(hI, 0.3e1) * (c1L * b1RI * beta - c1R * b1LI * theta) * (Sl * hI + 0.4e1) * pow(c11Rr4, 0.2e1) + 0.3e1 * hI * hI * (-0.2e1 / 0.3e1 * (Sl * hI + 0.4e1) * (-0.3e1 * c12R * b1RI + c11R * (b2L * theta - b2R)) * beta * hI * c1Ls4 - 0.2e1 * hI * c12R * b1LI * theta * (Sl * hI + 0.4e1) * c1Rs4 - 0.2e1 / 0.3e1 * b1LI * hI * c11R * beta * theta * (Sl * hI + 0.4e1) * c1Lr4 + 0.2e1 / 0.3e1 * b1LI * hI * c11R * theta * (Sl * hI + 0.4e1) * c1Rr4 + ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * (c1L * b1RI * beta - c1R * b1LI * theta)) * c11Rr4 - 0.4e1 * pow(hI, 0.3e1) * c12R * (theta * b1LI * c1Rs4 - b1RI * c1Ls4 * beta) * (Sl * hI + 0.4e1) * c12Rs4 + 0.4e1 * pow(hI, 0.3e1) * c11R * (theta * b1LI * c1Rs4 - b1RI * c1Ls4 * beta) * (Sl * hI + 0.4e1) * c12Rr4 + beta * hI * hI * (-0.4e1 * hI * c11R * c12R * theta * (Sl * hI + 0.4e1) * b2Ls4 + 0.4e1 * hI * c11R * c12R * (Sl * hI + 0.4e1) * b2Rs4 + (((-0.8e1 * Sl * hI * is - 0.24e2 * is) * c12R + hI * (c2L * beta - 0.2e1 * c2R) * (Sl * hI + 0.4e1)) * c11R + 0.4e1 * c12R * hI * c1R * (Sl * hI + 0.4e1)) * b1RI - 0.2e1 * ((-0.2e1 * Sl * hI * is - 0.6e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * (b2L * theta - b2R) * c11R) * c1Ls4 + 0.2e1 * (c1L * hI * c12R * beta * (Sl * hI + 0.4e1) * b1RI - 0.3e1 * theta * (((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c12R - hI * c2R * (Sl * hI + 0.4e1) / 0.6e1) * c11R + c12R * hI * c1R * (Sl * hI + 0.4e1)) * b1LI) * hI * hI * c1Rs4 + (c1L * hI * beta * (Sl * hI + 0.4e1) * b1RI - 0.2e1 * theta * ((-0.2e1 * Sl * hI * is - 0.6e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * b1LI) * beta * hI * hI * c11R * c1Lr4 - 0.2e1 * hI * hI * (c1L * hI * beta * (Sl * hI + 0.4e1) * b1RI - 0.3e1 / 0.2e1 * theta * ((-0.4e1 / 0.3e1 * Sl * hI * is - 0.4e1 * is) * c11R + c1R * hI * (Sl * hI + 0.4e1)) * b1LI) * c11R * c1Rr4 + c1L * beta * ((0.12e2 * Sl * hI + 0.24e2) * pow(c11R, 0.2e1) - 0.4e1 * is * hI * c1R * (Sl * hI + 0.3e1) * c11R + hI * hI * pow(c1R, 0.2e1) * (Sl * hI + 0.4e1)) * hI * b1RI - theta * ((-0.24e2 * Sl * hI * is - 0.24e2 * is) * pow(c11R, 0.3e1) + 0.12e2 * c1R * hI * (Sl * hI + 0.2e1) * pow(c11R, 0.2e1) - 0.4e1 * pow(c1R, 0.2e1) * hI * hI * is * (Sl * hI + 0.3e1) * c11R + pow(hI, 0.3e1) * pow(c1R, 0.3e1) * (Sl * hI + 0.4e1)) * b1LI) * pow(c11R, 0.2e1)) * pow(b1RI, 0.3e1)) * b1RI * pow(b1RI, -0.4e1) * pow(c11R, -0.5e1) / 0.24e2;
a11  =   hI * b1RI * (-0.2e1 * pow(b1RI, 0.2e1) *   (hI * hI) * c11R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * c11Rss4 - 0.8e1 *   (Sl * hI + 4) * beta *   (hI * hI) * pow(b1RI, 0.2e1) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * pow(c11R, 0.2e1) * c12Lss4 + 0.2e1 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.3e1) * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * c11Rrr4 - 0.4e1 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * c12R * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * c11Rrs4 + 0.12e2 * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Lss4 - 0.12e2 * b1LI * b1RI *   (hI * hI) * pow(c11R, 0.2e1) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Rss4 - 0.8e1 *   (Sl * hI + 4) * beta *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c12Lrs4 + 0.2e1 * b1LI * pow(b1RI, 0.2e1) *   (hI * hI) * pow(c11R, 0.2e1) * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c12Rss4 + 0.2e1 *   (hI * hI) * c11L * beta * beta * pow(b1RI, 0.3e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c12Lrr4 - 0.2e1 *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.4e1) * b1LI * theta *   (Sl * hI + 4) * c12Rrr4 + 0.4e1 *   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * c12R * b1LI * theta *   (Sl * hI + 4) * c12Rrs4 + 0.4e1 * pow(b1RI, 0.2e1) *   (hI * hI) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * pow(c11Rs4, 0.2e1) + 0.2e1 *   hI * (0.8e1 * b1RI *   hI * c12R * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * c11Rr4 + 0.6e1 * b1LI *   hI * c12R * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Rs4 + (0.2e1 *   (Sl * hI + 4) * beta *   hI * ((c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c12Ls4 - 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Ls4 - 0.2e1 *   (Sl * hI + 4) * (0.2e1 * b1RI * c12R * c12L * beta + b1LI * theta * (c11R * c22R - 0.8e1 * pow(c12R, 0.2e1))) *   hI * c12Rs4 - 0.6e1 *   (Sl * hI + 4) *   hI * (b1LI * c12R * theta - 0.2e1 / 0.3e1 * c12L * beta * b1RI) * c11R * c12Rr4 + 0.2e1 * b1LI *   hI * c11R * c12R * beta * theta *   (Sl * hI + 4) * c12Lr4 + beta * ((0.8e1 * c12L * is *   (Sl * hI + 3) * c12R +   hI * (c1L * c22R + c12L * c2R) *   (Sl * hI + 4)) * c11R - 0.6e1 *   hI * c12R * (c1L * c12R + c1R * c12L) *   (Sl * hI + 4)) * b1RI + (-0.8e1 * is * b1LI * theta *   (Sl * hI + 3) * pow(c12R, 0.2e1) +   (Sl * hI + 4) * (theta * (c2L * beta - 0.2e1 * c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) *   hI * c12R -   hI * c22R * c1R * b1LI * theta *   (Sl * hI + 4)) * c11R + 0.12e2 *   hI * pow(c12R, 0.2e1) * c1R * b1LI * theta *   (Sl * hI + 4)) * b1RI) * b1RI * c11R * c11Rs4 + 0.2e1 * (-0.2e1 * pow(b1RI, 0.2e1) *   (hI * hI) * (b1LI * c12R * theta - c12L * beta * b1RI) *   (Sl * hI + 4) * pow(c11Rr4, 0.2e1) - (0.2e1 * b1LI *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Rs4 + (0.6e1 *   hI * c12R * b1LI * theta *   (Sl * hI + 4) * c12Rs4 - 0.2e1 * b1LI *   hI * c11R * theta *   (Sl * hI + 4) * c12Rr4 - 0.2e1 *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Ls4 + 0.2e1 *   (Sl * hI + 4) * (-0.3e1 * c12R * b1RI + c11R * (b2L * theta - b2R)) * beta *   hI * c12Ls4 + 0.2e1 * b1LI *   hI * c11R * beta * theta *   (Sl * hI + 4) * c12Lr4 - 0.3e1 * beta * (-0.4e1 / 0.3e1 * c12L * is *   (Sl * hI + 3) * c11R +   hI * (c1L * c12R + c1R * c12L) *   (Sl * hI + 4)) * b1RI + (-0.4e1 * is * b1LI * theta *   (Sl * hI + 3) * c12R +   (Sl * hI + 4) * (theta * (c2L * beta - c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) *   hI) * c11R + 0.6e1 * c1R * b1LI *   hI * c12R * theta *   (Sl * hI + 4)) * b1RI) *   hI * b1RI * c11Rr4 + 0.12e2 * b1LI *   (hI * hI) * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * pow(b1Rs4, 0.2e1) + 0.2e1 * (0.2e1 *   hI * c11R * c12R * beta * (b2L * theta - b2R) *   (Sl * hI + 4) * c12Ls4 - 0.6e1 *   hI * c12R * theta * (c11R * c22R - 0.2e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * b1Ls4 - 0.2e1 * b1LI *   hI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c12Rs4 - 0.6e1 *   hI * c11R * c12R * b1LI * theta *   (Sl * hI + 4) * c12Rr4 + 0.2e1 * b1LI *   hI * c11R * c12R * beta * theta *   (Sl * hI + 4) * c12Lr4 +   hI * pow(c11R, 0.2e1) * b1LI * theta *   (Sl * hI + 4) * c22Rr4 -   hI * c11R * c12R * b1LI * theta *   (Sl * hI + 4) * c22Rs4 + 0.2e1 * b1LI * c22R * is * theta *   (Sl * hI + 3) * pow(c11R, 0.2e1) + (-0.8e1 * is * b1LI * theta *   (Sl * hI + 3) * pow(c12R, 0.2e1) +   (Sl * hI + 4) * (theta * (c2L * beta - 0.2e1 * c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) *   hI * c12R -   hI * c22R * c1R * b1LI * theta *   (Sl * hI + 4)) * c11R + 0.6e1 *   hI * pow(c12R, 0.2e1) * c1R * b1LI * theta *   (Sl * hI + 4)) *   hI * b1RI * b1Rs4 + (beta * (0.4e1 * b1RI *   hI * c12R *   (Sl * hI + 4) * c12Rs4 - 0.4e1 *   hI * b1RI * c11R *   (Sl * hI + 4) * c12Rr4 - 0.4e1 *   hI * c11R * c12R * theta *   (Sl * hI + 4) * b2Ls4 + 0.4e1 *   hI * c11R * c12R *   (Sl * hI + 4) * b2Rs4 + (((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * c12R +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4)) * c11R + 0.4e1 * c12R *   hI * c1R *   (Sl * hI + 4)) * b1RI - 0.2e1 * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * (b2L * theta - b2R) * c11R) *   hI * c12Ls4 - 0.2e1 * (-0.2e1 *   hI * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c12Rs4 - 0.6e1 *   hI * c11R * c12R *   (Sl * hI + 4) * c12Rr4 -   hI * c11R * c12R *   (Sl * hI + 4) * c22Rs4 +   hI * pow(c11R, 0.2e1) *   (Sl * hI + 4) * c22Rr4 + 0.2e1 *   hI * c11R * c12R * beta *   (Sl * hI + 4) * c12Lr4 + 0.2e1 * c22R * is *   (Sl * hI + 3) * pow(c11R, 0.2e1) + ((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * pow(c12R, 0.2e1) +   hI * (c2L * beta - 0.2e1 * c2R) *   (Sl * hI + 4) * c12R - c22R *   hI * c1R *   (Sl * hI + 4)) * c11R + 0.6e1 * pow(c12R, 0.2e1) *   hI * c1R *   (Sl * hI + 4)) * theta *   hI * b1Ls4 - 0.4e1 *   (hI * hI) * c12R * b1LI * theta *   (Sl * hI + 4) * pow(c12Rs4, 0.2e1) + 0.2e1 * (0.2e1 * b1LI *   hI * c11R * theta *   (Sl * hI + 4) * c12Rr4 + c1L *   hI * c12R * beta *   (Sl * hI + 4) * b1RI - 0.3e1 * theta * (((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c12R -   hI * c2R *   (Sl * hI + 4) / 0.6e1) * c11R + c12R *   hI * c1R *   (Sl * hI + 4)) * b1LI) *   hI * c12Rs4 - 0.2e1 * (c1L *   hI * beta *   (Sl * hI + 4) * b1RI - 0.3e1 / 0.2e1 * theta * ((-0.4e1 / 0.3e1 *   Sl *   hI * is - 0.4e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1LI) *   hI * c11R * c12Rr4 + (c1L *   hI * beta *   (Sl * hI + 4) * b1RI - 0.2e1 * theta * ((-0.2e1 *   Sl *   hI * is - 0.6e1 * is) * c11R + c1R *   hI *   (Sl * hI + 4)) * b1LI) * beta *   hI * c11R * c12Lr4 - 0.4e1 *   (Sl * hI + 4) * beta *   (hI * hI) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * c11R - pow(c12R, 0.2e1)) * b1RI + c11R * c12R * (b2L * theta - b2R)) * c1Ls4 - 0.2e1 * c1L *   (hI * hI) * c11R * c12R * beta * theta *   (Sl * hI + 4) * b2Ls4 + 0.2e1 * c1L *   (hI * hI) * c11R * c12R * beta *   (Sl * hI + 4) * b2Rs4 +   (Sl * hI + 4) *   (hI * hI) * (0.2e1 * b1RI * c12R * c12L * beta + b1LI * theta * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1))) * c1Rs4 - 0.2e1 *   (Sl * hI + 4) * beta *   (hI * hI) * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c1Lr4 + 0.3e1 *   (Sl * hI + 4) *   (hI * hI) * (b1LI * c12R * theta - 0.2e1 / 0.3e1 * c12L * beta * b1RI) * c11R * c1Rr4 - 0.2e1 *   (Sl * hI + 4) * beta *   (hI * hI) * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c2Ls4 + b1RI * c11L *   (hI * hI) * c11R * beta * beta *   (Sl * hI + 4) * c2Lr4 - b1LI *   (hI * hI) * pow(c11R, 0.2e1) * theta *   (Sl * hI + 4) * c2Rr4 +   (hI * hI) * c12R * b1LI * theta * c11R *   (Sl * hI + 4) * c2Rs4 + beta * (  (12 * Sl * hI + 24) * c12L * pow(c11R, 0.2e1) + (-0.4e1 * c1L * is *   (Sl * hI + 3) * c12R - 0.4e1 * c12L * is *   (Sl * hI + 3) * c1R + c1L *   hI * (c2L * beta - c2R) *   (Sl * hI + 4)) *   hI * c11R + 0.2e1 * c1R *   (Sl * hI + 4) *   (hI * hI) * (c1L * c12R + c1R * c12L / 0.2e1)) * b1RI + (-0.12e2 * b1LI * theta *   (Sl * hI + 2) * c12R + 0.2e1 * (theta * (c2L * beta - c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) *   (Sl * hI + 3) *   hI * is) * pow(c11R, 0.2e1) - c1R * (-0.8e1 * is * b1LI * theta *   (Sl * hI + 3) * c12R +   (Sl * hI + 4) * (theta * (c2L * beta - c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) *   hI) *   hI * c11R - 0.3e1 *   (hI * hI) * pow(c1R, 0.2e1) * c12R * b1LI * theta *   (Sl * hI + 4)) * pow(b1RI, 0.2e1)) * pow(c11R, 0.2e1)) * pow(b1RI, -0.3e1) * pow(c11R, -0.5e1) / 0.24e2;
a12  = -  (hI * hI) * (-  ((Sl * hI + 4) * hI * b1RI * ((2 * c12L * c22R * beta * b1RI + (theta * (c22L * beta - 3 * c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R)) * c12R) * c11R + 12 * b1LI *   pow(  c12R,   3) * theta - 12 * c12L *   pow(  c12R,   2) * beta * b1RI) * c11Rs4) / 0.2e1 + (  ((Sl * hI + 4) * (-6 * b1RI * c12R * c12L * beta + (theta * (c22L * beta - c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R)) * c11R + 6 * b1LI *   pow(  c12R,   2) * theta) * hI * b1RI * c11Rr4) / 0.2e1 -   (((theta * (c22L * beta - 3 * c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R)) * c11R + 6 * b1LI *   pow(  c12R,   2) * theta) * (Sl * hI + 4) * c12R * hI * b1Rs4) + (  ((Sl * hI + 4) * theta * c12R * ((c22L * beta - 3 * c22R) * c11R + 6 *   pow(  c12R,   2)) * hI * b1Ls4) + 0.4e1 *   (Sl * hI + 4) *   beta * (((-  (c22L * beta) / 0.4e1 +   c22R / 0.2e1) *   b1RI +   (c12R * (b2L * theta - b2R))) *   c11R -   (b1RI *   pow(  c12R,   2))) *   hI * c12Ls4 -   (hI * (c11R * c22R * b1LI * theta - 6 * b1LI *   pow(  c12R,   2) * theta + 2 * b1RI * c12R * c12L * beta) * (Sl * hI + 4) * c12Rs4) - 0.3e1 *   (Sl * hI + 4) *   hI * (  (b1LI * c12R * theta) - 0.2e1 / 0.3e1 *   c12L *   beta *   b1RI) *   c11R * c12Rr4 +   (2 * hI * c12R * c12L * beta * theta * c11R * (Sl * hI + 4) * b2Ls4) -   (2 * hI * c11R * c12R * c12L * beta * (Sl * hI + 4) * b2Rs4) + 0.2e1 *   (Sl * hI + 4) *   beta *   hI *   c11R * (  (b1LI * c12R * theta) -   (c12L * beta * b1RI) / 0.2e1) * c12Lr4 +   (Sl * hI + 4) *   beta *   hI *   c11R * (  (b1LI * c12R * theta) -   (c12L * beta * b1RI) / 0.2e1) * c22Ls4 -   (hI * c11L * beta * beta * b1RI * c11R * (Sl * hI + 4) * c22Lr4) / 0.2e1 +   (hI *   pow(  c11R,   2) * b1LI * theta * (Sl * hI + 4) * c22Rr4) / 0.2e1 -   (hI * c11R * c12R * b1LI * theta * (Sl * hI + 4) * c22Rs4) / 0.2e1 -   ((theta * (c22L * beta - c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R)) * (Sl * hI + 3) * is *   pow(  c11R,   2)) + (-  ((-8 * c12L * is * (Sl * hI + 3) * c12R + (Sl * hI + 4) * ((2 * c2L * beta - 2 * c2R) * c12L + c1L * (c22L * beta - c22R)) * hI) * beta * b1RI) / 0.2e1 -   (4 * is * b1LI * theta * (Sl * hI + 3) *   pow(  c12R,   2)) +   ((Sl * hI + 4) * (theta * (c2L * beta - c2R) * b1LI + c1L * beta * (b2L * theta - b2R)) * hI * c12R) +   (c1R * (Sl * hI + 4) * (theta * (c22L * beta - c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R)) * hI) / 0.2e1) *   c11R -   ((Sl * hI + 4) * c12R * hI * (beta * (c1L * c12R + 2 * c1R * c12L) * b1RI - 3 * c1R * b1LI * c12R * theta))) *   b1RI) *   c11R) *     pow(  c11R,   (-4)) * b1RI *     pow(  b1RI,   (-2)) / 0.6e1;
a13  = -  ((Sl * hI + 4) * ((-c12L * beta * (c22L * beta - c22R) * b1RI + c12R * (theta * (c22L * beta - c22R) * b1LI + 2 * c12L * beta * (b2L * theta - b2R))) * c11R + 2 * b1LI *   pow(  c12R,   3) * theta - 2 * c12L *   pow(  c12R,   2) * beta * b1RI) *   pow(  hI,   3) / b1RI *   pow(  c11R,   (-3)) * b1RI) / 0.6e1;
a14  = 0;
a20  = (-0.4e1 *   (Sl * hI + 4) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) * c11R - b1RI * pow(c12R, 0.2e1)) *   (hI * hI) * b1RI * pow(c11R, 0.2e1) * c11Lss4 - 0.4e1 *   (Sl * hI + 4) *   (hI * hI) * b1RI * pow(c11R, 0.3e1) * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c11Lrs4 + pow(b1RI, 0.2e1) * c11L *   (hI * hI) * c11R * (c11R * c22R - 0.4e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * c11Rss4 +   (hI * hI) * c11L * beta * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) *   (Sl * hI + 4) * c11Lrr4 -   (hI * hI) * pow(b1RI, 0.2e1) * pow(c11R, 0.3e1) * c11L *   (Sl * hI + 4) * c11Rrr4 + 0.2e1 *   (hI * hI) * c12R * pow(b1RI, 0.2e1) * pow(c11R, 0.2e1) * c11L *   (Sl * hI + 4) * c11Rrs4 +   hI * (0.2e1 *   (Sl * hI + 4) * ((b1RI * c22R + c12R * (b2L * theta - b2R)) * c11R - 0.6e1 * b1RI * pow(c12R, 0.2e1)) *   hI * b1RI * c11Rs4 + (-0.2e1 *   (Sl * hI + 4) * (-0.3e1 * c12R * b1RI + c11R * (b2L * theta - b2R)) *   hI * b1RI * c11Rr4 + 0.4e1 *   hI * c11R * c12R * (b2L * theta - b2R) *   (Sl * hI + 4) * b1Rs4 + (0.4e1 * b1RI *   hI * c12R *   (Sl * hI + 4) * c12Rs4 - 0.4e1 *   hI * b1RI * c11R *   (Sl * hI + 4) * c12Rr4 - 0.4e1 *   hI * c11R * c12R * theta *   (Sl * hI + 4) * b2Ls4 + 0.4e1 *   hI * c11R * c12R *   (Sl * hI + 4) * b2Rs4 + 0.4e1 * is * (b2L * theta - b2R) *   (Sl * hI + 3) * pow(c11R, 0.2e1) + (((-0.8e1 *   Sl *   hI * is - 0.24e2 * is) * c12R +   hI * (c2L * beta -   (2 * c2R)) *   (Sl * hI + 4)) * b1RI - 0.2e1 * c1R *   hI * (b2L * theta - b2R) *   (Sl * hI + 4)) * c11R + 0.4e1 * c1R * b1RI *   hI * c12R *   (Sl * hI + 4)) * b1RI) * c11R) * c11R * c11Ls4 - 0.2e1 * pow(b1RI, 0.2e1) * c11L *   (hI * hI) * (c11R * c22R - 0.6e1 * pow(c12R, 0.2e1)) *   (Sl * hI + 4) * pow(c11Rs4, 0.2e1) + 0.2e1 * (-0.4e1 *   hI * b1RI * c12R * c11L *   (Sl * hI + 4) * c11Rr4 +   hI * c11R * c12R * b1LI * theta *   (Sl * hI + 4) * c11Lr4 - 0.2e1 *   hI * b1RI * c12R * c11L *   (Sl * hI + 4) * c12Rs4 + 0.2e1 *   hI * c11R * b1RI * c11L *   (Sl * hI + 4) * c12Rr4 + (((0.8e1 *   Sl *   hI * is + 0.24e2 * is) * c12R +   (hI * c2R * (Sl * hI + 4))) * c11L * b1RI / 0.2e1 +   hI * c12R * c1L * b1LI * theta *   (Sl * hI + 4)) * c11R - 0.3e1 *   hI * b1RI * c1R * c12R * c11L *   (Sl * hI + 4)) *   hI * b1RI * c11R * c11Rs4 + (0.2e1 * pow(b1RI, 0.2e1) * c11L *   (hI * hI) *   (Sl * hI + 4) * pow(c11Rr4, 0.2e1) - 0.2e1 * (b1LI *   hI * c11R * theta *   (Sl * hI + 4) * c11Lr4 + (0.2e1 * is * c11L *   (Sl * hI + 3) * b1RI +   hI * c1L * b1LI * theta *   (Sl * hI + 4)) * c11R - 0.3e1 / 0.2e1 * c1R * b1RI * c11L *   hI *   (Sl * hI + 4)) *   hI * b1RI * c11Rr4 +   hI * c11R * (0.4e1 * b1LI *   hI * c12R * theta *   (Sl * hI + 4) * b1Rs4 + b1RI * (-0.4e1 *   hI * c12R * theta *   (Sl * hI + 4) * b1Ls4 + 0.4e1 * is * b1LI * theta *   (Sl * hI + 3) * c11R +   hI * (c1L * b1RI * beta - 0.2e1 * c1R * b1LI * theta) *   (Sl * hI + 4))) * c11Lr4 + 0.4e1 *   (hI * hI) * c12R * c1L * b1LI * theta * c11R *   (Sl * hI + 4) * b1Rs4 + (-0.4e1 * c1L *   (hI * hI) * c11R * c12R * theta *   (Sl * hI + 4) * b1Ls4 - 0.4e1 *   (Sl * hI + 4) *   (hI * hI) * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c1Ls4 + 0.2e1 * b1RI * c11L *   (hI * hI) * c11R * beta *   (Sl * hI + 4) * c1Lr4 - 0.2e1 * b1RI * c11L *   (hI * hI) * c11R *   (Sl * hI + 4) * c1Rr4 + 0.2e1 * b1RI * c11L *   (hI * hI) * c12R *   (Sl * hI + 4) * c1Rs4 + (  (12 * Sl * hI + 24) * c11L * b1RI + 0.4e1 * c1L * b1LI *   hI * is * theta *   (Sl * hI + 3)) * pow(c11R, 0.2e1) +   hI * ((-0.4e1 * is * c11L *   (Sl * hI + 3) * c1R + pow(c1L, 0.2e1) *   hI * beta *   (Sl * hI + 4)) * b1RI - 0.2e1 * c1L * c1R * b1LI *   hI * theta *   (Sl * hI + 4)) * c11R + pow(c1R, 0.2e1) * b1RI * c11L *   (hI * hI) *   (Sl * hI + 4)) * b1RI) * pow(c11R, 0.2e1)) * beta *   hI * b1RI * pow(b1RI, -0.2e1) * pow(c11R, -0.5e1) / 0.24e2;
a21  = -(0.2e1 *   (Sl * hI + 4) * (((-c22L * beta / 0.4e1 + c22R / 0.2e1) * b1RI + c12R * (b2L * theta - b2R)) * c11R - b1RI * pow(c12R, 0.2e1)) *   hI * b1RI * c11R * c11Ls4 -   (Sl * hI + 4) * ((b1RI * c11L * c22R / 0.2e1 + c12R * ((b2L * theta / 0.2e1 - b2R / 0.2e1) * c11L + b1LI * c12L * theta)) * c11R - 0.3e1 * b1RI * c11L * pow(c12R, 0.2e1)) *   hI * b1RI * c11Rs4 + (  (Sl * hI + 4) *   hI * b1RI * (((b2L * theta / 0.2e1 - b2R / 0.2e1) * c11L + b1LI * c12L * theta) * c11R - 0.3e1 / 0.2e1 * b1RI * c12R * c11L) * c11Rr4 - 0.2e1 *   (Sl * hI + 4) * c12R * ((b2L * theta / 0.2e1 - b2R / 0.2e1) * c11L + b1LI * c12L * theta) *   hI * c11R * b1Rs4 + (  (Sl * hI + 4) *   hI * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c11Lr4 + 0.2e1 *   hI * c12R * c12L * theta * c11R *   (Sl * hI + 4) * b1Ls4 + 0.2e1 *   (Sl * hI + 4) *   hI * c11R * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) * c12Ls4 +   hI * c12R * c11L * theta * c11R *   (Sl * hI + 4) * b2Ls4 -   hI * c11R * c12R * c11L *   (Sl * hI + 4) * b2Rs4 -   hI * c11L * beta * b1RI * c11R *   (Sl * hI + 4) * c12Lr4 +   hI * c11R * b1RI * c11L *   (Sl * hI + 4) * c12Rr4 -   hI * b1RI * c12R * c11L *   (Sl * hI + 4) * c12Rs4 - 0.2e1 * ((b2L * theta / 0.2e1 - b2R / 0.2e1) * c11L + b1LI * c12L * theta) *   (Sl * hI + 3) * is * pow(c11R, 0.2e1) + ((((0.2e1 *   Sl *   hI * is + 0.6e1 * is) * c12R -   hI * (c2L * beta - c2R) *   (Sl * hI + 4) / 0.2e1) * c11L -   hI * c12L * beta * c1L *   (Sl * hI + 4)) * b1RI +   (Sl * hI + 4) * (c1R * (b2L * theta - b2R) * c11L / 0.2e1 + b1LI * theta * (c1L * c12R + c1R * c12L)) *   hI) * c11R -   hI * b1RI * c1R * c12R * c11L *   (Sl * hI + 4)) * b1RI) * c11R) * beta *   (hI * hI) * b1RI * pow(c11R, -0.4e1) * pow(b1RI, -0.2e1) / 0.6e1;
a22  = -beta * pow(hI, 0.3e1) * (Sl * hI + 0.4e1) * ((((-c22L * beta / 0.4e1 + c22R / 0.4e1) * c11L - pow(c12L, 0.2e1) * beta / 0.2e1) * c11R - c11L * pow(c12R, 0.2e1) / 0.2e1) * b1RI + c11R * c12R * ((b2L * theta / 0.2e1 - b2R / 0.2e1) * c11L + b1LI * c12L * theta)) / b1RI * b1RI * pow(c11R, -0.3e1) / 0.3e1;
a23  = 0;
a24  = 0;
a30  = beta * (-0.2e1 * (b1LI * c12R * theta - c12L * beta * b1RI / 0.2e1) *   (Sl * hI + 4) *   hI * b1RI * c11R * c11Ls4 + (-0.2e1 * b1RI * c11R *   hI * c12R * theta *   (Sl * hI + 4) * b1Ls4 + 0.2e1 * b1LI * c11R *   hI * c12R * theta *   (Sl * hI + 4) * b1Rs4 + (b1RI * c11R *   hI * beta *   (Sl * hI + 4) * c11Lr4 - b1LI * c11R *   hI * theta *   (Sl * hI + 4) * c11Rr4 + b1LI *   hI * c12R * theta *   (Sl * hI + 4) * c11Rs4 + c11R * (c1L *   hI * beta *   (Sl * hI + 4) * b1RI - theta * (  (-2 * Sl * hI * is - 6 * is) * c11R +   (c1R * hI * (Sl * hI + 4))) * b1LI)) * b1RI) * c11L) *   (hI * hI) * b1RI * pow(c11R, -0.3e1) * pow(b1RI, -0.2e1) / 0.12e2;
a31  =   (Sl * hI + 4) *   beta *   (4 * c12L * beta * b1RI - 4 * b1LI * c12R * theta) * c11L *     pow(  hI,   3) * b1RI /   b1RI * pow(c11R, -0.2e1) / 0.24e2;
a32  = 0;
a33  = 0;
a34  = 0;
a40  =   (Sl * hI + 4) * beta * beta * pow(c11L, 0.2e1) *     pow(  hI,   3) * b1RI * pow(c11R, -0.2e1) / 0.24e2;
a41  = 0;
a42  = 0;
a43  = 0;
a44  = 0;
 
printF("     a00=%10.3e, a01=%10.3e, a02=%10.3e, a03=%10.3e, a04=%10.3e\n", a00,a01,a02,a03,a04);
printF("     a10=%10.3e, a11=%10.3e, a12=%10.3e, a13=%10.3e, a14=%10.3e\n", a10,a11,a12,a13,a14);
printF("     a20=%10.3e, a21=%10.3e, a22=%10.3e, a23=%10.3e, a24=%10.3e\n", a20,a21,a22,a23,a24);
printF("     a30=%10.3e, a31=%10.3e, a32=%10.3e, a33=%10.3e, a34=%10.3e\n", a30,a31,a32,a33,a34);
printF("     a40=%10.3e, a41=%10.3e, a42=%10.3e, a43=%10.3e, a44=%10.3e\n", a40,a41,a42,a43,a44);

Real Dcc[5][5] = {0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.,
                  0.,0.,1.,0.,0.,
                  0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.}; // initialize

Real Dx4cc[5][5]={0.,0., 1./(12.*drl),0.,0.,
                  0.,0.,-8./(12.*drl),0.,0.,
                  0.,0.,0.,0.,0.,
                  0.,0., 8./(12.*drl),0.,0.,
                  0.,0.,-1./(12.*drl),0.,0.}; 

Real Dy4cc[5][5]={0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.,
                  1./(12.*dsl),-8./(12.*dsl),0.,8./(12.*dsl),-1./(12.*dsl),
                  0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.};

Real Dxx4cc[5][5]={0.,0., -1./(12.*SQR(drl)),0.,0.,
                   0.,0., 16./(12.*SQR(drl)),0.,0.,
                   0.,0.,-30./(12.*SQR(drl)),0.,0.,
                   0.,0., 16./(12.*SQR(drl)),0.,0.,
                   0.,0., -1./(12.*SQR(drl)),0.,0.};
Real Dyy4cc[5][5]={0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.,
                  -1./(12.*SQR(dsl)),16./(12.*SQR(dsl)),-30./(12.*SQR(dsl)),16./(12.*SQR(dsl)),-1./(12.*SQR(dsl)),
                  0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.};

Real Dxxx2cc[5][5]={0.,0.,(-1./2.)/(pow(drl,3)),0.,0.,
                   0.,0.,       1./(pow(drl,3)),0.,0.,
                   0.,0.,0.,0.,0.,
                   0.,0.,      -1./(pow(drl,3)),0.,0.,
                   0.,0.,  (1./2.)/(pow(drl,3)),0.,0.};
Real Dyyy2cc[5][5]={0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.,
                  (-1./2.)/(pow(dsl,3)),1./(pow(dsl,3)),0.,-1./(pow(dsl,3)),(1./2.)/(pow(dsl,3)),
                  0.,0.,0.,0.,0.,
                  0.,0.,0.,0.,0.}; 
Real Dxxxx2cc[5][5]={0.,0., 1./(pow(drl,4)),0.,0.,
                     0.,0.,-4./(pow(drl,4)),0.,0.,
                     0.,0., 6./(pow(drl,4)),0.,0.,
                     0.,0.,-4./(pow(drl,4)),0.,0.,
                     0.,0., 1./(pow(drl,4)),0.,0.};
Real Dyyyy2cc[5][5]= {0.,0.,0.,0.,0.,
                      0.,0.,0.,0.,0.,
                      1./(pow(dsl,4)),-4./(pow(dsl,4)),6./(pow(dsl,4)) ,-4./(pow(dsl,4)),1./(pow(dsl,4)),
                      0.,0.,0.,0.,0.,
                      0.,0.,0.,0.,0.};

Real Dxy4cc[5][5]={ 1./(144.*drl*dsl), -8./(144.*drl*dsl),0.,  8./(144.*drl*dsl),-1./(144.*drl*dsl),
                   -8./(144.*drl*dsl), 64./(144.*drl*dsl),0.,-64./(144.*drl*dsl), 8./(144.*drl*dsl),
                    0.,0.,0.,0.,0.,
                    8./(144.*drl*dsl),-64./(144.*drl*dsl),0., 64./(144.*drl*dsl),-8./(144.*drl*dsl),
                   -1./(144.*drl*dsl),  8./(144.*drl*dsl),0., -8./(144.*drl*dsl), 1./(144.*drl*dsl)};

Real Dxxy4cc[5][5]={ -1./(144.*SQR(drl)*dsl),   8./(144.*SQR(drl)*dsl),0.,  -8./(144.*SQR(drl)*dsl),  1./(144.*SQR(drl)*dsl),
                     16./(144.*SQR(drl)*dsl),-128./(144.*SQR(drl)*dsl),0., 128./(144.*SQR(drl)*dsl),-16./(144.*SQR(drl)*dsl),
                    -30./(144.*SQR(drl)*dsl), 240./(144.*SQR(drl)*dsl),0.,-240./(144.*SQR(drl)*dsl), 30./(144.*SQR(drl)*dsl),
                     16./(144.*SQR(drl)*dsl),-128./(144.*SQR(drl)*dsl),0., 128./(144.*SQR(drl)*dsl),-16./(144.*SQR(drl)*dsl),
                     -1./(144.*SQR(drl)*dsl),   8./(144.*SQR(drl)*dsl),0.,  -8./(144.*SQR(drl)*dsl),  1./(144.*SQR(drl)*dsl)};

Real Dxyy4cc[5][5]={ -1./(144.*drl*SQR(dsl)),  16./(144.*drl*SQR(dsl)), -30./(144.*drl*SQR(dsl)),  16./(144.*drl*SQR(dsl)),-1./(144.*drl*SQR(dsl)),
                      8./(144.*drl*SQR(dsl)),-128./(144.*drl*SQR(dsl)), 240./(144.*drl*SQR(dsl)),-128./(144.*drl*SQR(dsl)), 8./(144.*drl*SQR(dsl)),
                      0.,0.,0.,0.,0.,
                     -8./(144.*drl*SQR(dsl)), 128./(144.*drl*SQR(dsl)),-240./(144.*drl*SQR(dsl)), 128./(144.*drl*SQR(dsl)),-8./(144.*drl*SQR(dsl)),
                      1./(144.*drl*SQR(dsl)), -16./(144.*drl*SQR(dsl)),  30./(144.*drl*SQR(dsl)), -16./(144.*drl*SQR(dsl)), 1./(144.*drl*SQR(dsl))};


Real Dxxyy4cc[5][5]={  1./(144.*SQR(drl)*SQR(dsl)), -16./(144.*SQR(drl)*SQR(dsl)),  30./(144.*SQR(drl)*SQR(dsl)), -16./(144.*SQR(drl)*SQR(dsl)),  1./(144.*SQR(drl)*SQR(dsl)),
                     -16./(144.*SQR(drl)*SQR(dsl)), 256./(144.*SQR(drl)*SQR(dsl)),-480./(144.*SQR(drl)*SQR(dsl)), 256./(144.*SQR(drl)*SQR(dsl)),-16./(144.*SQR(drl)*SQR(dsl)),
                      30./(144.*SQR(drl)*SQR(dsl)),-480./(144.*SQR(drl)*SQR(dsl)), 900./(144.*SQR(drl)*SQR(dsl)),-480./(144.*SQR(drl)*SQR(dsl)), 30./(144.*SQR(drl)*SQR(dsl)),
                     -16./(144.*SQR(drl)*SQR(dsl)), 256./(144.*SQR(drl)*SQR(dsl)),-480./(144.*SQR(drl)*SQR(dsl)), 256./(144.*SQR(drl)*SQR(dsl)),-16./(144.*SQR(drl)*SQR(dsl)),
                       1./(144.*SQR(drl)*SQR(dsl)), -16./(144.*SQR(drl)*SQR(dsl)),  30./(144.*SQR(drl)*SQR(dsl)), -16./(144.*SQR(drl)*SQR(dsl)),  1./(144.*SQR(drl)*SQR(dsl))};

Real Dxyyy2cc[5][5]={-1./(24.*drl*pow(dsl,3)),  2./(24.*drl*pow(dsl,3)),0., -2./(24.*drl*pow(dsl,3)), 1./(24.*drl*pow(dsl,3)),
                      8./(24.*drl*pow(dsl,3)),-16./(24.*drl*pow(dsl,3)),0., 16./(24.*drl*pow(dsl,3)),-8./(24.*drl*pow(dsl,3)),
                      0.,0.,0.,0.,0.,
                     -8./(24.*drl*pow(dsl,3)), 16./(24.*drl*pow(dsl,3)),0.,-16./(24.*drl*pow(dsl,3)), 8./(24.*drl*pow(dsl,3)),
                      1./(24.*drl*pow(dsl,3)), -2./(24.*drl*pow(dsl,3)),0.,  2./(24.*drl*pow(dsl,3)),-1./(24.*drl*pow(dsl,3))};

Real Dxxxy2cc[5][5]={-1./(24.*pow(drl,3)*dsl),  8./(24.*pow(drl,3)*dsl),0., -8./(24.*pow(drl,3)*dsl), 1./(24.*pow(drl,3)*dsl),
                      2./(24.*pow(drl,3)*dsl),-16./(24.*pow(drl,3)*dsl),0., 16./(24.*pow(drl,3)*dsl),-2./(24.*pow(drl,3)*dsl),
                      0.,0.,0.,0.,0.,
                     -2./(24.*pow(drl,3)*dsl), 16./(24.*pow(drl,3)*dsl),0.,-16./(24.*pow(drl,3)*dsl), 2./(24.*pow(drl,3)*dsl),
                      1./(24.*pow(drl,3)*dsl), -8./(24.*pow(drl,3)*dsl),0.,  8./(24.*pow(drl,3)*dsl),-1./(24.*pow(drl,3)*dsl)};

#define Dc(i,j) Dcc[i+shftI4][j+shftI4]
#define Dx4c(i,j) Dx4cc[i+shftI4][j+shftI4]
#define Dy4c(i,j) Dy4cc[i+shftI4][j+shftI4]
#define Dxx4c(i,j) Dxx4cc[i+shftI4][j+shftI4]
#define Dyy4c(i,j) Dyy4cc[i+shftI4][j+shftI4]
#define Dxxx2c(i,j) Dxxx2cc[i+shftI4][j+shftI4]
#define Dyyy2c(i,j) Dyyy2cc[i+shftI4][j+shftI4]
#define Dxxxx2c(i,j) Dxxxx2cc[i+shftI4][j+shftI4]
#define Dyyyy2c(i,j) Dyyyy2cc[i+shftI4][j+shftI4]
#define Dxy4c(i,j) Dxy4cc[i+shftI4][j+shftI4]
#define Dxxy4c(i,j) Dxxy4cc[i+shftI4][j+shftI4]    
#define Dxyy4c(i,j) Dxyy4cc[i+shftI4][j+shftI4]    
#define Dxxyy4c(i,j) Dxxyy4cc[i+shftI4][j+shftI4]    
#define Dxxxy2c(i,j) Dxxxy2cc[i+shftI4][j+shftI4]    
#define Dxyyy2c(i,j) Dxyyy2cc[i+shftI4][j+shftI4]        
   

if (axis==0){
    for (int i = -2; i < 3; i++) {
        for (int j = -2; j < 3; j++) {

        	
            //printF("     a00=%10.3e, a01=%10.3e, a02=%10.3e, a03=%10.3e, a04=%10.3e \n", Dc(i,j),Dy4c(i,j),Dyy4c(i,j),Dyyy2c(i,j),Dyyyy2c(i,j));
            //printF("     a10=%10.3e, a11=%10.3e, a12=%10.3e, a13=%10.3e\n", Dx4c(i,j),Dxy4c(i,j),Dxyy4c(i,j),Dxyyy2c(i,j));
            //printF("     a20=%10.3e, a21=%10.3e, a22=%10.3e\n", Dxx4c(i,j),Dxxy4c(i,j),Dxxyy4c(i,j));
            //printF("     a30=%10.3e, a31=%10.3e \n", Dxxx2c(i,j),Dxxxy2c(i,j));
            //printF("     a40=%10.3e \n", Dxxxx2c(i,j));
            

            coefA(i,j) = Dc(i,j)*a00+Dx4c(i,j)*a10+Dxx4c(i,j)*a20+Dxxx2c(i,j)*a30+Dxxxx2c(i,j)*a40\
                                    +Dy4c(i,j)*a01+Dyy4c(i,j)*a02+Dyyy2c(i,j)*a03+Dyyyy2c(i,j)*a04\
                                    +Dxxy4c(i,j)*a21+Dxyy4c(i,j)*a12\
                                    +Dxy4c(i,j)*a11+Dxxyy4c(i,j)*a22\
                                    +Dxxxy2c(i,j)*a31+Dxyyy2c(i,j)*a13;
        }
    } 
}
 else{
    for (int i = -2; i < 3; i++) {
        for (int j = -2; j < 3; j++) {
            coefA(j,i) = Dc(j,i)*a00+Dy4c(j,i)*a10+Dyy4c(j,i)*a20+Dyyy2c(j,i)*a30+Dyyyy2c(j,i)*a40\
                                    +Dx4c(j,i)*a01+Dxx4c(j,i)*a02+Dxxx2c(j,i)*a03+Dxxxx2c(j,i)*a04\
                                    +Dxyy4c(j,i)*a21+Dxxy4c(j,i)*a12\
                                    +Dxy4c(j,i)*a11+Dxxyy4c(j,i)*a22\
                                    +Dxyyy2c(j,i)*a31+Dxxxy2c(j,i)*a13;
        }
    } 

 }

