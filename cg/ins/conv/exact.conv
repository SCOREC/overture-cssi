#
# Measure convergence rates for cgins with exact solutions.
#       - Hagen-Poiseuille pipe flow, 
#       - Couette flow (flow between rotating cylinders), 
#       - Taylor-Green vortex
#
# --------options: 
#   -model=[ins|boussinesq|tp|vp]  : 
#   -tz : poly or trig 
#   -bcn : d=dirichlet, 
#   -en : error norm: max, l1, l2
#   -ng : number of grids to use (i.e. how many times is the grid refined)
#   -ngStart : start with this grid (default is 1, set to 2 to skip first grid)
#   -cg : square, sis, cic, sic
#   -alwaysCompute=1 : force each case to be re-run even if the check file exists
#   -conv= conv directory (and directory for output). .. So you can run the script outside the conv dir, e.g. for parallel
# 
# To run the convergence tests type: 
# 
# === Taylor Green vortex ===
#   NOTE: solution decays rapidly for larger nu, so do not take =tf too big.
#  -- TGV - PC: 
#  conv.p exact.conv -option=tg -ts=pc -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=squarep -ng=4
#    Convergence rates: c0=1.98 c1=1.84 c2=1.84 c3=1.84 c4=3.93  [ tf=.5 
#  conv.p exact.conv -option=tg -ts=pc -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=squarep -order=4 -ng=3
#
#  -- TGV - AFS: 
#  conv.p exact.conv -option=tg -ts=afs -nu=.05 -tf=.2 -tp=.1 -psolver=yale -dtMax=1.e-3 -cg=squarep -ng=3
#  conv.p exact.conv -option=tg -ts=afs -nu=.05 -tf=.2 -tp=.2 -psolver=yale -dtMax=1.e-4 -cg=squarep -order=4 -ng=3
#
#  -- Taylor-Green 3D
#  conv.p exact.conv -option=tg -ts=afs -nu=.05 -tf=.2 -tp=.2 -psolver=yale -dtMax=5.e-4 -cg=boxp -psolver=best -saveVectorErrors=1 -order=4 -ng=3
# 
# === Couette flow (annulus) ONE STATIC GRID ===
#
#  -- Couette, annulus - PC
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.5 -tp=.1 -psolver=yale -cg=annulus -ng=3
#    Convergence rates: c0=2.01 c1=2.32 c2=2.30 c3=2.32 c4=3.52 [ tf=1
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.5 -tp=.1 -psolver=yale -cg=annulus -order=4 -ng=3
#
#  -- Couette, annulus - AFS
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.5 -tp=.1 -cg=annulus -dtMax=1.e-2 -ng=3
#    Convergence rates: c0=1.94 c1=1.87 c2=1.88 c3=1.88 c4=1.91 [ tf=1
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.5 -tp=.1 -cg=annulus -order=4 -dtMax=1.e-3 -saveVectorErrors=1 -ng=3
#
#   +++ TIME ACCURACY: (dt's are set below) NOTE - solution is STEADY STATE so time convergence is a bit funny
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.2 -tp=.2 -cg=annulus4 -order=4 -aftol=1.e-8 -dtMax=1.e-3 -cfl=4. -ng=4
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.2 -tp=.2 -cg=annulus8 -order=4 -aftol=1.e-12 -dtMax=1.e-3 -cfl=4. -ng=4
#
# === Couette flow (annulus) TWO GRIDS, ONE MOVING===
#
#  -- Couette, annulus - PC
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.5 -tp=.1 -psolver=yale -move=rotate -cg=splitAnnulus -ng=3
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.5 -tp=.1 -psolver=yale -move=rotate -cg=splitAnnulus -order=4 -ng=3
#
#  -- Couette, annulus - AFS
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.5 -tp=.1 -cg=splitAnnulus -move=rotate -dtMax=.5e-2 -ng=3
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.5 -tp=.1 -cg=splitAnnulus -move=rotate -order=4 -dtMax=1.e-3  -saveVectorErrors=1 -ng=3 -alwaysCompute=0
#
#   +++ TIME ACCURACY: (dt's are set below)
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.2 -tp=.2 -cg=splitAnnulus4 -move=rotate -order=4 -aftol=1.e-8 -dtMax=1.e-3 -cfl=4. -ng=4
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.2 -tp=.2 -cg=splitAnnulus8 -move=rotate -order=4 -aftol=1.e-8 -dtMax=1.e-3 -cfl=4.  -saveVectorErrors=1 -ng=4
# 
# === Couette flow (cylinder 3D ) ===
#
#  -- Couette, cylinder - PC
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.1 -tp=.1 -psolver=best -cg=cylinderp -ng=2
#    Convergence rates: c0=2.44 c1=2.56 c2=2.55 c3=2.35 c4=2.35 c5=1.74
#  conv.p exact.conv -option=rotating -ts=pc -nu=.05 -tf=.05 -tp=.05 -psolver=best -cg=cylinderp -order=4 -ng=3
#
#  -- Couette, cylinder - AFS
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.05 -tp=.05 -psolver=best -cg=cylinderp -dtMax=1.e-2 -ng=3
#   Convergence rates: c0=2.14 c1=2.21 c2=2.21 c3= nan c4=2.21 c5=1.66
#  conv.p exact.conv -option=rotating -ts=afs -nu=.05 -tf=.05 -tp=.05 -psolver=best -cg=cylinderp -order=4 -dtMax=1.e-3 -ng=3
#     Convergence rates: c0=3.89 c1=3.75 c2=3.75 c3= nan c4=3.75 c5=2.36 [-ng=2 
#
# === Couette flow (2D channel) ===
#  conv.p exact.conv -option=pipe -ts=pc -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=channel -ng=3
#  conv.p exact.conv -option=pipe -ts=pc -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=channel -order=4 -ng=3
#
#  conv.p exact.conv -option=pipe -ts=afs -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=channel -dtMax=1.e-2 -ng=3
#  conv.p exact.conv -option=pipe -ts=afs -nu=.05 -tf=.2 -tp=.1 -psolver=yale -cg=channel -order=4 -dtMax=1.e-3 -ng=3
#
# === Hagen-Poiseuille flow (3D pipe) ===
#  conv.p exact.conv -option=pipe -ts=pc -nu=.1 -tf=.02 -tp=.02 -psolver=best -cg=pipe -ng=3
#    Convergence rates: c0= nan c1=2.03 c2= nan c3= nan c4=2.03 c5= nan
#  conv.p exact.conv -option=pipe -ts=pc -nu=.1 -tf=.02 -tp=.02 -psolver=best -cg=pipe -order=4 -ng=3
#
#  conv.p exact.conv -option=pipe -ts=afs -nu=.1 -tf=.02 -tp=.02 -psolver=best -cg=pipe -dtMax=.5e-2 -ng=2
#  conv.p exact.conv -option=pipe -ts=afs -nu=.1 -tf=.02 -tp=.02 -psolver=best -cg=pipe -order=4 -dtMax=.25e-3 -ng=2
#
# ==== beam piston: FSI problem - beam between two fluid domains: 
#  conv.p exact.conv -option=beamPiston -ts=pc -nu=.05 -tf=.1 -tp=.1 -psolver=yale -cg=flexiblePartition -ng=3
# ---------------------
# Set default parameters: 
$option="tg"; 
$model="ins"; $dtMax=.1; $move=0; $kp=1.; 
$tz="trig";
$bcn="#"; $bc1="#"; $bc2="#"; $bc3="#"; $bc4="#"; $bc5="#"; $bc6="#"; 
$en="max"; $ngStart=1; $ng=4; $tf=.5;  $tp=.1; $degreeX=2; $degreeT=2; $fx=1.; $order=2; $nd=2; $cfl=.9; 
$numberOfParallelGhost=2; $amr=0; $nu=.05; $debug=0; $insDebug=1; $aftol=1.e-10; $axialAxis=2; 
$cdv=1.; $solver="yale";  $rtol=1.e-4; $atol=1.e-6; $psolver="yale"; $rtolp=1.e-10; $atolp=1.e-10;
$useNewImp=0; $iv="viscous"; $nis=4; $cfls=1.; $pGrad=0.; $pInflow=1.; $amp1=0.; $nFreq1=3; $orderInTime=-1; $length=2.; $rInner=.5; $omegaInner=0.; $omegaOuter=1.; $gridToMove="";
$omega=0.; $amp2=0.; $nFreq2=1;  # for pipe flow, angular component
$bodyDensity=1.; $dropName="innerDisk";
$CGBUILDPREFIX=$ENV{CGBUILDPREFIX};
$cginsCmd = "$CGBUILDPREFIX/ins/bin/cgins";  # command for cgins 
$cmdDir="$ENV{CG}/ins/cmd"; 
$cmdFile="exact.cmd"; $extraOptions=""; 
$cg = "square"; $alwaysCompute=1; $ts="pc"; 
$showAllComponents=1;  # set to 1 to include all components in the table.
$saveVectorErrors=0; # if 1 then save "vector" errors only
#
$rhoBeam=10.; $E=1.; $tension=10.; $Kt=0.; 
$addedDampingCoeff=1.; 
#
GetOptions( "option=s"=>\$option,"model=s"=>\$model,"cg=s"=>\$cg,"en=s"=>\$en,"mode=i"=>\$mode,"ng=i"=>\$ng,\
            "bcn=s"=>\$bcn,"ts=s"=>\$ts,"tf=f"=>\$tf,"tp=f"=>\$tp,"nu=f"=>\$nu,"tz=s"=>\$tz,"fx=f"=>\$fx,\
            "order=i"=>\$order,"alwaysCompute=i"=>\$alwaysCompute,"useNewImp=i"=>\$useNewImp,\
            "showAllComponents=i"=>\$showAllComponents,"solver=s"=>\$solver,"psolver=s"=>\$psolver,"iv=s"=>\$iv,\
            "cfl=f"=>\$cfl,"cfls=f"=>\$cfls,"cdv=f"=>\$cdv,"degreeX=f"=>\$degreeX,"degreeT=f"=>\$degreeT,"debug=i"=>\$debug,\
            "rtol=f"=>\$rtol,"atol=f"=>\$atol,"rtolp=f"=>\$rtolp,"atolp=f"=>\$atolp,"dtMax=f"=>\$dtMax,\
            "bc1=s"=>\$bc1,"bc2=s"=>\$bc2,"bc3=s"=>\$bc3,"bc4=s"=>\$bc4,"bc5=s"=>\$bc5,"bc6=s"=>\$bc6,\
            "cginsCmd=s"=>\$cginsCmd,"numberOfParallelGhost=i"=>\$numberOfParallelGhost,"ngStart=i"=>\$ngStart,\
            "aftol=f"=>\$aftol,"move=s"=>\$move,"saveVectorErrors=i"=>\$saveVectorErrors,"length=f"=>\$length,\
            "axialAxis=i"=>\$axialAxis,"kp=f"=>\$kp,"rhoBeam=f"=>\$rhoBeam,"E=f"=>\$E,"tension=f"=>\$tension,\
            "Kt=f"=>\$Kt,"cmdFile=s"=>\$cmdFile,"nis=i"=>\$nis,"bodyDensity=f"=>\$bodyDensity,"orderInTime=i"=>\$orderInTime,\
            "addedDampingCoeff=f"=>\$addedDampingCoeff,"dropName=s"=>\$dropName,"pGrad=f"=>\$pGrad,"pInflow=f"=>\$pInflow,\
            "amp1=f"=>\$amp1,"nFreq1=f"=>\$nFreq1,"rInner=f"=>\$rInner,\
            "omega=f"=>\$omega,"amp2=f"=>\$amp2,"nFreq2r=f"=>\$nFreq2,\
            "omegaInner=f"=>\$omegaInner,"omegaOuter=f"=>\$omegaOuter,"gridToMove=s"=>\$gridToMove );
#
printf("option=[$option]\n");
# 
# Name of the check file created by cgins:
$check="ins.check";
#
if( $cg eq "cylinder" || $cg eq "cylinderp"  || $cg =~ "pipe" || $cg eq "pipep" || $cg eq "shortPipep" || $cg eq "boxp" ){ $nd=3; } # 3D 
#
if( $option eq "beamPiston" ){ \
  $cmdFile = "../runs/flexibleChannel/flexiblePartition.cmd";\
  $extraName = "Rhos$rhoBeam";  $extraName =~ s/\./p/g; \
  $extraOptions ="-rhoBeam=$rhoBeam -E=$E -tension=$tension -thickness=.1 -K0=10 -p0=1 -addedMass=1 -fluidOnTwoSides=1  -ampProjectVelocity=1 -projectNormalComponent=1 -nis=$nis -option=beamPiston -sideBC=slipWall -cfls=$cfls";\
 }
if( $option eq "steadyBeam" ){ \
  $cmdFile = "../runs/flexibleChannel/flexiblePartition.cmd";\ 
  $extraName = "Rhos$rhoBeam"; $extraName =~ s/\./p/g; \
  $extraOptions ="-rhoBeam=$rhoBeam -E=$E -tension=$tension -thickness=.1 -Kt=$Kt -p0=1 -addedMass=1 -fluidOnTwoSides=1  -ampProjectVelocity=1 -projectNormalComponent=1 -nis=$nis -sideBC=slipWall -cfls=$cfls";\
 }
# rigid body piston to test added mass algorithm
if( $option eq "rigidBodyPiston" ){ \
  $cmdFile = "../runs/piston/piston.cmd";\
  $rigidBodyCheckFile = "piston.check";\
  $extraName = "Bd$bodyDensity"; $extraName =~ s/\./p/g; \
  $extraOptions ="-bodyDensity=$bodyDensity -inertia=.01 -relaxRigidBody=0 -numberOfCorrections=1 -omega=.2 -rtolc=1.e-3 -psolver=yale -addedMass=1  -addedDamping=1 -addedDampingCoeff=1. -scaleAddedDampingWithDt=1 -nu=.01 -useProvidedAcceleration=1 -gravity=0.";\
 }
# rigid body shear to test added-damping
if( $option eq "shearBlock" ){ \
  $cmdFile = "../runs/piston/slider.cmd";\
  $rigidBodyCheckFile = "shearBlock.check";\
  $extraName = "Bd$bodyDensity"; $extraName =~ s/\./p/g; \
  $extraOptions ="-bodyDensity=$bodyDensity  -nu=$nu -ts=im -dtMax=.025 -option=shearBlock -amp=1 -relaxRigidBody=0 -numberOfCorrections=2 -addedDampingProjectVelocity=1 -omega=.2 -rtolc=1.e-3 -psolver=yale -addedMass=1 -addedDamping=1 -addedDampingCoeff=$addedDampingCoeff -scaleAddedDampingWithDt=1 -inertia=1e100 -useProvidedAcceleration=1 -gravity=0. ";\
 }
# rotating rigid body disk in a disk
if( $option eq "rotatingDisk" ){ \
  $cmdFile = "../runs/movingDiskInDisk/movingDiskInDisk.cmd";\
  $rigidBodyCheckFile = "rigidDisk.check";\
  $extraName = "Bd$bodyDensity"; $extraName =~ s/\./p/g; \
  $solver="best"; $rtol=1.e-9; $atol=1.e-15; $psolver="best"; $rtolp=1.e-9; $atolp=1.e-15; \
  $extraOptions ="-density=$bodyDensity -nu=$nu -ts=im  -dropName=$dropName -radius=1. -gravity=0. -amp=.1 -bodyForce=none -option=rotatingDisk -project=0 -numberOfCorrections=2 -addedDampingProjectVelocity=1 -omega=.2 -addedMass=1 -addedDamping=1 -addedDampingCoeff=$addedDampingCoeff -scaleAddedDampingWithDt=1 -useProvidedAcceleration=1 -useTP=0 -debug=1 -ad2=0";\
 }
# translating rigid body disk in a disk -- note solution is very small
if( $option eq "translatingDisk" ){ \
  $cmdFile = "../runs/movingDiskInDisk/movingDiskInDisk.cmd";\
  $rigidBodyCheckFile = "rigidDisk.check";\
  $extraName = "Bd$bodyDensity"; $extraName =~ s/\./p/g; \
  $solver="best"; $rtol=1.e-9; $atol=1.e-15; $psolver="best"; $rtolp=1.e-9; $atolp=1.e-15; \
  $extraOptions ="-density=$bodyDensity -nu=$nu -ts=im  -radius=1. -gravity=0. -amp=1.e-7 -bodyForce=none -option=translatingDisk -project=0 -numberOfCorrections=2 -addedDampingProjectVelocity=1 -omega=.2 -addedMass=1 -addedDamping=1 -addedDampingCoeff=$addedDampingCoeff -scaleAddedDampingWithDt=1 -useProvidedAcceleration=1 -useTP=0 -debug=1 -ad2=0";\
 }
#
if( $option eq "pipe" || $option eq "rotating" ){ \
  $extraOptions ="-pGrad=$pGrad -pInflow=$pInflow -amp1=$amp1 -nFreq1=$nFreq1 -orderInTime=$orderInTime -length=$length -rInner=$rInner -omega=$omega -omegaInner=$omegaInner -omegaOuter=$omegaOuter -amp2=$amp2 -nFreq2=$nFreq2 -gridToMove=$gridToMove"; \
  if( $amp1 ne 0 ){ $extraName .= ".timeEig"; } \
}
if( $option eq "tg" ){ $extraOptions ="-orderInTime=$orderInTime"; }
printf("exact.conv: cmdFile=[$cmdFile]\n");
printf("exact.conv: rigidBodyCheckFile=[$rigidBodyCheckFile]\n");
#
if( $orderInTime eq "4" ){ $tsOrder="4"; }else{ $tsOrder=2; }
$caseName="exact.$option$extraName.$ts.$cg.$model.order$tsOrder$order"; 
if( $move ne 0 ){ $caseName .= ".$move"; }
if( $saveVectorErrors eq 1 ){ $caseName.= ".vector"; }
if( $axialAxis ne 2 ){ $caseName.= ".axial$axialAxis"; }
$name="$caseName"; 
#
# --- define the table heading and caption --
# 
$numberOfComponents=$nd+1 +1+1;
if( $saveVectorErrors eq 0 ){\
  if( $nd eq 2 ){\
    $title ="grid  \& N \& \$p\$ \&  \$v_1\$ \& \$v_2\$ \& \$\\uv\$ \& \$\\grad\\cdot\\uv\$  ";\
    @componentName = ( "p", "u", "v", "uv" , "div" );\
  }else{\
    $title ="grid  \& N \&  \$p\$ \&  \$v_1\$ \& \$v_2\$ \& \$v_3\$ \& \$\\uv\$ \& \$\\grad\\cdot\\uv\$ ";\
    @componentName = ( "p", "u", "v", "w" , "uv", "div" );\
  }\
}else{\
 if( $nd eq 2 ){\
   $title ="grid  \& N \& \$p\$ \&  \$\\vv\$ \& \$\\grad\\cdot\\uv\$  ";\
   $ignoreComponent[1]=1; $ignoreComponent[2]=1;\
   @componentName = ( "p", "uv" , "div" );\
 }else{\
   $title ="grid  \& N \&  \$p\$ \& \$\\vv\$ \& \$\\grad\\cdot\\uv\$ ";\
   $ignoreComponent[1]=1; $ignoreComponent[2]=1;  $ignoreComponent[3]=1; \
   @componentName = ( "p", "uv", "div" );\
 }\
}
#  ----- For the beam-piston we also compute convergence rates for the Beam variables, eta and eta_t ----
if( $option eq "beamPiston" ){ \
  $numberOfDomains=2; \
  $numberOfComponents=$numberOfComponents+2; \
if( $saveVectorErrors eq 0 ){\
  if( $nd eq 2 ){\
    $title ="grid  \& N \& \$p\$ \&  \$v_1\$ \& \$v_2\$ \& \$\\uv\$ \& \$\\grad\\cdot\\uv\$ \& \$\\eta\$ \& \$\\eta_t\$ ";\
    @componentName = ( "p", "u", "v", "uv" , "div", "eta", "etat"  );\
  }else{\
    $title ="grid  \& N \&  \$p\$ \&  \$v_1\$ \& \$v_2\$ \& \$v_3\$ \& \$\\uv\$ \& \$\\grad\\cdot\\uv\$ \& \$\\eta\$ \& \$\\eta_t\$ ";\
    @componentName = ( "p", "u", "v", "w" , "uv", "div", "eta", "etat"  );\
  }\
}else{\
 if( $nd eq 2 ){\
   $title ="grid \&     N \&    \$p\$   \& \$\\vv\$ \& \$\\grad\\cdot\\uv\$ \&      \$\\eta\$ \&    \$\\eta_t\$ ";\
   $ignoreComponent[1]=1; $ignoreComponent[2]=1;\
   @componentName = ( "p", "uv" , "div" , "eta", "etat" );\
 }else{\
   $title ="grid  \& N \&  \$p\$ \& \$\\vv\$ \& \$\\grad\\cdot\\uv\$ \& \$\\eta\$  \& \$\\eta_t\$ ";\
   $ignoreComponent[1]=1; $ignoreComponent[2]=1;  $ignoreComponent[3]=1; \
   @componentName = ( "p", "uv", "div", "eta", "etat"  );\
 }\
}\
}


# 
$caption= "\\caption\{\\captionFont Cgins, $option, $model, $name, ts=$ts, \$t=$tf\$, \$\\nu=$nu\$, dtMax=$dtMax, aftol=$aftol, axialAxis=$axialAxis, kp=$kp, $clabel, cfl=$cfl, $extraOptions, $date\}\\label\{table:$name}"; 
printf("caption=[$caption]\n");
$outputFile="$name" . ".ConvTable.tex"; 
# 
$options = "-option=$option -model=$model -nu=$nu -tf=$tf -tp=$tp -cfl=$cfl -ts=$ts -iv=$iv -tz=$tz -solver=$solver -rtol=$rtol -atol=$atol -psolver=$psolver -rtolp=$rtolp -atolp=$atolp -useNewImp=$useNewImp -cdv=$cdv -bcn=$bcn -bc1=$bc1 -bc2=$bc2 -bc3=$bc3 -bc4=$bc4 -bc5=$bc5 -bc6=$bc6 -dtMax=$dtMax -nd=$nd -aftol=$aftol -move=$move -kp=$kp -axialAxis=$axialAxis -debug=$insDebug $extraOptions -go=go"; 
# 
if( $cg eq "squarep" ){\
$grid1="sq10p";  $gName1 = "square10p.order$order";\
$grid2="sq20p";  $gName2 = "square20p.order$order";\
$grid3="sq40p";  $gName3 = "square40p.order$order";\
$grid4="sq80p";  $gName4 = "square80p.order$order";\
$grid5="sq160p"; $gName5 = "square160p.order$order";\
$grid6="sq320p"; $gName6 = "square320p.order$order";}
#
if( $cg eq "square" ){\
$grid1="sq20";  $gName1 = "square20.order$order";\
$grid2="sq40";  $gName2 = "square40.order$order";\
$grid3="sq80";  $gName3 = "square80.order$order";\
$grid4="sq160"; $gName4 = "square160.order$order";}
#
# 
if( $cg eq "boxp" ){\
$grid1="box1p"; $gName1 = "box1p.order$order";\
$grid2="box2p"; $gName2 = "box2p.order$order";\
$grid3="box4p"; $gName3 = "box4p.order$order";\
$grid4="box8p"; $gName4 = "box8p.order$order";}
# 
if( $cg eq "annulus" ){\
$grid1="annulus2";  $gName1 = "annulus2.order$order";\
$grid2="annulus4";  $gName2 = "annulus4.order$order";\
$grid3="annulus8";  $gName3 = "annulus8.order$order";\
$grid4="annulus16"; $gName4 = "annulus16.order$order";\
$grid5="annulus32"; $gName5 = "annulus32.order$order";}
#
if( $cg eq "splitAnnulus" ){\
$grid1="splitAnnulus2";  $gName1 = "splitAnnulusGride2.order$order";\
$grid2="splitAnnulus4";  $gName2 = "splitAnnulusGride4.order$order";\
$grid3="splitAnnulus8";  $gName3 = "splitAnnulusGride8.order$order";\
$grid4="splitAnnulus16"; $gName4 = "splitAnnulusGride16.order$order";\
$grid5="splitAnnulus32"; $gName5 = "splitAnnulusGride32.order$order";}
# -- TIME CONVERGENCE --
if( $cg eq "annulus4" ){\
$grid1="annulus4"; $gName1 = "annulus4.order$order -dtMax=4.e-2";\
$grid2="annulus4"; $gName2 = "annulus4.order$order -dtMax=2e-2";\
$grid3="annulus4"; $gName3 = "annulus4.order$order -dtMax=1e-2";\
$grid4="annulus4"; $gName4 = "annulus4.order$order -dtMax=.5e-2";\
$grid5="annulus4"; $gName5 = "annulus4.order$order -dtMax=.25e-2";}
if( $cg eq "annulus8" ){\
$grid1="annulus8"; $gName1 = "annulus8.order$order -dtMax=2.e-2";\
$grid2="annulus8"; $gName2 = "annulus8.order$order -dtMax=1.e-2";\
$grid3="annulus8"; $gName3 = "annulus8.order$order -dtMax=.5e-2";\
$grid4="annulus8"; $gName4 = "annulus8.order$order -dtMax=.25e-2";\
$grid5="annulus8"; $gName5 = "annulus8.order$order -dtMax=.125e-2";}
# -- TIME CONVERGENCE - MOVING GRID --
if( $cg eq "splitAnnulus4" ){\
$grid1="splitAnnulus4"; $gName1 = "splitAnnulusGride4.order$order -dtMax=2.e-2";\
$grid2="splitAnnulus4"; $gName2 = "splitAnnulusGride4.order$order -dtMax=1e-2";\
$grid3="splitAnnulus4"; $gName3 = "splitAnnulusGride4.order$order -dtMax=.5e-2";\
$grid4="splitAnnulus4"; $gName4 = "splitAnnulusGride4.order$order -dtMax=.25e-2";\
$grid5="splitAnnulus4"; $gName5 = "splitAnnulusGride4.order$order -dtMax=.125e-2";}
# -- TIME CONVERGENCE - MOVING GRID  --
if( $cg eq "splitAnnulus8" ){\
$grid1="splitAnnulus8"; $gName1 = "splitAnnulusGride8.order$order -dtMax=1.e-2";\
$grid2="splitAnnulus8"; $gName2 = "splitAnnulusGride8.order$order -dtMax=.5e-2";\
$grid3="splitAnnulus8"; $gName3 = "splitAnnulusGride8.order$order -dtMax=.25e-2";\
$grid4="splitAnnulus8"; $gName4 = "splitAnnulusGride8.order$order -dtMax=.125e-2";}
#
if( $cg eq "cylinder" ){\
$grid1="cylinder1"; $gName1 = "cylinder1.order$order";\
$grid2="cylinder2"; $gName2 = "cylinder2.order$order";\
$grid3="cylinder4"; $gName3 = "cylinder4.order$order";\
$grid4="cylinder8"; $gName4 = "cylinder8.order$order";}
#
# periodic cylinder: 
if( $cg eq "cylinderp" ){\
$grid1="cylinder1"; $gName1 = "cylinder1.order$order" ."p";\
$grid2="cylinder2"; $gName2 = "cylinder2.order$order" ."p";\
$grid3="cylinder4"; $gName3 = "cylinder4.order$order" ."p";\
$grid4="cylinder8"; $gName4 = "cylinder8.order$order" ."p";}
#
if( $cg eq "channel" ){\
$grid1="channel1";  $gName1 = "channel1.order$order";\
$grid2="channel2";  $gName2 = "channel2.order$order";\
$grid3="channel4";  $gName3 = "channel4.order$order";\
$grid4="channel8";  $gName4 = "channel8.order$order";\
$grid5="channel16"; $gName5 = "channel8.order$order";}
#
# -- periodic channel
if( $cg eq "channelGridp" ){\
$grid1="channelGridp1";  $gName1 = "channelGridp1.order$order";\
$grid2="channelGridp2";  $gName2 = "channelGridp2.order$order";\
$grid3="channelGridp4";  $gName3 = "channelGridp4.order$order";\
$grid4="channelGridp8";  $gName4 = "channelGridp8.order$order";\
$grid5="channelGridp16"; $gName5 = "channelGridp16.order$order";}
#
if( $cg eq "pipe" ){\
$grid1="pipe2";  $gName1 = "pipeFixede2.order$order";\
$grid2="pipe4";  $gName2 = "pipeFixede4.order$order";\
$grid3="pipe8";  $gName3 = "pipeFixede8.order$order";\
$grid4="pipe16"; $gName4 = "pipeFixede16.order$order";}
#
# -- periodic pipe --
if( $cg eq "pipep" ){\
$grid1="pipep2";  $gName1 = "pipepFixede2.order$order";\
$grid2="pipep4";  $gName2 = "pipepFixede4.order$order";\
$grid3="pipep8";  $gName3 = "pipepFixede8.order$order";\
$grid4="pipep16"; $gName4 = "pipepFixede16.order$order";}
#
# -- short periodic pipe --
if( $cg eq "shortPipep" ){\
$grid1="shortPipep1";  $gName1 = "shortPipepFixede1.order$order";\
$grid2="shortPipep2";  $gName2 = "shortPipepFixede2.order$order";\
$grid3="shortPipep4";  $gName3 = "shortPipepFixede4.order$order";\
$grid4="shortPipep8";  $gName4 = "shortPipepFixede8.order$order";\
$grid5="shortPipep16"; $gName5 = "shortPipepFixede16.order$order";}
#
# -- grid for FSI problem - beam between two fluid domains: 
if( $cg eq "flexiblePartition" ){\
$grid1="flexiblePartition1";  $gName1 = "flexiblePartitionGride1.order$order"; $numElem1=20; \
$grid2="flexiblePartition2";  $gName2 = "flexiblePartitionGride2.order$order"; $numElem2=40; \
$grid3="flexiblePartition4";  $gName3 = "flexiblePartitionGride4.order$order"; $numElem3=80;\
$grid4="flexiblePartition8";  $gName4 = "flexiblePartitionGride8.order$order"; $numElem4=160;}
#
# -- piston problem
if( $cg eq "plug" ){\
$grid1="plug1"; $dtm=$dtMax;      $gName1 = "plug1 -dtMax=$dtm";\
$grid2="plug2"; $dtm=$dtMax/2.;   $gName2 = "plug2 -dtMax=$dtm";\
$grid3="plug4"; $dtm=$dtMax/4.;   $gName3 = "plug4 -dtMax=$dtm";\
$grid4="plug8"; $dtm=$dtMax/8.;   $gName4 = "plug8 -dtMax=$dtm";\
$grid5="plug16";$dtm=$dtMax/16.;  $gName5="plug16 -dtMax=$dtm";\
$grid6="plug32";$dtm=$dtMax/32.;  $gName6="plug32 -dtMax=$dtm";}
# -- sliding block problem
if( $cg eq "shearBlock" ){\
$grid1="shearBlock1"; $dtm=$dtMax;      $gName1 = "shearBlockGrid1.order$order -dtMax=$dtm";\
$grid2="shearBlock2"; $dtm=$dtMax/2.;   $gName2 = "shearBlockGrid2.order$order -dtMax=$dtm";\
$grid3="shearBlock4"; $dtm=$dtMax/4.;   $gName3 = "shearBlockGrid4.order$order -dtMax=$dtm";\
$grid4="shearBlock8"; $dtm=$dtMax/8.;   $gName4 = "shearBlockGrid8.order$order -dtMax=$dtm";\
$grid5="shearBlock16";$dtm=$dtMax/16.;  $gName5="shearBlockGrid16.order$order -dtMax=$dtm";\
$grid6="shearBlock32";$dtm=$dtMax/32.;  $gName6="shearBlockGrid32.order$order -dtMax=$dtm";}
#
# --disk in a disk for rotating disk FSI problem
if( $cg eq "diskInDisk" ){\
$grid1="diskInDisk1";  $dtm=$dtMax;     $gName1 = "diskInDiskGridFixede1.order$order  -dtMax=$dtm";\
$grid2="diskInDisk2";  $dtm=$dtMax/2.;  $gName2 = "diskInDiskGridFixede2.order$order  -dtMax=$dtm";\
$grid3="diskInDisk4";  $dtm=$dtMax/4.;  $gName3 = "diskInDiskGridFixede4.order$order  -dtMax=$dtm";\
$grid4="diskInDisk8";  $dtm=$dtMax/8.;  $gName4 = "diskInDiskGridFixede8.order$order  -dtMax=$dtm";\
$grid5="diskInDisk16"; $dtm=$dtMax/16.; $gName5 = "diskInDiskGridFixede16.order$order -dtMax=$dtm";\
$grid6="diskInDisk32"; $dtm=$dtMax/32.; $gName6 = "diskInDiskGridFixede32.order$order -dtMax=$dtm";}
#
# --disk in a disk (2 annular grids, no background) for rotating disk FSI problem
if( $cg eq "diskInDiskHalf" ){\
$grid1="diskInDiskHalf1";  $dtm=$dtMax;     $gName1 = "diskInDiskGridHalfe1.order$order  -dtMax=$dtm";\
$grid2="diskInDiskHalf2";  $dtm=$dtMax/2.;  $gName2 = "diskInDiskGridHalfe2.order$order  -dtMax=$dtm";\
$grid3="diskInDiskHalf4";  $dtm=$dtMax/4.;  $gName3 = "diskInDiskGridHalfe4.order$order  -dtMax=$dtm";\
$grid4="diskInDiskHalf8";  $dtm=$dtMax/8.;  $gName4 = "diskInDiskGridHalfe8.order$order  -dtMax=$dtm";\
$grid5="diskInDiskHalf16"; $dtm=$dtMax/16.; $gName5 = "diskInDiskGridHalfe16.order$order -dtMax=$dtm";}
#
# --single annulus grid for rotating disk FSI problem
if( $cg eq "annulusGrid" ){\
$grid1="annulusGrid1"; $dtm=$dtMax;    $gName1 = "annulusGrid1.order$order -dtMax=$dtm";\
$grid2="annulusGrid2"; $dtm=$dtMax/2.; $gName2 = "annulusGrid2.order$order -dtMax=$dtm";\
$grid3="annulusGrid4"; $dtm=$dtMax/4.; $gName3 = "annulusGrid4.order$order -dtMax=$dtm";\
$grid4="annulusGrid8"; $dtm=$dtMax/8.; $gName4 = "annulusGrid8.order$order -dtMax=$dtm";\
$grid5="annulusGrid16"; $dtm=$dtMax/16.; $gName5 = "annulusGrid16.order$order -dtMax=$dtm";}
#
if( $cg eq "sic" ){\
$grid1="sic2";  $gName1 = "sice2.order$order";\
$grid2="sic4";  $gName2 = "sice4.order$order";\
$grid3="sic8";  $gName3 = "sice8.order$order";\
$grid4="sic16"; $gName4 = "sice16.order$order";}
#
# -- for iterative solvers  we scale the tolerances for finer grids
$special[1]="-tolFactor=1."; 
$special[2]="-tolFactor=1e-2"; 
$special[3]="-tolFactor=1e-4"; 
$special[4]="-tolFactor=1e-6"; 
$special[5]="-tolFactor=1e-8"; 
$special[6]="-tolFactor=1e-10"; 
# 
if( $ngStart eq "1" ){ \
               $grid=$grid1; $res=1;  $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem1 -g=$gName1 $special[1] $options"; }
               $grid=$grid2; $res=2;  $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem2 -g=$gName2 $special[2] $options";
if( $ng > 2 ){ $grid=$grid3; $res=4;  $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem3 -g=$gName3 $special[3] $options";}
if( $ng > 3 ){ $grid=$grid4; $res=8;  $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem4 -g=$gName4 $special[4] $options";}
if( $ng > 4 ){ $grid=$grid5; $res=16; $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem5 -g=$gName5 $special[5] $options";}
if( $ng > 5 ){ $grid=$grid6; $res=32; $cmd="$cginsCmd -noplot $cmdDir/$cmdFile -numElem=$numElem6 -g=$gName6 $special[6] $options";}
$closeFile="true";
# -------------------------------------------------------------------------------
exit


