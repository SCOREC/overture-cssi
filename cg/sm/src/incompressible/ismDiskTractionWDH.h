// ------------------------------------------------------------------------------------------------ 
//    DiskTracBC: Exact solution for incompressible linear elasticity 
// Solid disk of radius R=1; r=0 bounded solution; r=1 Traction BC. 
// File Written by Disk_Annulus_ExactSoln.mw (maple) 
// Set C4 to scale the solution 
// ------------------------------------------------------------------------------------------------ 
Real rho,c,mu,omegaRoot,betaRoot,Pi,k,C1,C2,C3,ra,rb; 
ra=0.;
rb=1;
rho=1;
mu=1;
betaRoot=8.17667024339775129040010;
k=2;
C1 = 0.0e0;
C2 = 0.486843886152537642280292e1 * C4;
omegaRoot = betaRoot * sqrt(mu / rho);
Pi=3.14159265358979323846264;
#beginMacro diskMacro(r,theta,t,ur,vr,pr)
  ur = 0.1e1 / r * jn(k, 0.817667024339775129040010e1 * r) * C4 * cos(k * theta) * cos(t * omegaRoot) + 0.1e1 / r * jn(k, 0.817667024339775129040010e1 * r) * C4 * sin(k * theta) * sin(t * omegaRoot) - 0.163533404867955025808002e2 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k + 0.1e1, 0.817667024339775129040010e1) * cos(k * theta) * cos(t * omegaRoot) - 0.163533404867955025808002e2 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k + 0.1e1, 0.817667024339775129040010e1) * sin(k * theta) * sin(t * omegaRoot) + 0.2e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * k * jn(k, 0.817667024339775129040010e1) * cos(k * theta) * cos(t * omegaRoot) + 0.2e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * k * jn(k, 0.817667024339775129040010e1) * sin(k * theta) * sin(t * omegaRoot) - 0.2e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k, 0.817667024339775129040010e1) * cos(k * theta) * cos(t * omegaRoot) - 0.2e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k, 0.817667024339775129040010e1) * sin(k * theta) * sin(t * omegaRoot);
  vr = 0.200000000000000000000000e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * k * jn(k, 0.817667024339775129040010e1) * cos(k * theta) * sin(t * omegaRoot) - 0.817667024339775129040010e1 / k * jn(k + 0.1e1, 0.817667024339775129040010e1 * r) * C4 * cos(k * theta) * sin(t * omegaRoot) - 0.100000000000000000000000e1 / r * jn(k, 0.817667024339775129040010e1 * r) * C4 * sin(k * theta) * cos(t * omegaRoot) - 0.200000000000000000000000e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * k * jn(k, 0.817667024339775129040010e1) * sin(k * theta) * cos(t * omegaRoot) + 0.100000000000000000000000e1 / r * jn(k, 0.817667024339775129040010e1 * r) * C4 * cos(k * theta) * sin(t * omegaRoot) + 0.817667024339775129040010e1 / k * jn(k + 0.1e1, 0.817667024339775129040010e1 * r) * C4 * sin(k * theta) * cos(t * omegaRoot) - 0.200000000000000000000000e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k, 0.817667024339775129040010e1) * cos(k * theta) * sin(t * omegaRoot) - 0.163533404867955025808002e2 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k + 0.1e1, 0.817667024339775129040010e1) * cos(k * theta) * sin(t * omegaRoot) + 0.200000000000000000000000e1 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k, 0.817667024339775129040010e1) * sin(k * theta) * cos(t * omegaRoot) + 0.163533404867955025808002e2 * pow(r, k) / r * C4 / (-0.2e1 * k * k + 0.2e1 * k + 0.668579362692662413298169e2 * mu) * k * jn(k + 0.1e1, 0.817667024339775129040010e1) * sin(k * theta) * cos(t * omegaRoot);
  pr = -0.109335059605578508270112e4 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * jn(k + 1, 0.817667024339775129040010e1) * cos((double) (k * theta)) * cos(t * omegaRoot) - 0.109335059605578508270112e4 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * jn(k + 1, 0.817667024339775129040010e1) * sin((double) (k * theta)) * sin(t * omegaRoot) + 0.133715872538532482659634e3 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * (double) k * jn(k, 0.817667024339775129040010e1) * cos((double) (k * theta)) * cos(t * omegaRoot) + 0.133715872538532482659634e3 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * (double) k * jn(k, 0.817667024339775129040010e1) * sin((double) (k * theta)) * sin(t * omegaRoot) - 0.133715872538532482659634e3 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * jn(k, 0.817667024339775129040010e1) * cos((double) (k * theta)) * cos(t * omegaRoot) - 0.133715872538532482659634e3 * C4 / (-(double) (2 * k * k) + (double) (2 * k) + 0.668579362692662413298169e2 * mu) * mu * pow(r, (double) k) * jn(k, 0.817667024339775129040010e1) * sin((double) (k * theta)) * sin(t * omegaRoot);
#endMacro
