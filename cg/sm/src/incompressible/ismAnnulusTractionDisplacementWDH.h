// ------------------------------------------------------------------------------------------------ 
//    AnnulusTracDispBCs: Exact solution for incompressible linear elasticity 
// Annulus of outer radius Rb=2, inner radius Ra = 1; r=1 Traction BC; r=2 Displacement BC. 
// File Written by Disk_Annulus_ExactSoln.mw (maple) 
// Set C4 to scale the solution 
// ------------------------------------------------------------------------------------------------ 
Real rho,c,mu,omegaRoot,betaRoot,Pi,k,C1,C2,C3,ra,rb; 
ra=.5;
rb=1.;
rho=1;
mu=1;
betaRoot=2.70180213338953294069697;
k=1;
C1 = -0.421761043357083014501791e1 * C4;
C2 = 0.187798693127866841300838e1 * C4;
C3 = -0.527973122762447522209045e0 * C4;
omegaRoot = betaRoot * sqrt(mu / rho);
Pi=3.14159265358979323846264;
#beginMacro annulusMacro(r,theta,t,ur,vr,pr)
  ur = 0.1e1 / r * jn(1, 0.270180213338953294069697e1 * r) * C4 * cos(t * omegaRoot) * cos(theta) + 0.1e1 / r * jn(1, 0.270180213338953294069697e1 * r) * C4 * sin(t * omegaRoot) * sin(theta) + 0.185886219453615487107146e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * cos(theta) + 0.185886219453615487107146e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * sin(theta) - 0.652706113525886387519789e1 * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * cos(theta) - 0.652706113525886387519789e1 * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * sin(theta) + 0.429478687316422375462374e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * mu * cos(t * omegaRoot) * cos(theta) + 0.429478687316422375462374e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * mu * sin(t * omegaRoot) * sin(theta) - 0.181947548294283194480474e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * cos(theta) - 0.181947548294283194480474e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * sin(theta) + 0.185886219453615487107146e2 * mu * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * cos(theta) + 0.185886219453615487107146e2 * mu * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * sin(theta) + 0.849940719401138113113085e1 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * cos(theta) + 0.849940719401138113113085e1 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * sin(theta);
  vr = 0.116036643363684611599021e3 * mu * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * yn(0, 0.270180213338953294069697e1 * r) * sin(t * omegaRoot) * cos(theta) - 0.491586274146489410093073e2 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * yn(0, 0.270180213338953294069697e1 * r) * sin(t * omegaRoot) * cos(theta) + 0.491586274146489410093073e2 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * yn(0, 0.270180213338953294069697e1 * r) * cos(t * omegaRoot) * sin(theta) - 0.116036643363684611599021e3 * mu * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * yn(0, 0.270180213338953294069697e1 * r) * cos(t * omegaRoot) * sin(theta) - 0.999999999999999999999999e0 / r * jn(1, 0.270180213338953294069697e1 * r) * C4 * sin(t * omegaRoot) * cos(theta) + 0.999999999999999999999999e0 / r * jn(1, 0.270180213338953294069697e1 * r) * C4 * cos(t * omegaRoot) * sin(theta) + 0.185886219453615487107146e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * cos(theta) - 0.185886219453615487107146e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * sin(theta) + 0.652706113525886387519789e1 * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * cos(theta) - 0.652706113525886387519789e1 * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * sin(theta) - 0.429478687316422375462373e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * mu * sin(t * omegaRoot) * cos(theta) + 0.429478687316422375462373e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * mu * cos(t * omegaRoot) * sin(theta) + 0.270180213338953294069696e1 * C4 * jn(0, 0.270180213338953294069697e1 * r) * sin(t * omegaRoot) * cos(theta) - 0.270180213338953294069696e1 * C4 * jn(0, 0.270180213338953294069697e1 * r) * cos(t * omegaRoot) * sin(theta) + 0.181947548294283194480474e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * cos(theta) - 0.181947548294283194480474e2 / r * yn(1, 0.270180213338953294069697e1 * r) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * sin(theta) - 0.185886219453615487107146e2 * mu * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * cos(theta) + 0.185886219453615487107146e2 * mu * pow(r, -0.2e1) * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * sin(theta) + 0.849940719401138113113085e1 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * sin(t * omegaRoot) * cos(theta) - 0.849940719401138113113085e1 * C4 / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * cos(t * omegaRoot) * sin(theta);
  pr = 0.135692009903544734172044e3 * C4 * mu * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * pow(r, k) * cos(k * theta) * cos(t * omegaRoot) + 0.135692009903544734172044e3 * C4 * mu * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * pow(r, k) * sin(k * theta) * sin(t * omegaRoot) + 0.620434182014141753756432e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * pow(r, k) * cos(k * theta) * cos(t * omegaRoot) + 0.620434182014141753756432e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) * pow(r, k) * sin(k * theta) * sin(t * omegaRoot) - 0.135692009903544734172044e3 * C4 * mu * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) / pow(r, k) * cos(k * theta) * cos(t * omegaRoot) - 0.135692009903544734172044e3 * C4 * mu * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) / pow(r, k) * sin(k * theta) * sin(t * omegaRoot) + 0.476458151018338659124449e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) / pow(r, k) * cos(k * theta) * cos(t * omegaRoot) + 0.476458151018338659124449e2 * C4 * mu / (-0.458941557224063735118251e2 * mu - 0.98912835974785841653545e0) / pow(r, k) * sin(k * theta) * sin(t * omegaRoot);
#endMacro
