#include "Cgsm.h"
#include "display.h"
#include "CompositeGridOperators.h"
#include "ParallelUtility.h"
#include "ParallelOverlappingGridInterpolator.h"
#include "SmParameters.h"
#include "Regrid.h"
#include "AdvanceOptions.h"

#Include "amrMacros.h"

#define FN(m) fn[m+numberOfFunctions*(grid)]

// ===================================================================================================================
/// \brief Advance one time-step using the method of lines.
/// \param current (input) : index of the current solution 
/// \param t (input) : current time.
/// \param dt (input) : time step.
/// \param correction (input) : indicates correction number when called by takeTimeStep
/// \param pAdvanceOptions (input) : pointer to advance options when called by takeTimeStep
// ===================================================================================================================
void Cgsm::
advanceMethodOfLines( int current, real t, real dt, 
                      int correction /* =0 */, AdvanceOptions *pAdvanceOptions /* =NULL */ )
{
  checkArrays("advanceMethodOfLines:start");
  int & globalStepNumber = parameters.dbase.get<int >("globalStepNumber");
  globalStepNumber++;

  if( debug() & 2 || ( t<= dt)  )
    printF("--SM-- advanceMethodOfLines: t=%e current=%i, numberOfFunctions=%i, numberOfTimeLevels=%i\n",t,
	   current,numberOfFunctions,numberOfTimeLevels);

  FILE *& debugFile  =parameters.dbase.get<FILE* >("debugFile");
  FILE *& logFile    =parameters.dbase.get<FILE* >("logFile");
  FILE *& pDebugFile =parameters.dbase.get<FILE* >("pDebugFile");
  
  const int numberOfDimensions = cg.numberOfDimensions();
  const int numberOfComponentGrids = cg.numberOfComponentGrids();
  const int & numberOfComponents = parameters.dbase.get<int >("numberOfComponents");
  const int & uc =  parameters.dbase.get<int >("uc");
  const int & vc =  parameters.dbase.get<int >("vc");
  const int & wc =  parameters.dbase.get<int >("wc");
  const int & rc =  parameters.dbase.get<int >("rc");
  const int & tc =  parameters.dbase.get<int >("tc");
  const int & orderOfAccuracyInSpace = parameters.dbase.get<int>("orderOfAccuracy");
  const int & orderOfAccuracyInTime  = parameters.dbase.get<int>("orderOfTimeAccuracy");

  SmParameters::TimeSteppingMethodSm & timeSteppingMethodSm = 
                                   parameters.dbase.get<SmParameters::TimeSteppingMethodSm>("timeSteppingMethodSm");

  Index Iv[3], &I1=Iv[0], &I2=Iv[1], &I3=Iv[2];
  Range C=numberOfComponents;
  const int prev = (current-1+numberOfTimeLevels) % numberOfTimeLevels;
  const int next = (current+1) % numberOfTimeLevels;

  parameters.dbase.get<int>("currentGF")=current;
  parameters.dbase.get<int>("nextGF")=next;

  int & debug = parameters.dbase.get<int >("debug");

  const bool isSecondOrderSystem = ((SmParameters&)parameters).isSecondOrderSystem();

  // --- For FSI problems we may take a step and/or apply the BC's ----
  bool takeTimeStep=true, applyBC=true;
  if( pAdvanceOptions!=NULL )
  {
    AdvanceOptions & advanceOptions = *pAdvanceOptions;
    takeTimeStep =(advanceOptions.takeTimeStepOption==AdvanceOptions::takeStepAndApplyBoundaryConditions ||
		   advanceOptions.takeTimeStepOption==AdvanceOptions::takeStepButDoNotApplyBoundaryConditions);
    applyBC = ( advanceOptions.takeTimeStepOption==AdvanceOptions::takeStepAndApplyBoundaryConditions ||
		advanceOptions.takeTimeStepOption==AdvanceOptions::applyBoundaryConditionsOnly );
  }

  // ------ AMR -----
  if( takeTimeStep && correction==0 )
  {
    updateForAdaptiveGridsMacro();
  }
  
  // ========== Forward-Euler or Improved Euler: =============

  if( timeSteppingMethodSm==SmParameters::forwardEuler ||
      timeSteppingMethodSm==SmParameters::improvedEuler )
  {
    if( correction==0 )
    {
      // ---- predictor:  ----
      if( takeTimeStep )
      {
	getUt( gf[current], t, fn[0], t );

	if( debug & 8 )
	{
	  fn[0].display(sPrintF("MOL: predictor: u.t or u.tt at t=%9.3e, dt=%8.2e\n",t,dt),debugFile);
	}
  
	if( isSecondOrderSystem )
	{ // fn[0] holds u.tt in this case 
	  gf[next].u = 2.*gf[current].u -gf[prev].u + (dt*dt)*fn[0];
	}
	else
	{  // fn[0] holds u.t in this case 
	  gf[next].u = gf[current].u + (dt)*fn[0];
	}
	gf[next].t=t+dt;
      }
      
      // ............. Boundary Conditions ..............
      if( applyBC )
      {
        gf[next].u.interpolate();  // *wdh* March 29,2019 -- this was missing!

	int option=0; // not used.
	applyBoundaryConditions( option, dt, next,current ); // apply BC to "next" (current=previous time step)
      }
    }
    
    // ---- corrector ----
    // (if pAdvanceOptions==NULL then we apply the predictor and corrector)
    if( correction>0 || pAdvanceOptions==NULL )
    {
      if( timeSteppingMethodSm==SmParameters::improvedEuler && !isSecondOrderSystem )
      {
	const real tNext=gf[next].t;

	if( true && pAdvanceOptions!=NULL )
	{
	  printP("--SM-- advanceMOL: apply corrector at t=%9.3e correction=%i\n",tNext,correction);
	}
	
	if( takeTimeStep )
	{
	  getUt( gf[next], tNext, fn[1],tNext );

	  if( debug & 8 )
	  {
	    fn[1].display(sPrintF("MOL: corrector: u.t or u.tt at tNext=%9.3e\n",tNext),debugFile);
	  }

	  gf[next].u = gf[current].u + (.5*dt)*(fn[0]+fn[1]);
	}
	if( applyBC )
	{
          gf[next].u.interpolate();  // *wdh* March 29,2019 -- this was missing!

	  int option=0; // not used.
	  applyBoundaryConditions( option, dt, next,current );
	}
      
      }
    }
    
  }
  else
  {
    printF("Cgsm::advanceMethodOfLines:ERROR: un-implemented time-stepping method : timeSteppingMethodSm=%i\n",(int)timeSteppingMethodSm);
    Overture::abort("error");
  }
  
  checkArrays("advanceMethodOfLines:end");
  
}

// =================================================================================================
/// \brief: compute u.t or u.tt for a method of lines time-stepper
// =================================================================================================
void Cgsm::
getUt( GridFunction & cgf, 
       const real & t, 
       RealCompositeGridFunction & ut, 
       real tForce )
{
  real & dt= deltaT;
  
  // --- finish me ---
  if( ((SmParameters&)parameters).isSecondOrderSystem() )
  {
    // advance the solution as a second-order system (do not apply BCs)
    getUtSOS( cgf,t,ut,tForce );
  }
  else
  {
    // advance the solution as a first order system
    getUtFOS( cgf,t,ut,tForce );

  }

}
