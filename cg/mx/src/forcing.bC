#include "Maxwell.h"
#include "DispersiveMaterialParameters.h"
#include "CompositeGridOperators.h"
#include "display.h"
#include "UnstructuredMapping.h"
#include "OGPolyFunction.h"
#include "OGTrigFunction.h"
#include "OGPulseFunction.h"
#include "interpPoints.h"
#include "ShowFileReader.h"
#include "ParallelUtility.h"
#include "App.h"

#define forcingOptMaxwell EXTERN_C_NAME(forcingoptmaxwell)
#define ogf EXTERN_C_NAME(ogf)
#define ogf2d EXTERN_C_NAME(ogf2d)
#define ogf2dfo EXTERN_C_NAME(ogf2dfo)
#define ogderiv EXTERN_C_NAME(ogderiv)
#define ogderiv3 EXTERN_C_NAME(ogderiv3)
#define ogf3d EXTERN_C_NAME(ogf3d)
#define ogf3dfo EXTERN_C_NAME(ogf3dfo)
#define exx EXTERN_C_NAME(exx)

extern "C"
{
  void forcingOptMaxwell(const int&nd,
      const int&nd1a,const int&nd1b,const int&nd2a,const int&nd2b,const int&nd3a,const int&nd3b,
      const int&ndf1a,const int&ndf1b,const int&ndf2a,const int&ndf2b,const int&ndf3a,const int&ndf3b,
      real&u, const real&f, const int&mask, const real&rx, const real&x,  
      const int&ipar, const real&rpar, int&ierr );
}



extern "C"
{

/* Here are functions for TZ flow that can be called from fortran */



real
ogf(OGFunction *&ep, const real &x, const real &y,const real &z, const int & c, const real & t )
{
  return (*ep)(x,y,z,c,t);
}


/* return (u,v,w) = (Ex,Ey,Hz) */
void
ogf2d(OGFunction *&ep, const real &x, const real &y, const real & t, real & u, real & v, real & w )
{
  /* assumes ex=0, ey=1, hz=2 */
  u=(*ep)(x,y,0.,0,t);
  v=(*ep)(x,y,0.,1,t);
  w=(*ep)(x,y,0.,2,t);
}

/* return (u,v,w) = (Ex,Ey,Hz) if fieldOption=0 or (u,v,w) = (Ex_t,Ey_t,Hz_t) if fieldOption=1 */
void
ogf2dfo(OGFunction *&ep, const int &ex, const int &ey, const int &hz, const int & fieldOption, 
        const real &x, const real &y, const real & t, real & u, real & v, real & w )
{
  if( fieldOption==0 )
  {
    u=(*ep)(x,y,0.,ex,t);
    v=(*ep)(x,y,0.,ey,t);
    w=(*ep)(x,y,0.,hz,t);
  }
  else if( fieldOption==1 )
  {
    /* assumes ex=0, ext=3 */
    u=(*ep)(x,y,0.,ex+3,t);
    v=(*ep)(x,y,0.,ex+4,t);
    w=(*ep)(x,y,0.,ex+5,t);
  }
  else
  {
    printf("ogf2dfo:ERROR - fieldOption=%i\n",fieldOption);
    OV_ABORT("error");
  }
  
}

/* return a general derivative */
void
ogderiv(OGFunction *&ep, const int & ntd, const int & nxd, const int & nyd, const int & nzd, 
         const real &x, const real &y, const real &z, const real & t, const int & n, real & ud )
{
  ud=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n,t);
}

/* return a general derivative for 3 components */
void
ogderiv3(OGFunction *&ep, const int & ntd, const int & nxd, const int & nyd, const int & nzd, 
         const real &x, const real &y, const real &z, const real & t, 
         const int & n1, real & ud1, const int & n2, real & ud2, const int & n3, real & ud3 )
{
  ud1=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n1,t);
  ud2=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n2,t);
  ud3=(*ep).gd(ntd,nxd,nyd,nzd,x,y,z,n3,t);
}

/* return (u,v,w) = (Ex,Ey,Ez) */
void
ogf3d(OGFunction *&ep, const real &x, const real &y, const real &z, const real & t, real & u, real & v, real & w )
{
  /* assumes ex=0, ey=1, hz=2 */
  u=(*ep)(x,y,z,0,t);
  v=(*ep)(x,y,z,1,t);
  w=(*ep)(x,y,z,2,t);
}

/* return (u,v,w) = (Ex,Ey,Ez) if fieldOption==0, return (u,v,w) = (Ex_t,Ey_t,Ez_t) if fieldOption==1 */
void
ogf3dfo(OGFunction *&ep, const int &ex, const int &ey, const int &ez, const int & fieldOption, 
        const real &x, const real &y, const real &z, const real & t, real & u, real & v, real & w )
{
  /* assumes ex=0, ey=1, ez=2 */
  if( fieldOption==0 )
  {
    u=(*ep)(x,y,z,ex,t);
    v=(*ep)(x,y,z,ey,t);
    w=(*ep)(x,y,z,ez,t);
  }
  else if( fieldOption==1 )
  {
    /* assumes ex=0, ext=3 */
    u=(*ep)(x,y,z,ex+3,t);
    v=(*ep)(x,y,z,ex+4,t);
    w=(*ep)(x,y,z,ex+5,t);
  }
  else
  {
    printf("ogf2dfo:ERROR - fieldOption=%i\n",fieldOption);
  }
}

real
exx(OGFunction *&ep, const real &x, const real &y,const real &z, const int & c, const real & t )
{
  real value=(*ep).xx(x,y,z,c,t);
  // printF("exx: x=(%8.2e,%8.2e,%8.2e) c=%i t=%8.2e ...exx=%8.2e \n",x,y,z,c,t,value);
  return value;
}

}


#define FOR_3D(i1,i2,i3,I1,I2,I3) \
int I1Base =I1.getBase(),   I2Base =I2.getBase(),  I3Base =I3.getBase();  \
int I1Bound=I1.getBound(),  I2Bound=I2.getBound(), I3Bound=I3.getBound(); \
for(i3=I3Base; i3<=I3Bound; i3++) \
for(i2=I2Base; i2<=I2Bound; i2++) \
for(i1=I1Base; i1<=I1Bound; i1++)

#define FOR_3(i1,i2,i3,I1,I2,I3) \
I1Base =I1.getBase(),   I2Base =I2.getBase(),  I3Base =I3.getBase();  \
I1Bound=I1.getBound(),  I2Bound=I2.getBound(), I3Bound=I3.getBound(); \
for(i3=I3Base; i3<=I3Bound; i3++) \
for(i2=I2Base; i2<=I2Bound; i2++) \
for(i1=I1Base; i1<=I1Bound; i1++)

// Define macros for forcing functions:
#Include "forcing.h"
#Include "annulusEigenFunction.h"

// Gaussian pulse initial conditions:
// #Include "gaussianPulse.h"


#beginMacro forcingLoops2D(e1)
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   #undef CC
   #define CC ex
   U ## e1
   #undef CC
   #define CC ey
   U ## e1
 }
 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3(i1,i2,i3,J1,J2,J3)
 {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);

   #undef CC
   #define CC hz
   U ## e1
 }
#endMacro

#beginMacro forcingLoops3D(e1)
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));

 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   z0 = XEP(i1,i2,i3,2);
   #undef CC
   #define CC ex
   U ## e1
   #undef CC
   #define CC ey
   U ## e1
   #undef CC
   #define CC ez
   U ## e1
   #undef CC
 }
#endMacro

#beginMacro forcingLoops2DS( assgn )
if ( (option==0 || option==1 ) )
{
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   #undef CC
   #define CC ex
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - e.y(x0,y0,z0,hz,t)/eps;
   #undef CC
   #define CC ey
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 + e.x(x0,y0,z0,hz,t)/eps;
 }
}
else
{
 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);

   #undef CC
   #define CC hz
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + e.x( x0,y0,z0, ey, t)/mu - e.y( x0,y0,z0, ex, t)/mu;
 }
}
#endMacro

#beginMacro forcingLoops3DS( assgn )

 if ( (option==0 || option==1 ) )
   {
 J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
 J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
 J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
 {
   x0 = XEP(i1,i2,i3,0);
   y0 = XEP(i1,i2,i3,1);
   z0 = XEP(i1,i2,i3,2);
//    #undef CC
//    #define CC ex
//    e1
//    #undef CC
//    #define CC ey
//    e1
    #undef CC
    #define CC ex
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - (e.y(x0,y0,z0,hz,t)-e.z(x0,y0,z0,hy,t))/eps;
    #undef CC
    #define CC ey
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 + (e.x(x0,y0,z0,hz,t)-e.z(x0,y0,z0,hx,t))/eps;

    #undef CC
    #define CC ez
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
				 - (e.x(x0,y0,z0,hy,t)-e.y(x0,y0,z0,hx,t))/eps;
 }
   }
 else
   {

 J1 = Range(max(Ih1.getBase(),uhl.getBase(0)),min(Ih1.getBound(),uhl.getBound(0)));
 J2 = Range(max(Ih2.getBase(),uhl.getBase(1)),min(Ih2.getBound(),uhl.getBound(1)));
 J3 = Range(max(Ih3.getBase(),uhl.getBase(2)),min(Ih3.getBound(),uhl.getBound(2)));
 FOR_3D(i1,i2,i3,J1,J2,J3)
   {
   x0 = XHP(i1,i2,i3,0);
   y0 = XHP(i1,i2,i3,1);
   z0 = XHP(i1,i2,i3,2);

   #undef CC
   #define CC hx
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + (e.y( x0,y0,z0, ez, t) - e.z( x0,y0,z0, ey, t))/mu;

   #undef CC
   #define CC hy
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     - (e.x( x0,y0,z0, ez, t) - e.z( x0,y0,z0, ex, t))/mu;

   #undef CC
   #define CC hz
   U(i1,i2,i3,CC) ## assgn e.gd(1,nxd,nyd,nzd,x0,y0,z0,CC,t) \
     + (e.x( x0,y0,z0, ey, t) - e.y( x0,y0,z0, ex, t))/mu;

   }

   }

#endMacro

// =================================================================================================
// Macro: Get TZ forcing for NFDTD, SOSUP
// =================================================================================================
#beginMacro getTZForcing()
if( method==nfdtd )
{
  if( t<= 2.*dt )
    printF("--MX-FORCE-- add TZ forcing (*new opt way*) option=%i orderOfAccuracyInSpace=%i\n",option,
           orderOfAccuracyInSpace);

  // *********** NEW WAY -- JAN 2017 ***********
  // This should be more efficient
  const bool isRectangular = false; // ** do this for now ** mg.isRectangular();


  if( option==1 )
  {
    uLocal(I1,I2,I3,C)=0.;
  }
  Range E(ex,ex+numberOfDimensions-1); // electric field components
  RealArray utt(I1,I2,I3,C), uxx(I1,I2,I3,C), uyy(I1,I2,I3,C);
	  
  e.gd( utt ,xLocal,numberOfDimensions,isRectangular,2,0,0,0,I1,I2,I3,C,t);
  e.gd( uxx ,xLocal,numberOfDimensions,isRectangular,0,2,0,0,I1,I2,I3,C,t);
  e.gd( uyy ,xLocal,numberOfDimensions,isRectangular,0,0,2,0,I1,I2,I3,C,t);

  if( numberOfDimensions==2 )
  {
    uLocal(I1,I2,I3,C) += utt - csq*(uxx+uyy);
  }
  else
  {
    RealArray uzz(I1,I2,I3,C);
    e.gd( uzz ,xLocal,numberOfDimensions,isRectangular,0,0,0,2,I1,I2,I3,C,t);

    uLocal(I1,I2,I3,C) += utt - csq*(uxx+uyy+uzz);
  }
  if( orderOfAccuracyInSpace>=4 )
  {
    // --- add on forcing corrections for modified equation time-stepping ----
    //
    //       u_tt = c^2 Delta u + f
    // Modified equation:
    //    D+tD-t U = u_tt + (dt^2)/12* u_tttt + ...
    //             = c^2 Delta u + (dt^2)/12*( c^4 (Delta)^2 u ) + F 
    // where 
    //     F = f + (dt^2)/12*( c^2 Delta f + f_tt )
    // 
    //    u_tt = c^2 Delta u + f
    //    u_tttt = (c^2 Delta u + f)_tt = c^2 Delta u_tt + f_tt
    //           = c^4 (Delta)^2 u + c^2 Delta f + f_tt
    // TZ forcing:
    //     f = w_tt - c^2 Delta w   where w=TZ solution 
    // Total forcing
    //     F = w_tt - c^2 Delta w + (dt^2/12)*[ c^2 Delta w_tt - (c^2 Delta)^2 w + w_tttt - c^2 Delta w_tt ]
    //       = w_tt - c^2 Delta w + (dt^2/12)*[ w_tttt - (c^2 Delta)^2 w ]

    const real csq2=csq*csq;
    /// RealArray &utttt=utt, &uxxxx=uxx, &uyyyy=uyy, uxxyy(I1,I2,I3,C);
    RealArray utttt(I1,I2,I3,C), uxxxx(I1,I2,I3,C), uyyyy(I1,I2,I3,C), uxxyy(I1,I2,I3,C);
	  
    e.gd( utttt ,xLocal,numberOfDimensions,isRectangular,4,0,0,0,I1,I2,I3,C,t);
    e.gd( uxxxx ,xLocal,numberOfDimensions,isRectangular,0,4,0,0,I1,I2,I3,C,t);
    e.gd( uxxyy ,xLocal,numberOfDimensions,isRectangular,0,2,2,0,I1,I2,I3,C,t);
    e.gd( uyyyy ,xLocal,numberOfDimensions,isRectangular,0,0,4,0,I1,I2,I3,C,t);
    // e.gd( uyyyy ,xLocal,numberOfDimensions,isRectangular,0,0,4,0,I1,I2,I3,C,t);

    uLocal(I1,I2,I3,C) += ( utttt - (csq2)*( uxxxx + 2.*uxxyy + uyyyy) )*dtsqby12;

    // ::display(uxxxx,"uxxxx");
    // ::display(e.gd(0,4,0,0,mg,I1,I2,I3,C,t),"e.gd(0,4,0,0,mg,I1,I2,I3,C,t)");
    // ::display(uyyyy,"uyyyy");
    // ::display(e.gd(0,0,4,0,mg,I1,I2,I3,C,t),"e.gd(0,0,4,0,mg,I1,I2,I3,C,t)");
	  

    // u(I1,I2,I3,C)+= (utttt
    // 		   - (csq*csq)*(uxxxx
    // 				+e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
    // 				+2.*uxxyy ) )*dtsqby12;

    // u(I1,I2,I3,C)+= (e.gd(4,0,0,0,mg,I1,I2,I3,C,t) 
    // 		   - (csq*csq)*(e.gd(0,4,0,0,mg,I1,I2,I3,C,t)
    // 				+e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
    // 				+2.*e.gd(0,2,2,0,mg,I1,I2,I3,C,t) ) )*dtsqby12;
    if( numberOfDimensions==3 )
    {
      RealArray &uxxzz=utt, &uyyzz=uxx, &uzzzz=uyy;

      e.gd( uxxzz ,xLocal,numberOfDimensions,isRectangular,0,2,0,2,I1,I2,I3,C,t);
      e.gd( uyyzz ,xLocal,numberOfDimensions,isRectangular,0,0,2,2,I1,I2,I3,C,t);
      e.gd( uzzzz ,xLocal,numberOfDimensions,isRectangular,0,0,0,4,I1,I2,I3,C,t);

      uLocal(I1,I2,I3,C) += (-csq2*dtsqby12)*( 2.*(uxxzz + uyyzz) + uzzzz);
    }
	  
    if( orderOfAccuracyInSpace>=6 ) 
    {
      const real dt4by360=dt*dt*dt*dt/360.;
      const real csq3 = csq*csq*csq;
      RealArray &utttttt=utt, &uxxxxxx=uxx, &uyyyyyy=uyy, uxxxxyy(I1,I2,I3,C), uxxyyyy(I1,I2,I3,C);
	    
      e.gd( utttttt ,xLocal,numberOfDimensions,isRectangular,6,0,0,0,I1,I2,I3,C,t);
      e.gd( uxxxxxx ,xLocal,numberOfDimensions,isRectangular,0,6,0,0,I1,I2,I3,C,t);
      e.gd( uxxxxyy ,xLocal,numberOfDimensions,isRectangular,0,4,2,0,I1,I2,I3,C,t);
      e.gd( uxxyyyy ,xLocal,numberOfDimensions,isRectangular,0,2,4,0,I1,I2,I3,C,t);
      e.gd( uyyyyyy ,xLocal,numberOfDimensions,isRectangular,0,0,6,0,I1,I2,I3,C,t);

      uLocal(I1,I2,I3,C) += ( utttttt - csq3*( uxxxxxx + 3.*(uxxxxyy+uxxyyyy) + uyyyyyy) )*dt4by360;

      if( numberOfDimensions==3 )
      {
        RealArray &uxxxxzz=utt, &uyyyyzz=uxx, &uzzzzzz=uyy, &uxxzzzz=uxxxxyy, &uyyzzzz=uxxyyyy, uxxyyzz(I1,I2,I3,C);

        e.gd( uxxxxzz ,xLocal,numberOfDimensions,isRectangular,0,4,0,2,I1,I2,I3,C,t);
        e.gd( uyyyyzz ,xLocal,numberOfDimensions,isRectangular,0,0,4,2,I1,I2,I3,C,t);
        e.gd( uxxzzzz ,xLocal,numberOfDimensions,isRectangular,0,2,0,4,I1,I2,I3,C,t);
        e.gd( uyyzzzz ,xLocal,numberOfDimensions,isRectangular,0,0,2,4,I1,I2,I3,C,t);
        e.gd( uzzzzzz ,xLocal,numberOfDimensions,isRectangular,0,0,0,6,I1,I2,I3,C,t);
        e.gd( uxxyyzz ,xLocal,numberOfDimensions,isRectangular,0,2,2,2,I1,I2,I3,C,t);

        e.gd( uxxyyzz ,xLocal,numberOfDimensions,isRectangular,0,2,2,2,I1,I2,I3,C,t);

        uLocal(I1,I2,I3,C) += (-csq3*dt4by360)*( 3.*(uxxxxzz + uyyyyzz+ uxxzzzz + uyyzzzz) +6.*uxxyyzz + uzzzzzz );
      }

    }
	  
  }

}

else if( useScalarLoops || method==dsiMatVec || method==dsi )
{
  // ********************** this is slow -- fix *****************

  int i1,i2,i3;
  real x0,y0,z0=0.;
	  
  if( option==0 || option==2 )
  {
    if( mg.numberOfDimensions()==2 )
    {
// 	      forcingLoops2D(U(i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
//                                                - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
      if( method==nfdtd || method==sosup )
      {
        forcingLoops2D((i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
                       - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
      }
      else
      {
        forcingLoops2DS( += );
      }
    }
    else
    {
      //	      forcingLoops3D(U(i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
      //			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
      if ( method==nfdtd || method==sosup )
      {
        forcingLoops3D((i1,i2,i3,CC) += e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
                       - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
      }
      else
      {
        forcingLoops3DS( += );
      }
    }
  }
  else
  {
    if( mg.numberOfDimensions()==2 )
    {
// 	      forcingLoops2D(U(i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
//                                                - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
      if ( method==nfdtd || method==sosup )
      {
        forcingLoops2D((i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
                       - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)););
      }
      else
      {
        forcingLoops2DS( = );
      }
    }
    else
    {
// 	      forcingLoops3D(U(i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
//			     - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
      if ( method==nfdtd || method==sosup )
      {
        forcingLoops3D((i1,i2,i3,CC) = e.gd(ntd,nxd,nyd,nzd,x0,y0,z0,CC,t) \
                       - csq*(e.xx(x0,y0,z0,CC,t)+e.yy(x0,y0,z0,CC,t)+e.zz(x0,y0,z0,CC,t)););
      }
      else
      {
        forcingLoops3DS( = );
      }
    }
  }
  if( orderOfAccuracyInSpace>=4 && method!=sosup )
  {// add forcing for methods that are 4th order or higher
    if( mg.numberOfDimensions()==2 )
    {
// 	      forcingLoops2D(U(i1,i2,i3,CC)+= (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
// 						 - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
// 							      +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
// 							      +2.*e.gd(0,2,2,0,x0,y0,z0,CC,t) ) )*dtsqby12;);
      forcingLoops2D((i1,i2,i3,CC)+= (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
                                      - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
                                                   +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
                                                   +2.*e.gd(0,2,2,0,x0,y0,z0,CC,t) ) )*dtsqby12;);
    }
    else
    {
// 	      forcingLoops3D(U(i1,i2,i3,CC)+=    (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
// 						    - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
// 								 +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
// 								 +e.gd(0,0,0,4,x0,y0,z0,CC,t)\
// 								 +2.*(e.gd(0,2,2,0,x0,y0,z0,CC,t)\
// 								      +e.gd(0,2,0,2,x0,y0,z0,CC,t)\
// 								      +e.gd(0,0,2,2,x0,y0,z0,CC,t)) ) )*dtsqby12;);
      forcingLoops3D((i1,i2,i3,CC)+=    (e.gd(4,0,0,0,x0,y0,z0,CC,t) \
                                         - (csq*csq)*(e.gd(0,4,0,0,x0,y0,z0,CC,t)\
                                                      +e.gd(0,0,4,0,x0,y0,z0,CC,t)\
                                                      +e.gd(0,0,0,4,x0,y0,z0,CC,t)\
                                                      +2.*(e.gd(0,2,2,0,x0,y0,z0,CC,t)\
                                                           +e.gd(0,2,0,2,x0,y0,z0,CC,t)\
                                                           +e.gd(0,0,2,2,x0,y0,z0,CC,t)) ) )*dtsqby12;);
    }
  }
	
  if( orderOfAccuracyInSpace>=6 && method!=sosup )
  { // add forcing for methods that are 6th order or higher
    real dt4by360=dt*dt*dt*dt/360.;
	  
    if( mg.numberOfDimensions()==2 )
    {
// 	      forcingLoops2D(U(i1,i2,i3,CC)+= (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
// 						 - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
// 								  +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
// 								  +3.*e.gd(0,2,4,0,x0,y0,z0,CC,t) \
// 								  +3.*e.gd(0,4,2,0,x0,y0,z0,CC,t) ) )*dt4by360;);

      forcingLoops2D((i1,i2,i3,CC)+= (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
                                      - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
                                                       +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
                                                       +3.*e.gd(0,2,4,0,x0,y0,z0,CC,t) \
                                                       +3.*e.gd(0,4,2,0,x0,y0,z0,CC,t) ) )*dt4by360;);
    }
    else
    {
// 	      forcingLoops3D(U(i1,i2,i3,CC)+=    (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
// 						    - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
// 								     +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
// 								     +e.gd(0,0,0,6,x0,y0,z0,CC,t)\
// 								     +3.*( e.gd(0,4,2,0,x0,y0,z0,CC,t)\
// 									   +e.gd(0,2,4,0,x0,y0,z0,CC,t)\
// 									   +e.gd(0,4,0,2,x0,y0,z0,CC,t)\
// 									   +e.gd(0,2,0,4,x0,y0,z0,CC,t)\
// 									   +e.gd(0,0,4,2,x0,y0,z0,CC,t)\
// 									   +e.gd(0,0,2,4,x0,y0,z0,CC,t) )\
// 								     +6.*e.gd(0,2,2,2,x0,y0,z0,CC,t)\
// 						      ) )*dt4by360;);
      forcingLoops3D((i1,i2,i3,CC)+=    (e.gd(6,0,0,0,x0,y0,z0,CC,t) \
                                         - (csq*csq*csq)*(e.gd(0,6,0,0,x0,y0,z0,CC,t)\
                                                          +e.gd(0,0,6,0,x0,y0,z0,CC,t)\
                                                          +e.gd(0,0,0,6,x0,y0,z0,CC,t)\
                                                          +3.*( e.gd(0,4,2,0,x0,y0,z0,CC,t)\
                                                                +e.gd(0,2,4,0,x0,y0,z0,CC,t)\
                                                                +e.gd(0,4,0,2,x0,y0,z0,CC,t)\
                                                                +e.gd(0,2,0,4,x0,y0,z0,CC,t)\
                                                                +e.gd(0,0,4,2,x0,y0,z0,CC,t)\
                                                                +e.gd(0,0,2,4,x0,y0,z0,CC,t) )\
                                                          +6.*e.gd(0,2,2,2,x0,y0,z0,CC,t)\
                                           ) )*dt4by360;);
    }
  }

	
}
else // ** Old way **
{
  if( t<= dt )
    printF("--MX-FORCE-- add TZ forcing (array version)\n");
    



  Index Ch = cg.numberOfDimensions()==2 ? Range(hz,hz) : Range(hx,hz);
  Index Ce = cg.numberOfDimensions()==2 ? Range(ex,ey) : Range(ex,ez);
	
  if( option==0 || option==2 )
  {
    if( solveForElectricField ) 
      u(I1,I2,I3,Ce)+= e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,Ce,tE) - csq*e.laplacian(mg,I1,I2,I3,Ce,tE);
    if( solveForMagneticField )
      u(I1,I2,I3,Ch)+= e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,Ch,tH) - csq*e.laplacian(mg,I1,I2,I3,Ch,tH);
  }
  else
  {
    u(I1,I2,I3,C) = e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,C,t) - csq*e.laplacian(mg,I1,I2,I3,C,t);
// 	      u(I1,I2,I3,Ce) = e.gd(ntd,nxd,nyd,nzd,mg,Ie1,Ie2,Ie3,Ce,tE) - csq*e.laplacian(mg,Ie1,Ie2,Ie3,Ce,tE);
// 	      u(I1,I2,I3,Ch) = e.gd(ntd,nxd,nyd,nzd,mg,Ih1,Ih2,Ih3,Ch,tH) - csq*e.laplacian(mg,Ih1,Ih2,Ih3,Ch,tH);
  }

  // printF(" option=%i csq=%e \n",option,csq);
	  
  // display(e.gd(ntd,nxd,nyd,nzd,mg,I1,I2,I3,C,t)," e.tt","%5.2f ");
  // display(e.laplacian(mg,I1,I2,I3,C,t),"e.laplacian(mg,I1,I2,I3,C,t)","%5.2f ");

  // display(u(I1,I2,I3,C),"getForcing: RHS after first assignment","%5.2f ");

  if( timeSteppingMethod == modifiedEquationTimeStepping && method!=sosup )
  {
    if( orderOfAccuracyInSpace>=4 )
    {
      if( mg.numberOfDimensions()==2 )
      {
        u(I1,I2,I3,C)+= (e.gd(4,0,0,0,mg,I1,I2,I3,C,t) 
                         - (csq*csq)*(e.gd(0,4,0,0,mg,I1,I2,I3,C,t)
                                      +e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
                                      +2.*e.gd(0,2,2,0,mg,I1,I2,I3,C,t) ) )*dtsqby12;

        // display(u(I1,I2,I3,C),"getForcing: RHS after first assignment","%5.2f ");

      }
      else
      {
        Range C(ex,ez);
        u(I1,I2,I3,C)+=(e.gd(4,0,0,0,mg,I1,I2,I3,C,t) 
                        - (csq*csq)*(e.gd(0,4,0,0,mg,I1,I2,I3,C,t)
                                     +e.gd(0,0,4,0,mg,I1,I2,I3,C,t)
                                     +e.gd(0,0,0,4,mg,I1,I2,I3,C,t)
                                     +2.*(e.gd(0,2,2,0,mg,I1,I2,I3,C,t)
                                          +e.gd(0,2,0,2,mg,I1,I2,I3,C,t)
                                          +e.gd(0,0,2,2,mg,I1,I2,I3,C,t)) ) )*dtsqby12;
      }
    }
	
    if( orderOfAccuracyInSpace>=6 )
    {
      real dt4by360=dt*dt*dt*dt/360.;
	  
      if( mg.numberOfDimensions()==2 )
      {
        if( false )
        {
          display(e.gd(6,0,0,0,mg,I1,I2,I3,hz,t)," exact tttttt",debugFile,"%9.2e ");
          display(e.gd(0,6,0,0,mg,I1,I2,I3,hz,t)," exact xxxxxx",debugFile,"%9.2e ");
          display(e.gd(0,2,4,0,mg,I1,I2,I3,hz,t)," exact xxyyyy",debugFile,"%9.2e ");
          display(e.gd(0,4,2,0,mg,I1,I2,I3,hz,t)," exact xxxxyy",debugFile,"%9.2e ");
          display(e.gd(0,0,6,0,mg,I1,I2,I3,hz,t)," exact yyyyyy",debugFile,"%9.2e ");
        }
		

        u(I1,I2,I3,C)+= (e.gd(6,0,0,0,mg,I1,I2,I3,C,t) 
                         - (csq*csq*csq)*(e.gd(0,6,0,0,mg,I1,I2,I3,C,t)
                                          +e.gd(0,0,6,0,mg,I1,I2,I3,C,t)
                                          +3.*e.gd(0,2,4,0,mg,I1,I2,I3,C,t) 
                                          +3.*e.gd(0,4,2,0,mg,I1,I2,I3,C,t) ) )*dt4by360;
      }
      else
      {
        u(I1,I2,I3,C)+=    (e.gd(6,0,0,0,mg,I1,I2,I3,C,t) 
                            - (csq*csq*csq)*(e.gd(0,6,0,0,mg,I1,I2,I3,C,t)
                                             +e.gd(0,0,6,0,mg,I1,I2,I3,C,t)
                                             +e.gd(0,0,0,6,mg,I1,I2,I3,C,t)
                                             +3.*( e.gd(0,4,2,0,mg,I1,I2,I3,C,t)
                                                   +e.gd(0,2,4,0,mg,I1,I2,I3,C,t)
                                                   +e.gd(0,4,0,2,mg,I1,I2,I3,C,t)
                                                   +e.gd(0,2,0,4,mg,I1,I2,I3,C,t)
                                                   +e.gd(0,0,4,2,mg,I1,I2,I3,C,t)
                                                   +e.gd(0,0,2,4,mg,I1,I2,I3,C,t) )
                                             +6.*e.gd(0,2,2,2,mg,I1,I2,I3,C,t)
                              ) )*dt4by360;
      }
    }
	
	

  }
}


#endMacro

        
// =================================================================================================
// Macro: Get TZ forcing for the BAMX equations
//
// Compute forcing for the equations in this form: 
//     [ Ev ]    =  K0^{-1} [ curl(H) ]  +  fv 
//     [ Hv ]_t             [-culr(E) ] 
// 
// *new* Oct 2019 
// =================================================================================================
#beginMacro getTZForcingBAMX()
  if( t<= 2.*dt )
    printF("--MX-FORCE-- add TZ forcing for BA Maxwell option=%i orderOfAccuracyInSpace=%i\n",option,
                 orderOfAccuracyInSpace);

  const bool isRectangular = false; // ** do this for now ** mg.isRectangular();

  const int domain = cg.domainNumber(grid);
  DispersiveMaterialParameters & dmp = getDomainDispersiveMaterialParameters(domain);
  const DispersiveMaterialParameters::MaterialTypeEnum materialType =  dmp.getMaterialType();


/* ----
  // --- Get the inverse of the BA material matrix ---
  if( !dbase.has_key("K0Inverse") )
  {
    // This must be a single material problem since the the K0Inverse has not been created by defineMaterialRegions
    RealArray & K0i = dbase.put<RealArray>("K0Inverse");
    K0i.redim(6,6,1);

    RealArray K0iTemp;
    dmp.getBianisotropicMaterialMatrixInverse( K0iTemp );
    Range all;
    K0i(all,all,0)=K0iTemp;

  }
  //  K0i(0:5,0:5,0:numMat-1) holds the inverse of the material matrix: 
  RealArray & K0i = dbase.get<RealArray>("K0Inverse");
  --- */

  if( !dbase.has_key("K0") )
  {
    // -- build the K0(6,6,numberOfMaterialRegions) for TZ forcing 

    RealArray & K0 = dbase.put<RealArray>("K0");
    K0.redim(6,6,numberOfMaterialRegions);

    std::vector<DispersiveMaterialParameters> & dmpVector = 
        dbase.get<std::vector<DispersiveMaterialParameters> >("materialRegionParameters");

    printF("get TZ forcing BAMX: numberOfMaterialRegions=%d, dmpVector.size()=%i\n",numberOfMaterialRegions,dmpVector.size());

    RealArray K0Temp;
    for( int mr=0; mr<numberOfMaterialRegions; mr++ )
    {
      DispersiveMaterialParameters & dmp = dmpVector[mr];  
      dmp.getBianisotropicMaterialMatrix( K0Temp );
      K0(all,all,mr)=K0Temp;
    }
    ::display(K0,"get TZ forcing BAMX: combined Material matrix K0(*,*,*):","%5.2f ");
    
  }
  RealArray & K0 = dbase.get<RealArray>("K0");


  if( option==1 )
  {
    uLocal(I1,I2,I3,C)=0.;
  }
  Range E(ex,ex+numberOfDimensions-1); // electric field components
  RealArray ut(I1,I2,I3,C), ux(I1,I2,I3,C), uy(I1,I2,I3,C);
	  
  e.gd( ut ,xLocal,numberOfDimensions,isRectangular,1,0,0,0,I1,I2,I3,C,t);
  e.gd( ux ,xLocal,numberOfDimensions,isRectangular,0,1,0,0,I1,I2,I3,C,t);
  e.gd( uy ,xLocal,numberOfDimensions,isRectangular,0,0,1,0,I1,I2,I3,C,t);


  if( numberOfDimensions==2 )
  {
    // eps* u_t = w_y       + f1
    // eps* v_t = - w_x     + f2
    //  mu* w_t = u_y - v_x + f3 

    // --OR-- 
    //  u_t = w_y/eps        + f1
    //  v_t = - w_x/eps      + f2
    //  w_t = (u_y - v_x)/mu + f3 
    if( materialType==DispersiveMaterialParameters::isotropic )
    {
      uLocal(I1,I2,I3,ex) += ut(I1,I2,I3,ex) - (1./eps)*uy(I1,I2,I3,hz);
      uLocal(I1,I2,I3,ey) += ut(I1,I2,I3,ey) + (1./eps)*ux(I1,I2,I3,hz);
      uLocal(I1,I2,I3,hz) += ut(I1,I2,I3,hz) + (1./mu)*( ux(I1,I2,I3,ey) - uy(I1,I2,I3,ex) );
      if( solveForAllFields )
      {
	uLocal(I1,I2,I3,ez) += ut(I1,I2,I3,ez) - (1./eps)*( ux(I1,I2,I3,hy) - uy(I1,I2,I3,hx) );
	uLocal(I1,I2,I3,hx) += ut(I1,I2,I3,hx) + (1./mu )*uy(I1,I2,I3,ez);
	uLocal(I1,I2,I3,hy) += ut(I1,I2,I3,hy) - (1./mu )*ux(I1,I2,I3,ez);
      }
    }
    else
    {
      // BI-ANISOTROPIC MATERIAL
      if( solveForAllFields )
      {
        // Form curl(H) , -curl(E) 
	RealArray curl[6];
        curl[0] =   uy(I1,I2,I3,hz);
        curl[1] =  -ux(I1,I2,I3,hz);
        curl[2] = ( ux(I1,I2,I3,hy) - uy(I1,I2,I3,hx) );
        curl[3] =  -uy(I1,I2,I3,ez);
        curl[4] =   ux(I1,I2,I3,ez);
        curl[5] =-( ux(I1,I2,I3,ey) - uy(I1,I2,I3,ex) );
	if( numberOfMaterialRegions==1 )
	{
	  for( int m=0; m<6; m++ )
	  {
	    // uLocal(I1,I2,I3,m) += ut(I1,I2,I3,m) -(
	    //   K0i(m,0,0)*curl[0] + K0i(m,1,0)*curl[1] + K0i(m,2,0)*curl[2] +
	    //   K0i(m,3,0)*curl[3] + K0i(m,4,0)*curl[4] + K0i(m,5,0)*curl[5] );
	    uLocal(I1,I2,I3,m) += (
	      K0(m,0,0)*ut(I1,I2,I3,0) + K0(m,1,0)*ut(I1,I2,I3,1) + K0(m,2,0)*ut(I1,I2,I3,2) +
	      K0(m,3,0)*ut(I1,I2,I3,3) + K0(m,4,0)*ut(I1,I2,I3,4) + K0(m,5,0)*ut(I1,I2,I3,5) ) - curl[m];
	  }
	}
	else
	{
          // --- multiple material regions ---
          intCompositeGridFunction & materialMask = parameters.dbase.get<intCompositeGridFunction>("materialMask");
          OV_GET_SERIAL_ARRAY(int,materialMask[grid],matMask);
	  // assert( pBodyMask!=NULL );
	  // IntegerArray & matMask = *pBodyMask;
	  int i1,i2,i3;
	  FOR_3D(i1,i2,i3,I1,I2,I3)
	  {
	    const int mr = matMask(i1,i2,i3);
	    assert( mr>=0 && mr<numberOfMaterialRegions );  // ** eventually remove this **
	      
	    for( int m=0; m<6; m++ )
	    {
	      // uLocal(i1,i2,i3,m) += ut(i1,i2,i3,m) -(
	      // 	K0i(m,0,mr)*curl[0](i1,i2,i3) + K0i(m,1,mr)*curl[1](i1,i2,i3) + K0i(m,2,mr)*curl[2](i1,i2,i3) +
	      // 	K0i(m,3,mr)*curl[3](i1,i2,i3) + K0i(m,4,mr)*curl[4](i1,i2,i3) + K0i(m,5,mr)*curl[5](i1,i2,i3) );

	      uLocal(i1,i2,i3,m) += (
		K0(m,0,mr)*ut(i1,i2,i3,0) + K0(m,1,mr)*ut(i1,i2,i3,1) + K0(m,2,mr)*ut(i1,i2,i3,2) +
		K0(m,3,mr)*ut(i1,i2,i3,3) + K0(m,4,mr)*ut(i1,i2,i3,4) + K0(m,5,mr)*ut(i1,i2,i3,5) ) - curl[m](i1,i2,i3);

	    }
	  }
	}
	
      }
      else
      {
        
	// 3x3 Material matrix for TEz polarization
	// We use ex=0,ey=1 and hz=5 entries in K0(0:5,0:5) 
        Range M=numberOfMaterialRegions;
	RealArray K0p(3,3,numberOfMaterialRegions);
	K0p(0,0,M) = K0(0,0,M); K0p(0,1,M) = K0(0,1,M); K0p(0,2,M) = K0(0,5,M);
	K0p(1,0,M) = K0(1,0,M); K0p(1,1,M) = K0(1,1,M); K0p(1,2,M) = K0(1,5,M);
	K0p(2,0,M) = K0(5,0,M); K0p(2,1,M) = K0(5,1,M); K0p(2,2,M) = K0(5,5,M);

	RealArray curl[3];
        curl[0] =  uy(I1,I2,I3,hz);
        curl[1] = -ux(I1,I2,I3,hz);
        //curl[2] = ( ux(I1,I2,I3,hy) - uy(I1,I2,I3,hx) );
        //curl[3] = -uy(I1,I2,I3,ez);
        //curl[4] =  ux(I1,I2,I3,ez);
        curl[2] =-( ux(I1,I2,I3,ey) - uy(I1,I2,I3,ex) );
	if( numberOfMaterialRegions==1 )
	{
	  for( int m=0; m<3; m++ )
	  {
	    // uLocal(I1,I2,I3,m) += ut(I1,I2,I3,m) -(
	    //   Ki(m,0,0)*curl[0] + Ki(m,1,0)*curl[1] + Ki(m,2,0)*curl[2] );

	    uLocal(I1,I2,I3,m) += ( K0p(m,0,0)*ut(I1,I2,I3,0) + K0p(m,1,0)*ut(I1,I2,I3,1) + K0p(m,2,0)*ut(I1,I2,I3,2) )
	                          - curl[m];

	  }
	}
	else
	{
          // --- multiple material regions ---
          intCompositeGridFunction & materialMask = parameters.dbase.get<intCompositeGridFunction>("materialMask");
          OV_GET_SERIAL_ARRAY(int,materialMask[grid],matMask);
	  // assert( pBodyMask!=NULL );
	  // IntegerArray & matMask = *pBodyMask;
	  int i1,i2,i3;
	  FOR_3D(i1,i2,i3,I1,I2,I3)
	  {
            const int mr = matMask(i1,i2,i3);
            assert( mr>=0 && mr<numberOfMaterialRegions ); // ** eventually remove this **

	    for( int m=0; m<3; m++ )
	    {
	      // uLocal(i1,i2,i3,m) += ut(i1,i2,i3,m) -(
	      //	Ki(m,0,mr)*curl[0](i1,i2,i3) + Ki(m,1,mr)*curl[1](i1,i2,i3) + Ki(m,2,mr)*curl[2](i1,i2,i3) );

	      uLocal(i1,i2,i3,m) += ( K0p(m,0,mr)*ut(i1,i2,i3,0) + K0p(m,1,mr)*ut(i1,i2,i3,1) + K0p(m,2,mr)*ut(i1,i2,i3,2) )
		                   - curl[m](i1,i2,i3);


	    }
	  }
	}
	


      }
	


    }
    
    if( timeSteppingMethod == modifiedEquationTimeStepping  )
    {
      // add correction for the Taylor time-stepping

      assert( numberOfMaterialRegions==1 );  // FIX me 

      RealArray utt(I1,I2,I3,C), uxx(I1,I2,I3,C), uyy(I1,I2,I3,C);
      e.gd( utt ,xLocal,numberOfDimensions,isRectangular,2,0,0,0,I1,I2,I3,C,t);
      e.gd( uxx ,xLocal,numberOfDimensions,isRectangular,0,2,0,0,I1,I2,I3,C,t);
      e.gd( uyy ,xLocal,numberOfDimensions,isRectangular,0,0,2,0,I1,I2,I3,C,t);

      uLocal(I1,I2,I3,C) += (.5*dt)*utt - (.5*dt*csq)*( uxx+uyy );

      if( orderOfAccuracyInSpace>=4 )
      {
        
        const real csq2=csq*csq;

        RealArray & uttt = utt, & uxxy = uxx, & uyyy = uyy;  // resuse 
        RealArray uxxx(I1,I2,I3,C), uxyy(I1,I2,I3,C);
        e.gd( uttt ,xLocal,numberOfDimensions,isRectangular,3,0,0,0,I1,I2,I3,C,t);
        e.gd( uxxx ,xLocal,numberOfDimensions,isRectangular,0,3,0,0,I1,I2,I3,C,t);
        e.gd( uxxy ,xLocal,numberOfDimensions,isRectangular,0,2,1,0,I1,I2,I3,C,t);
        e.gd( uxyy ,xLocal,numberOfDimensions,isRectangular,0,1,2,0,I1,I2,I3,C,t);
        e.gd( uyyy ,xLocal,numberOfDimensions,isRectangular,0,0,3,0,I1,I2,I3,C,t);

        uLocal(I1,I2,I3,ex) += (dt*dt/6.)*( uttt(I1,I2,I3,ex)  -  (csq/eps)*( uxxy(I1,I2,I3,hz) + uyyy(I1,I2,I3,hz) ) );
        uLocal(I1,I2,I3,ey) += (dt*dt/6.)*( uttt(I1,I2,I3,ey)  +  (csq/eps)*( uxxx(I1,I2,I3,hz) + uxyy(I1,I2,I3,hz) ) );
        uLocal(I1,I2,I3,hz) += (dt*dt/6.)*( uttt(I1,I2,I3,hz)
                 +  (csq/mu)*( (uxxx(I1,I2,I3,ey) + uxyy(I1,I2,I3,ey)) - (uxxy(I1,I2,I3,ex) + uyyy(I1,I2,I3,ex)) ) );

	if( solveForAllFields )
	{
	  uLocal(I1,I2,I3,hx) += (dt*dt/6.)*( uttt(I1,I2,I3,hx)  +  (csq/mu )*( uxxy(I1,I2,I3,ez) + uyyy(I1,I2,I3,ez) ) );
	  uLocal(I1,I2,I3,hy) += (dt*dt/6.)*( uttt(I1,I2,I3,hy)  -  (csq/mu )*( uxxx(I1,I2,I3,ez) + uxyy(I1,I2,I3,ez) ) );
	  uLocal(I1,I2,I3,ez) += (dt*dt/6.)*( uttt(I1,I2,I3,ez)
  	      -  (csq/eps)*( (uxxx(I1,I2,I3,hy) + uxyy(I1,I2,I3,hy)) - (uxxy(I1,I2,I3,hx) + uyyy(I1,I2,I3,hx)) ) );

	}

        RealArray & utttt = utt, & uxxxx = uxx, & uyyyy = uyy, & uxxyy = uxxx;
	  
        e.gd( utttt ,xLocal,numberOfDimensions,isRectangular,4,0,0,0,I1,I2,I3,C,t);
        e.gd( uxxxx ,xLocal,numberOfDimensions,isRectangular,0,4,0,0,I1,I2,I3,C,t);
        e.gd( uxxyy ,xLocal,numberOfDimensions,isRectangular,0,2,2,0,I1,I2,I3,C,t);
        e.gd( uyyyy ,xLocal,numberOfDimensions,isRectangular,0,0,4,0,I1,I2,I3,C,t);
        e.gd( uyyyy ,xLocal,numberOfDimensions,isRectangular,0,0,4,0,I1,I2,I3,C,t);

        uLocal(I1,I2,I3,C) += (dt*dt*dt/24.)*( utttt - (csq*csq)*( uxxxx + 2.*uxxyy + uyyyy ) );

      }
    


    }
    
  }
  else
  {
    // ************* THREE DIMENSIONS **************

    RealArray uz(I1,I2,I3,C);
    e.gd( uz ,xLocal,numberOfDimensions,isRectangular,0,0,0,1,I1,I2,I3,C,t);

    // Form curl(H) , -curl(E) 
    RealArray curl[6];
    curl[0] =  uy(I1,I2,I3,hz)-uz(I1,I2,I3,hy);
    curl[1] =  uz(I1,I2,I3,hx)-ux(I1,I2,I3,hz);
    curl[2] =  ux(I1,I2,I3,hy)-uy(I1,I2,I3,hx);
    curl[3] =-(uy(I1,I2,I3,ez)-uz(I1,I2,I3,ey));
    curl[4] =-(uz(I1,I2,I3,ex)-ux(I1,I2,I3,ez)); 
    curl[5] =-(ux(I1,I2,I3,ey)-uy(I1,I2,I3,ex));

    if( materialType==DispersiveMaterialParameters::isotropic )
    {
      uLocal(I1,I2,I3,ex) += ut(I1,I2,I3,ex) - (1./eps)*curl[0];
      uLocal(I1,I2,I3,ey) += ut(I1,I2,I3,ey) - (1./eps)*curl[1];
      uLocal(I1,I2,I3,hz) += ut(I1,I2,I3,hz) - (1./mu )*curl[2];
      if( solveForAllFields )
      {
	uLocal(I1,I2,I3,ez) += ut(I1,I2,I3,ez) - (1./eps)*curl[3];
	uLocal(I1,I2,I3,hx) += ut(I1,I2,I3,hx) - (1./mu )*curl[4];
	uLocal(I1,I2,I3,hy) += ut(I1,I2,I3,hy) - (1./mu )*curl[5];
      }
    }
    else
    {
      // BI-ANISOTROPIC MATERIAL
      if( numberOfMaterialRegions==1 )
      {
        for( int m=0; m<6; m++ )
        {
          // uLocal(I1,I2,I3,m) += ut(I1,I2,I3,m) -(
          //   K0i(m,0,0)*curl[0] + K0i(m,1,0)*curl[1] + K0i(m,2,0)*curl[2] +
          //   K0i(m,3,0)*curl[3] + K0i(m,4,0)*curl[4] + K0i(m,5,0)*curl[5] );
	  uLocal(I1,I2,I3,m) += (
	    K0(m,0,0)*ut(I1,I2,I3,0) + K0(m,1,0)*ut(I1,I2,I3,1) + K0(m,2,0)*ut(I1,I2,I3,2) +
	    K0(m,3,0)*ut(I1,I2,I3,3) + K0(m,4,0)*ut(I1,I2,I3,4) + K0(m,5,0)*ut(I1,I2,I3,5) ) - curl[m];

        }
      }
      else
      {
        // --- multiple material regions ---
        intCompositeGridFunction & materialMask = parameters.dbase.get<intCompositeGridFunction>("materialMask");
        OV_GET_SERIAL_ARRAY(int,materialMask[grid],matMask);
        // assert( pBodyMask!=NULL );
        // IntegerArray & matMask = *pBodyMask;
        int i1,i2,i3;
        FOR_3D(i1,i2,i3,I1,I2,I3)
        {
	  const int mr = matMask(i1,i2,i3);
	  assert( mr>=0 && mr<numberOfMaterialRegions );  // ** eventually remove this **
          for( int m=0; m<6; m++ )
          {
	      
            // uLocal(i1,i2,i3,m) += ut(i1,i2,i3,m) -(
            //   K0i(m,0,mr)*curl[0](i1,i2,i3) + K0i(m,1,mr)*curl[1](i1,i2,i3) + K0i(m,2,mr)*curl[2](i1,i2,i3) +
            //   K0i(m,3,mr)*curl[3](i1,i2,i3) + K0i(m,4,mr)*curl[4](i1,i2,i3) + K0i(m,5,mr)*curl[5](i1,i2,i3) );
	    uLocal(i1,i2,i3,m) += (
	      K0(m,0,mr)*ut(i1,i2,i3,0) + K0(m,1,mr)*ut(i1,i2,i3,1) + K0(m,2,mr)*ut(i1,i2,i3,2) +
	      K0(m,3,mr)*ut(i1,i2,i3,3) + K0(m,4,mr)*ut(i1,i2,i3,4) + K0(m,5,mr)*ut(i1,i2,i3,5) ) - curl[m](i1,i2,i3);

          }
        }
      }
	
    }
    
    if( timeSteppingMethod == modifiedEquationTimeStepping  )
    {
      // add correction for the Taylor time-stepping
      OV_ABORT("finish me");
    }

  }

  // ** NO: TZ forcing for the dispersive BA model is done in advBA.bf 
//  if( dispersionModel != noDispersion )
//  {
//
//    // total number of polarization components per grid 
//    const IntegerArray & totalNumberOfPolarizationComponents =
//      parameters.dbase.get<IntegerArray>("totalNumberOfPolarizationComponents");
//
//    const int & maxNumberOfPolarizationComponents = parameters.dbase.get<int>("maxNumberOfPolarizationComponents");
//
//    assert( grid==0 );  // fix me 
//    const int numPolarizationTerms=totalNumberOfPolarizationComponents(grid)*2;
//    
//    // -- Evaluate P and Q and P.t and Q.t 
//    int pcStart=hz+1, pcEnd=pcStart+numPolarizationTerms-1;
//    Range P(pcStart,pcEnd);  // tz locations for P and Q
//    RealArray pe(I1,I2,I3,P), pet(I1,I2,I3,P);
//	  
//    e.gd( pe  ,xLocal,numberOfDimensions,isRectangular,0,0,0,0,I1,I2,I3,P,t);
//    e.gd( pet ,xLocal,numberOfDimensions,isRectangular,1,0,0,0,I1,I2,I3,P,t);
//
//    RealArray ue(I1,I2,I3,C);
//    e.gd( ue,xLocal,numberOfDimensions,isRectangular,0,0,0,0,I1,I2,I3,C,t);
//
//    std::vector<DispersiveMaterialParameters> & dmpVector = 
//      dbase.get<std::vector<DispersiveMaterialParameters> >("materialRegionParameters");
//
//    assert( numberOfMaterialRegions==1 );  // ** fix me **
//    int mr=0;
//      
//    DispersiveMaterialParameters & dmp = dmpVector[0]; 
//
//    const IntegerArray & Np = dmp.getBianisotropicNp();
//    const RealArray & biPar = dmp.getBianisotropicGDMParameters();
//
//    assert( solveForAllFields ); // fix me 
//    
//    int m=0;  // counts polarization components 
//    for( int k1=0; k1<6; k1++ )
//    {
//      int ec = k1;  // E or H component 
//      for( int k2=0; k2<6; k2++ )
//      {
//	assert( Np(k1,k2)>=0 );
//
//	for( int n=0; n<Np(k1,k2); n++ )
//	{
//          const real a0 = biPar(0,n,k1,k2), a1 = biPar(1,n,k1,k2), b0 = biPar(2,n,k1,k2), b1 = biPar(3,n,k1,k2);
//
//          const int pc = hz + m +1, qc=pc+1; // TZ locations for P and Q 
//          // const int pc = m;
//	  // const int qc = m+1;
//
//	  printF("BA-GM forcing: m=%d k1=%d k2=%d n=%d pc=%d [a0,a1,b0,b1]=[%9.2e,%9.2e,%9.2e,%9.2e]\n",
//		 m,k1,k2,n,pc,a0,a1,b0,b1);
//
//	  assert( qc<= uLocal.getBound(3) );
//
//          // p.t = q 
//          uLocal(I1,I2,I3,pc) += pet(I1,I2,I3,pc) - pe(I1,I2,I3,qc); 
//	  
//          // q.t = a0*E + a1*Et - b0*P - b1*Q 
//          uLocal(I1,I2,I3,qc) += pet(I1,I2,I3,qc) - a0*ue(I1,I2,I3,ec) - a1*ut(I1,I2,I3,ec)
//                                                  + b0*pe(I1,I2,I3,pc) + b1*pe(I1,I2,I3,qc);
//	  
//	  m+=2;
//	  
//	}
//      }
//    }
//    assert( m==maxNumberOfPolarizationComponents*2 ); // sanity check 
//      
//
//
//  }

  
#endMacro 


// ==============================================================================================================
// Macro: gaussianSourceForcing
//    Assign the gaussian source forcing 
// ==============================================================================================================
#beginMacro gaussianSourceForcing()
{
  const realArray & f = u;  // do this for now

  const intArray & mask = mg.mask();
  
  realArray & x = isRectangular ? u : mg.center();
  realArray & rx = isRectangular ? u : mg.inverseVertexDerivative();

 #ifdef USE_PPP
  const realSerialArray & uLocal  =  u.getLocalArrayWithGhostBoundaries();
  const realSerialArray & fLocal  =  f.getLocalArrayWithGhostBoundaries();
  const realSerialArray & rxLocal = rx.getLocalArrayWithGhostBoundaries();
  const intSerialArray & maskLocal  =  mask.getLocalArrayWithGhostBoundaries();
 #else
  const realSerialArray & uLocal  =  u;
  const realSerialArray & fLocal  =  f;
  const realSerialArray & rxLocal = rx; 
  const intSerialArray & maskLocal  =  mask; 
 #endif

  real *uptr = uLocal.getDataPointer();
  real *fptr = fLocal.getDataPointer();
  real *xptr = xLocal.getDataPointer();
  real *rxptr = rxLocal.getDataPointer();
  int *maskptr = maskLocal.getDataPointer();

  if( option==1 )
  {
    realSerialArray & fnc = (realSerialArray&)fLocal; // cast away const
	fnc=0.;  // the forcing function always adds a contribution to f
  }
  

  // int ngcs=0;
  // real amplitude=gaussianChargeSourceParameters[ngcs][0];
  // real beta     =gaussianChargeSourceParameters[ngcs][1];
  // real p        =gaussianChargeSourceParameters[ngcs][2];
  // real xp0      =gaussianChargeSourceParameters[ngcs][3];
  // real xp1      =gaussianChargeSourceParameters[ngcs][4];
  // real xp2      =gaussianChargeSourceParameters[ngcs][5];
  // real vp0      =gaussianChargeSourceParameters[ngcs][6];
  // real vp1      =gaussianChargeSourceParameters[ngcs][7];
  // real vp2      =gaussianChargeSourceParameters[ngcs][8];

  real amplitude= gaussianSourceParameters[5];
  real rampTime = gaussianSourceParameters[6];
  
  real p=2;
  real xp0=x0;
  real xp1=y0;
  real xp2=z0;
  real vp0=0, vp1=0, vp2=0;


  J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
  J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
  J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));

  int gridType = isRectangular? 0 : 1;
  int useForcing=1;
  int useWhereMask=1;
  int orderOfExtrapolation=orderOfAccuracyInSpace+1;
  
  real ep=0;   // pointer to TZ function -- not used yet
  
  int ipar[30];
  real rpar[30];
  
  ipar[0] =J1.getBase(); 
  ipar[1] =J1.getBound(); 
  ipar[2] =J2.getBase(); 
  ipar[3] =J2.getBound();
  ipar[4] =J3.getBase();
  ipar[5] =J3.getBound();
  
  ipar[6] =gridType;
  ipar[7] =orderOfAccuracyInSpace;
  ipar[8] =orderOfAccuracyInTime;
  ipar[9] =orderOfExtrapolation;
  ipar[10]=useForcing;
  ipar[11]=ex;
  ipar[12]=ey;
  ipar[13]=ez;
  ipar[14]=hx;
  ipar[15]=hy;
  ipar[16]=hz;
  ipar[17]=useWhereMask;
  ipar[18]=grid;
  ipar[19]=debug;
  ipar[20]=forcingOption;
  ipar[21]=method;

  rpar[0] =dx[0];
  rpar[1] =dx[1];
  rpar[2] =dx[2];
  rpar[3] =mg.gridSpacing(0);
  rpar[4] =mg.gridSpacing(1);
  rpar[5] =mg.gridSpacing(2);
  rpar[6] =t;
  rpar[7] =ep;
  rpar[8] =dt;
  rpar[9] =c;
  rpar[10]=eps;
  rpar[11]=mu;
  rpar[12]=kx;
  rpar[13]=ky;
  rpar[14]=kz;
  rpar[15]=slowStartInterval;
  rpar[16]=xab[0][0];
  rpar[17]=xab[0][1];
  rpar[18]=xab[0][2];
  rpar[19]=amplitude;
  rpar[20]=beta;
  rpar[21]=p;   
  rpar[22]=xp0;
  rpar[23]=xp1;
  rpar[24]=xp2;
  rpar[25]=vp0;
  rpar[26]=vp1;
  rpar[27]=vp2;
  rpar[28]=omega;
  rpar[29]=rampTime;


  int ierr=0;

  forcingOptMaxwell( mg.numberOfDimensions(),
                     uLocal.getBase(0),uLocal.getBound(0),uLocal.getBase(1),uLocal.getBound(1),
			 uLocal.getBase(2),uLocal.getBound(2),
                     fLocal.getBase(0),fLocal.getBound(0),fLocal.getBase(1),fLocal.getBound(1),
			 fLocal.getBase(2),fLocal.getBound(2),
			 *uptr,*fptr,*maskptr,*rxptr, *xptr,
                     ipar[0], rpar[0], ierr );
  
}

#endMacro



int Maxwell::
getForcing(int current, int grid, realArray & u , real t, real dt, int option /* = 0 */ )
// ========================================================================================
//
//  Add the forcing:
//
// option==0 : add forcing to u
//     u+=   utt - c^2*Lap(u)
// option==1 : fill in u with the forcing
//     u =   utt - c^2*Lap(u) 
//
// kkc
// option==2 : u is h field and use += ( ==0 is efield )
// option==3 : u is h field and use == ( ==1 is efield )
// ========================================================================================
{
  // Just return if there is no forcing
  bool computeForcing = forcingIsOn();
  
  // bool computeForcing = (forcingOption==twilightZoneForcing || 
  // 			 forcingOption==gaussianSource ||
  // 			 forcingOption==magneticSinusoidalPointSource ||
  //                        forcingOption==gaussianChargeSource||
  //                        forcingOption==userDefinedForcingOption );
  
  // printF("getForcing: t=%9.3e, forcingOption=%d\n",t,(int)forcingOption);
  

  if( !computeForcing )
    return 0;
  
  // real time0=getCPU();

  if( forcingOption==userDefinedForcingOption )
  {
    // -- Compute user defined forcing ---

    int iparam[]={grid,current};  //
    real rparam[]={t,dt};  //
    if( option==1 )
      assign(u,0.); // user defined forcing only knows option==0
    userDefinedForcing( u,iparam,rparam );

    return 0;
  }


  assert( cgp!=NULL );
  CompositeGrid & cg = *cgp;
  const int numberOfComponentGrids = cg.numberOfComponentGrids();

  const int prev = (current-1+numberOfTimeLevels) % numberOfTimeLevels;
  const int next = (current+1) % numberOfTimeLevels;

  const int numberOfDimensions = cg.numberOfDimensions();
  const int & solveForAllFields = dbase.get<int>("solveForAllFields");

  // bpp macro
  EXTRACT_GFP(FORCING);

  Index J1,J2,J3;
  int extra=0;  // evaluate forcing on this many ghost points
  if( method==sosup ) 
    extra = orderOfAccuracyInSpace/2;  // sosup needs forcing on extra ghost lines


  if( forcingOption==twilightZoneForcing || forcingOption==gaussianSource ||
      forcingOption==gaussianChargeSource )
  {
    
    // we always need the center array for TZ forcing, otherwise not needed for rectangular grids:
    realArray & x = (isRectangular && forcingOption!=twilightZoneForcing) ? u : mg.center();

    OV_GET_SERIAL_ARRAY(real,u,uLocal);
    OV_GET_SERIAL_ARRAY(real,x,xLocal);

    real *up = uLocal.Array_Descriptor.Array_View_Pointer3;
    const int uDim0=uLocal.getRawDataSize(0);
    const int uDim1=uLocal.getRawDataSize(1);
    const int uDim2=uLocal.getRawDataSize(2);
#undef U
#define U(i0,i1,i2,i3) up[i0+uDim0*(i1+uDim1*(i2+uDim2*(i3)))]

    //      real *xp = xLocal.Array_Descriptor.Array_View_Pointer3;
    //       const int xDim0=xLocal.getRawDataSize(0);
    //       const int xDim1=xLocal.getRawDataSize(1);
    //       const int xDim2=xLocal.getRawDataSize(2);
    //       #undef X
    //       #define X(i0,i1,i2,i3) xp[i0+xDim0*(i1+xDim1*(i2+xDim2*(i3)))]

    Index I1,I2,I3;

    getIndex(mg.gridIndexRange(),I1,I2,I3,extra);
    // For working with local arrays (parallel):
    Index J1,J2,J3;

    // const realArray & x = mg.center();
    // Range all;
    // const bool isRectangular = mg.isRectangular();

    if( forcingOption==twilightZoneForcing )
    {
      assert( tz!=NULL );
      OGFunction & e = *tz;

      const real csq=c*c;
      const real dtsqby12=dt*dt/12.;

      Range C(ex,hz);
      const int ntd=2, nxd=0, nyd=0, nzd=0; // we need the 2nd time derivative


      bool useScalarLoops=false;
#ifdef USE_PPP
      useScalarLoops=true;
#endif 

      if( method==bamx )
      {
        getTZForcingBAMX();
      }
      else
      {
        getTZForcing();
      }

    }
    else if( forcingOption==gaussianSource )
    {
      const real beta =gaussianSourceParameters[0];
      const real omega=gaussianSourceParameters[1];
      const real x0   =gaussianSourceParameters[2];
      const real y0   =gaussianSourceParameters[3];
      const real z0   =gaussianSourceParameters[4];

      bool useOptGaussianSource=  method==nfdtd || method==bamx;
      if( useOptGaussianSource )
      {
	// --- Optimized version -- July 4, 2020
        // NOTE: new scaling for source terms
        gaussianSourceForcing();
      }
      else
      {
	// *** old way 

	//  f3(x,t) = sin(2*pi*omega*t)*exp( -beta*( |x-x0|^2 ) )

	const realArray & x = mg.center();

	const real t0=0.; // .25;
	const real ctE=cos(2.*Pi*omega*(tE-t0));
	const real stE=sin(2.*Pi*omega*(tE-t0));
	const real ctH=cos(2.*Pi*omega*(tH-t0));
	const real stH=sin(2.*Pi*omega*(tH-t0));

	const bool isRectangular = mg.isRectangular();

	if( debug & 4 )
	  printF(" addForcing:gaussianSource: beta=%8.2e omega=%8.2e x0=(%8.2e,%8.2e,%8.2e) \n",
		 beta,omega,x0,y0,z0);

	if( !isRectangular )
	{
      
	  realSerialArray f3E(Ie1,Ie2,Ie3),f3H(Ih1,Ih2,Ih3);

	  if( mg.numberOfDimensions()==2 )
	  {
	    f3H=exp( -beta*( SQR(xh(Ih1,Ih2,Ih3)-x0)+SQR(yh(Ih1,Ih2,Ih3)-y0) ) );
	    f3E=exp( -beta*( SQR(xe(Ie1,Ie2,Ie3)-x0)+SQR(ye(Ie1,Ie2,Ie3)-y0) ) );

	    if( option==0 )
	    {
	      uLocal(Ih1,Ih2,Ih3,hz)+=( 2.*Pi*omega*ctH)*f3H;
	      uLocal(Ie1,Ie2,Ie3,ex)+=(-2.*beta*stE)*(ye(Ie1,Ie2,Ie3)-y0)*f3E;
	      uLocal(Ie1,Ie2,Ie3,ey)+=( 2.*beta*stE)*(xe(Ie1,Ie2,Ie3)-x0)*f3E;
	    }
	    else
	    {
	      uLocal(Ih1,Ih2,Ih3,hz)=( 2.*Pi*omega*ctH)*f3H;
	      uLocal(Ie1,Ie2,Ie3,ex)=(-2.*beta*stE)*(ye(Ie1,Ie2,Ie3)-y0)*f3E;
	      uLocal(Ie1,Ie2,Ie3,ey)=( 2.*beta*stE)*(xe(Ie1,Ie2,Ie3)-x0)*f3E;
	      if( solveForAllFields )
	      {
		uLocal(Ie1,Ie2,Ie3,ez)=0.;
		uLocal(Ih1,Ih2,Ih3,hx)=0.;
		uLocal(Ih1,Ih2,Ih3,hy)=0.;
	      }
	    }
          
// 	    if( option==0 )
// 	    {
// 	      u(I1,I2,I3,hz)+=( 2.*Pi*omega*ct)*f3;
// 	      u(I1,I2,I3,ex)+=(-2.*beta*st)*(x(I1,I2,I3,1)-y0)*f3;
// 	      u(I1,I2,I3,ey)+=( 2.*beta*st)*(x(I1,I2,I3,0)-x0)*f3;
// 	    }
// 	    else
// 	    {
// 	      u(I1,I2,I3,hz)=( 2.*Pi*omega*ct)*f3;
// 	      u(I1,I2,I3,ex)=(-2.*beta*st)*(x(I1,I2,I3,1)-y0)*f3;
// 	      u(I1,I2,I3,ey)=( 2.*beta*st)*(x(I1,I2,I3,0)-x0)*f3;
// 	    }
	  }
	  else // *** 3D ***
	  {
	    // scale by beta*beta to make O(1)
	    f3E(I1,I2,I3)=(beta*beta*ctE)*exp( -beta*( SQR(xe(I1,I2,I3)-x0)+SQR(ye(I1,I2,I3)-y0)+SQR(ze(I1,I2,I3)-z0) ) );
	    if( option==0 )
	    {
	      uLocal(I1,I2,I3,ex)+=( (ze(I1,I2,I3)-z0)-(ye(I1,I2,I3)-y0) )*f3E(I1,I2,I3);
	      uLocal(I1,I2,I3,ey)+=( (xe(I1,I2,I3)-x0)-(ze(I1,I2,I3)-z0) )*f3E(I1,I2,I3);
	      uLocal(I1,I2,I3,ez)+=( (ye(I1,I2,I3)-y0)-(xe(I1,I2,I3)-x0) )*f3E(I1,I2,I3);
	    }
	    else
	    {
	      uLocal(I1,I2,I3,ex)=( (ze(I1,I2,I3)-z0)-(ye(I1,I2,I3)-y0) )*f3E(I1,I2,I3);
	      uLocal(I1,I2,I3,ey)=( (xe(I1,I2,I3)-x0)-(ze(I1,I2,I3)-z0) )*f3E(I1,I2,I3);
	      uLocal(I1,I2,I3,ez)=( (ye(I1,I2,I3)-y0)-(xe(I1,I2,I3)-x0) )*f3E(I1,I2,I3);
	      if( method==bamx )
	      {
		uLocal(I1,I2,I3,hx)= 0.;
		uLocal(I1,I2,I3,hy)= 0.;
		uLocal(I1,I2,I3,hz)= 0.; 
	      }
	    }
          
	  }
	  
	}
	else
	{
	  real dx[3],xab[2][3];
	  mg.getRectangularGridParameters( dx, xab );

	  const int i0a=mg.gridIndexRange(0,0);
	  const int i1a=mg.gridIndexRange(0,1);
	  const int i2a=mg.gridIndexRange(0,2);

	  const real xa=xab[0][0], dx0=dx[0];
	  const real ya=xab[0][1], dy0=dx[1];
	  const real za=xab[0][2], dz0=dx[2];
	
#define X0(i0,i1,i2) (xa+dx0*(i0-i0a))
#define X1(i0,i1,i2) (ya+dy0*(i1-i1a))
#define X2(i0,i1,i2) (za+dz0*(i2-i2a))

	  int i1,i2,i3;
	  real xd,yd,zd,f3;
	  Index J1,J2,J3;
	  if( mg.numberOfDimensions()==2 )
	  {
	    if( option==0 )
	    {
	      //XXX not fully implemented for staggered schemes yet!
	      J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	      J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	      J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	      FOR_3D(i1,i2,i3,J1,J2,J3)
	      {
		xd=X0(i1,i2,i3)-x0;
		yd=X1(i1,i2,i3)-y0;
	    
		f3=exp( -beta*( xd*xd+yd*yd ) );
		U(i1,i2,i3,hz)+=( 2.*Pi*omega*ctH)*f3;
		U(i1,i2,i3,ex)+=(-2.*beta*stE)*yd*f3;
		U(i1,i2,i3,ey)+=( 2.*beta*stE)*xd*f3;
	      }
	    }
	    else
	    {
	      J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	      J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	      J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	      FOR_3D(i1,i2,i3,J1,J2,J3)
	      {
		xd=X0(i1,i2,i3)-x0;
		yd=X1(i1,i2,i3)-y0;
	    
		f3=exp( -beta*( xd*xd+yd*yd ) );
		U(i1,i2,i3,hz)=( 2.*Pi*omega*ctH)*f3;
		U(i1,i2,i3,ex)=(-2.*beta*stE)*yd*f3;
		U(i1,i2,i3,ey)=( 2.*beta*stE)*xd*f3;
		if( solveForAllFields )
		{
		  U(i1,i2,i3,ez)=0.;
		  U(i1,i2,i3,hx)=0.;
		  U(i1,i2,i3,hy)=0.;
		}

	      }
	  
	    }
	  }
	  else // 3D
	  {
	    // scale by beta*beta to make O(1)
	    J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
	    J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
	    J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));
	    real betaSqct=beta*beta*ctE;
	    if( option==0 )
	    {
	      FOR_3D(i1,i2,i3,J1,J2,J3)
	      {
		xd=X0(i1,i2,i3)-x0;
		yd=X1(i1,i2,i3)-y0;
		zd=X2(i1,i2,i3)-z0;
	    
		f3=betaSqct*exp( -beta*( xd*xd+yd*yd+zd*zd ) );
		U(i1,i2,i3,ex)+=( zd-yd )*f3;
		U(i1,i2,i3,ey)+=( xd-zd )*f3;
		U(i1,i2,i3,ez)+=( yd-xd )*f3;
	      }
	    }
	    else
	    {
	      FOR_3D(i1,i2,i3,J1,J2,J3)
	      {
		xd=X0(i1,i2,i3)-x0;
		yd=X1(i1,i2,i3)-y0;
		zd=X2(i1,i2,i3)-z0;
	    
		f3=betaSqct*exp( -beta*( xd*xd+yd*yd+zd*zd ) );
		U(i1,i2,i3,ex)=( zd-yd )*f3;
		U(i1,i2,i3,ey)=( xd-zd )*f3;
		U(i1,i2,i3,ez)=( yd-xd )*f3;
		if( method==bamx )
		{
		  U(i1,i2,i3,hx)=0.;
		  U(i1,i2,i3,hy)=0.;
		  U(i1,i2,i3,hz)=0.;
		}
              
	      }
	    }
	  }

	}
      } // end OLD WAY -- Gaussian source

    }
    else if( forcingOption==gaussianChargeSource )
    {

      const realArray & f = u;  // do this for now

      const intArray & mask = mg.mask();
      
      realArray & x = isRectangular ? u : mg.center();
      realArray & rx = isRectangular ? u : mg.inverseVertexDerivative();

     #ifdef USE_PPP
      const realSerialArray & uLocal  =  u.getLocalArrayWithGhostBoundaries();
      const realSerialArray & fLocal  =  f.getLocalArrayWithGhostBoundaries();
      const realSerialArray & rxLocal = rx.getLocalArrayWithGhostBoundaries();
      const intSerialArray & maskLocal  =  mask.getLocalArrayWithGhostBoundaries();
     #else
      const realSerialArray & uLocal  =  u;
      const realSerialArray & fLocal  =  f;
      const realSerialArray & rxLocal = rx; 
      const intSerialArray & maskLocal  =  mask; 
     #endif

      real *uptr = uLocal.getDataPointer();
      real *fptr = fLocal.getDataPointer();
      real *xptr = xLocal.getDataPointer();
      real *rxptr = rxLocal.getDataPointer();
      int *maskptr = maskLocal.getDataPointer();

//       real dx[3],xab[2][3];
//       if( isRectangular )
//         mg.getRectangularGridParameters( dx, xab );


      if( option==1 )
      {
        realSerialArray & fnc = (realSerialArray&)fLocal; // cast away const
	fnc=0.;  // the forcing function always adds a contribution to f
      }
      

      int ngcs=0;
      real amplitude=gaussianChargeSourceParameters[ngcs][0];
      real beta     =gaussianChargeSourceParameters[ngcs][1];
      real p        =gaussianChargeSourceParameters[ngcs][2];
      real xp0      =gaussianChargeSourceParameters[ngcs][3];
      real xp1      =gaussianChargeSourceParameters[ngcs][4];
      real xp2      =gaussianChargeSourceParameters[ngcs][5];
      real vp0      =gaussianChargeSourceParameters[ngcs][6];
      real vp1      =gaussianChargeSourceParameters[ngcs][7];
      real vp2      =gaussianChargeSourceParameters[ngcs][8];


      J1 = Range(max(Ie1.getBase(),uel.getBase(0)),min(Ie1.getBound(),uel.getBound(0)));
      J2 = Range(max(Ie2.getBase(),uel.getBase(1)),min(Ie2.getBound(),uel.getBound(1)));
      J3 = Range(max(Ie3.getBase(),uel.getBase(2)),min(Ie3.getBound(),uel.getBound(2)));

      int gridType = isRectangular? 0 : 1;
      int useForcing=1;
      int useWhereMask=1;
      int orderOfExtrapolation=orderOfAccuracyInSpace+1;
      
      real ep=0;   // pointer to TZ function -- not used yet
      
      int ipar[30];
      real rpar[30];
      
      ipar[0] =J1.getBase(); 
      ipar[1] =J1.getBound(); 
      ipar[2] =J2.getBase(); 
      ipar[3] =J2.getBound();
      ipar[4] =J3.getBase();
      ipar[5] =J3.getBound();
      
      ipar[6] =gridType;
      ipar[7] =orderOfAccuracyInSpace;
      ipar[8] =orderOfAccuracyInTime;
      ipar[9] =orderOfExtrapolation;
      ipar[10]=useForcing;
      ipar[11]=ex;
      ipar[12]=ey;
      ipar[13]=ez;
      ipar[14]=hx;
      ipar[15]=hy;
      ipar[16]=hz;
      ipar[17]=useWhereMask;
      ipar[18]=grid;
      ipar[19]=debug;
      ipar[20]=forcingOption;
      ipar[21]=method;

      rpar[0] =dx[0];
      rpar[1] =dx[1];
      rpar[2] =dx[2];
      rpar[3] =mg.gridSpacing(0);
      rpar[4] =mg.gridSpacing(1);
      rpar[5] =mg.gridSpacing(2);
      rpar[6] =t;
      rpar[7] =ep;
      rpar[8] =dt;
      rpar[9] =c;
      rpar[10]=eps;
      rpar[11]=mu;
      rpar[12]=kx;
      rpar[13]=ky;
      rpar[14]=kz;
      rpar[15]=slowStartInterval;
      rpar[16]=xab[0][0];
      rpar[17]=xab[0][1];
      rpar[18]=xab[0][2];
      rpar[19]=amplitude;
      rpar[20]=beta;
      rpar[21]=p;   
      rpar[22]=xp0;
      rpar[23]=xp1;
      rpar[24]=xp2;
      rpar[25]=vp0;
      rpar[26]=vp1;
      rpar[27]=vp2;
      rpar[28]=0;
      rpar[29]=0;

      int ierr=0;
 
      forcingOptMaxwell( mg.numberOfDimensions(),
                         uLocal.getBase(0),uLocal.getBound(0),uLocal.getBase(1),uLocal.getBound(1),
			 uLocal.getBase(2),uLocal.getBound(2),
                         fLocal.getBase(0),fLocal.getBound(0),fLocal.getBase(1),fLocal.getBound(1),
			 fLocal.getBase(2),fLocal.getBound(2),
			 *uptr,*fptr,*maskptr,*rxptr, *xptr,
                         ipar[0], rpar[0], ierr );
      

      if( debug & 8 ) display(f,"f after forcingOptMaxwell",debugFile,"%9.2e ");
      
    }


#undef X0
#undef X1
#undef X2
 
  }

//kkc removed because this should be in the calling scope  timing(timeForForcing)+=getCPU()-time0;
  
 EXTRACT_GFP_END(FORCING);

  return 0;
}

