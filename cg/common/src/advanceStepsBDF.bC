// ==========================================================================================
//     Backward Differentiation Formula (BDF) Time-Stepper
///
// ==========================================================================================
//   This file contains functions that implement separate steps in an advance routine
//   These separate steps can be combined to form a time stepping algorithm such as 
//   a predictor corrector method.
//
// These functions should probably be virtual members of an Advance class so they can be 
// over-loaded? They now implement a PC method. 
// 
//      initializeTimeStepping( t,dt,init );
//      startTimeStep( t0,dt0,advanceOptions );
//      takeTimeStep( t0,dt0,correction,advanceOptions );
//      endTimeStep( t0,dt0,advanceOptions );
// 
// Here is the anticipated usage: 
//
//   initializeTimeStepping( t,dt,init )
//   for( int subStep=0; subStep<numberOfSubSteps; subStep++ )
//   {
//     startTimeStep( t0,dt0,advanceOptions );
//     for( int correction=0; correction<numberOfCorrections; correction++ )  // these could also be stages of a RK 
//     {    
//       takeTimeStep( t0,dt0,correction,advanceOptions );
//     }
//     endTimeStep( t0,dt0,advanceOptions );
// 
//   } // end  substeps
//
//
// ==========================================================================================


#include "DomainSolver.h"
#include "CompositeGridOperators.h"
#include "GridCollectionOperators.h"
#include "interpPoints.h"
#include "SparseRep.h"
#include "ExposedPoints.h"
#include "Ogen.h"
#include "App.h"
#include "ParallelUtility.h"
#include "Oges.h"
#include "OgesParameters.h"
#include "AdamsPCData.h"
#include "gridFunctionNorms.h"
#include "updateOpt.h"
#include "AdvanceOptions.h"

static bool useNewExposedPoints=true;

// here are some bpp macros that are used for the explicit and implicit predictor-corrector methods
#Include pcMacros.h

#define ForBoundary(side,axis)   for( axis=0; axis<mg.numberOfDimensions(); axis++ ) \
                                 for( side=0; side<=1; side++ )



// ===================================================================================================================
/// \brief Advance the time dependent variables one time step for the BDF scheme.
/// \details This routine is called by the takeTimeStep routine which handles details of moving
///     and adaptive grids.
/// 
/// \param t0 (input) : current time
/// \param dt0 (input) : current time step
///
// ===================================================================================================================
int DomainSolver::
implicitTimeStep(  real & t0, real & dt0, int correction, AdvanceOptions & advanceOptions )
{
  
  FILE *& debugFile =parameters.dbase.get<FILE* >("debugFile");
  FILE *& pDebugFile =parameters.dbase.get<FILE* >("pDebugFile");
  const int & orderOfBDF = parameters.dbase.get<int>("orderOfBDF");

  if( true || debug() & 4 )
    printP("--DS-- implicitTimeStep t0=%e, dt0=%e, correction=%i BDF%i++++\n",t0,dt0,correction,orderOfBDF );
  if( debug() & 2 )
  {
    fprintf(debugFile,"--DS-- implicitTimeStep (start): t0=%e, dt0=%e, correction=%i*** \n",t0,dt0,correction);
  }

  assert( parameters.dbase.get<int >("orderOfPredictorCorrector")==2 );  // for now we just have 2nd-order in time

  assert( parameters.dbase.get<DataBase >("modelData").has_key("AdamsPCData") );
  AdamsPCData & adamsData = parameters.dbase.get<DataBase >("modelData").get<AdamsPCData>("AdamsPCData");
  
  real & dtb=adamsData.dtb;
  int &mab0 =adamsData.mab0, &mab1=adamsData.mab1, &mab2=adamsData.mab2;
  int &nab0 =adamsData.nab0, &nab1=adamsData.nab1, &nab2=adamsData.nab2, &nab3=adamsData.nab3;
  int &ndt0=adamsData.ndt0;
  real *dtp = adamsData.dtp;

  const Parameters::ImplicitMethod & implicitMethod = 
                parameters.dbase.get<Parameters::ImplicitMethod >("implicitMethod");

  const int & predictorOrder = parameters.dbase.get<int>("predictorOrder");
  
  int numberOfCorrections=parameters.dbase.get<int>("numberOfPCcorrections"); 

  // If we check a convergence tolerance when correcting (e.g. for moving grids) then this is
  // the minimum number of corrector steps we must take:
  const int minimumNumberOfPCcorrections = parameters.dbase.get<int>("minimumNumberOfPCcorrections"); 
  
  // For moving grids we keep gf[mab0], gf[mab1] and gf[mab2]
  // For non-moving grids we keep gf[mab0], gf[mab1] and we set mab2==mab1

  const int numberOfGridFunctions =  orderOfBDF+1; // movingGridProblem() ? 3 : 2; 

  int & mCur = mab0;
  const int mNew   = (mCur + 1 + numberOfGridFunctions ) % numberOfGridFunctions; // holds u(t+dt)
  const int mOld   = (mCur - 1 + numberOfGridFunctions ) % numberOfGridFunctions; // holds u(t-dt)
  const int mOlder = (mCur - 2 + numberOfGridFunctions ) % numberOfGridFunctions; // holds u(t-2*dt)
  const int mMinus3= (mCur - 3 + numberOfGridFunctions*2) % numberOfGridFunctions; // holds u(t-3*dt)

  Parameters::ImplicitOption & implicitOption = parameters.dbase.get<Parameters::ImplicitOption >("implicitOption");
  
  implicitOption=Parameters::doNotComputeImplicitTerms; // no need to compute during initialization
  // parameters.dbase.get<Parameters::ImplicitMethod >("implicitMethod")=Parameters::crankNicolson;
  int iparam[10];
  real rparam[10];

  RealCompositeGridFunction & uti = gf[mOld].u; // NOT USED *CHECK ME*

  Index Iv[3], &I1=Iv[0], &I2=Iv[1], &I3=Iv[2]; 
  Range N = parameters.dbase.get<Range >("Rt");   // time dependent variables
  RealArray error(numberOfComponents()+3);
  
  // BDF: 
  // Matrix is:  I - dt*implicitFactor*A 
  real & implicitFactor = parameters.dbase.get<real >("implicitFactor");
  if( orderOfBDF==1 )
    implicitFactor=1.;
  else if( orderOfBDF==2 )
    implicitFactor=2./3.;
  else if( orderOfBDF==3 )
    implicitFactor=6./11.;
  else if( orderOfBDF==4 )
    implicitFactor=12./25.;
  else
  {
    OV_ABORT("ERROR: unexpected orderOfBDF");
  }
  
  

  if( correction>1  && debug() & 2 )
    printP("implicitTimeStep: correction=%i\n",correction);
      
  // BDF:
  //    [ I -       dt*A ] u(t+dt) = u(t)                        : BDF1 (backward-Euler)
  //    [ I - (2/3)*dt*A ] u(t+dt) = (4/3)*u(t) - (1/3)*u(t-dt)  : BDF2 


  // We only need to compute the "explicit" part of the implicit terms once for correction==0: 
  // These values are stored in utImplicit 
  implicitOption =correction==0 ? Parameters::computeImplicitTermsSeparately : Parameters::doNotComputeImplicitTerms;

  // Optionally refactor the matrix : if parameters.dbase.get<int >("globalStepNumber") % refactorFrequency == 0 
  // (We need to do this after the grids have moved but before dudt is evaluated (for nonlinear problems)
  if( correction==0 && (parameters.dbase.get<int >("initializeImplicitTimeStepping") || parameters.dbase.get<int >("globalStepNumber")>0) )
    formMatrixForImplicitSolve(dt0,gf[mNew], gf[mCur] );

  const int maba = correction==0 ? mCur : mNew;
  const int naba = correction==0 ? nab0 : nab1;

  // -- evaluate any body forcing (this is saved in realCompositeGridFunction bodyForce found in the data-base) ---
  const real tForce = t0+dt0; // evaluate the body force at this time  ***CHECK ME**
  computeBodyForcing( gf[maba], tForce );    // ***CHECK ME**

  // addArtificialDissipation(gf[maba].u,dt0);	// add "implicit" dissipation to u 

  if( debug() & 4 )
  {
    determineErrors( gf[mCur],sPrintF("--AD-- errors in mCur=%i at t=%9.3e\n",mCur,gf[mCur].t));
    if( orderOfBDF>=2 )
      determineErrors( gf[mOld],sPrintF("--AD-- errors in mOld=%i at t=%9.3e\n",mOld,gf[mOld].t));
    if( orderOfBDF>=3 )
      determineErrors( gf[mOlder],sPrintF("--AD-- errors in mOlder at t=%9.3e\n",gf[mOlder].t));
  }
  
  //  -----------------------------------
  //  --- Assign the right-hand-side  ---
  //  -----------------------------------
  for( int grid=0; grid<gf[mNew].cg.numberOfComponentGrids(); grid++ )
  {
    realMappedGridFunction & uNew = gf[mNew].u[grid];  
    realMappedGridFunction & rhs = uNew;
    realMappedGridFunction & uCur = gf[mCur].u[grid];  
    OV_GET_SERIAL_ARRAY(real,rhs,rhsLocal);     
    OV_GET_SERIAL_ARRAY(real,gf[mCur].u[grid],u0Local);
    OV_GET_SERIAL_ARRAY(real,gf[mOld].u[grid],u1Local);
    OV_GET_SERIAL_ARRAY(real,gf[mOlder].u[grid],u2Local);
    OV_GET_SERIAL_ARRAY(real,gf[mMinus3].u[grid],u3Local);
    
    getIndex(gf[mNew].cg[grid].extendedIndexRange(),I1,I2,I3);
    bool ok = ParallelUtility::getLocalArrayBounds(gf[mCur].u[grid],u0Local,I1,I2,I3);
    if( !ok ) continue;

    // --- compute external forcing ---
    // rhs = forcing 
    const real tNew = t0+dt0;
    rparam[0]=tNew;
    rparam[1]=tNew; // tforce
    rparam[2]=tNew; // tImplicit
    iparam[0]=grid;
    iparam[1]=gf[mNew].cg.refinementLevelNumber(grid);
    iparam[2]=numberOfStepsTaken;   
    rhsLocal=0.;
    addForcing(rhs,uNew,iparam,rparam,uti[grid],&gf[mNew].getGridVelocity(grid)); // grid comes from uNew
    if( debug() & 16  )
    {
      display(rhs,sPrintF("--AD-ITS-- rhs after add forcing, grid=%i tNew=%9.3e",grid,tNew),debugFile,"%9.2e ");
    }

    // -- evaluate RHS to BDF scheme ---
    if( orderOfBDF==1 )
      rhsLocal(I1,I2,I3,N) = u0Local(I1,I2,I3,N) + dt*rhsLocal(I1,I2,I3,N);
    else if( orderOfBDF==2 )    
      rhsLocal(I1,I2,I3,N) =  (4./3.)*u0Local(I1,I2,I3,N)
                             -(1./3.)*u1Local(I1,I2,I3,N) + (dt*2./3.)*rhsLocal(I1,I2,I3,N);
    else if( orderOfBDF==3 )    
      rhsLocal(I1,I2,I3,N) = (18./11.)*u0Local(I1,I2,I3,N) 
                             -(9./11.)*u1Local(I1,I2,I3,N)
                             +(2./11.)*u2Local(I1,I2,I3,N) + (dt*6./11.)*rhsLocal(I1,I2,I3,N);
    else if( orderOfBDF==4 )    
      rhsLocal(I1,I2,I3,N) = (48./25.)*u0Local(I1,I2,I3,N)
                            -(36./25.)*u1Local(I1,I2,I3,N)
                            +(16./25.)*u2Local(I1,I2,I3,N)
                            -( 3./25.)*u3Local(I1,I2,I3,N) + (dt*12./25.)*rhsLocal(I1,I2,I3,N);
    else
    {
      OV_ABORT("orderOfBDF>4 not implemented");
    }
    
  }

  if( correction==0 )
  {
    // printF(" +++ ims: gf[mNew].t=%9.3e --> change to t0+dt0=%9.3e +++\n",gf[mNew].t,t0+dt0);
    gf[mNew].t=t0+dt0;  // gf[mNew] now lives at this time
  }
      

  // *** assign boundary conditions for the implicit method 
  // *wdh* Dec 20, 2017 -- added gf[mCur]
  applyBoundaryConditionsForImplicitTimeStepping( gf[mNew],gf[mCur] ); // ***** gf[mNew].gridVelocity must be correct here
    
  if( Parameters::checkForFloatingPointErrors!=0 )
    checkSolution(gf[mNew].u,"--AD-- implicitTimeStep: after applyBCIMP",true);


  if( debug() & 4 )
  {
    aString label = sPrintF("--AD-- implicitTimeStep: RHS Before implicitSolve t=%e, ,correction=%i\n",gf[mNew].t,correction);
    if( twilightZoneFlow() )
    {
      gf[mNew].u.display(label,debugFile,"%8.5f ");
    }
    label = sPrintF("--AD-- implicitTimeStep: Errors in rhs gf before implicitSolve t=%e, correction=%i\n",gf[mNew].t,correction);
    determineErrors( gf[mNew],label );
  }

  // **** fix this *** we could refactor for each correction here !
//       if( mst>1 || correction>0 )
//       {
//         // Optionally refactor the matrix : if parameters.dbase.get<int >("globalStepNumber") % refactorFrequency == 0 
// 	formMatrixForImplicitSolve(dt0,gf[mNew], gf[mCur] );
//       }
      

  // ------------------------------------
  // --- Solve the implicit equations ---
  // ------------------------------------
 
  implicitSolve( dt0,gf[mNew], gf[mCur] );  // gf[mNew]=RHS  gf[mCur]=used for initial guess and linearization

  if( Parameters::checkForFloatingPointErrors!=0 )
    checkSolution(gf[mNew].u,"--AD-- implicitTimeStep: after implicitSolve",true);

  if( debug() & 4 )
  {
    if( twilightZoneFlow() )
    {
      gf[mNew].u.display(sPrintF("--AD-- implicitTimeStep: gf[mNew].u after implicitSolve but BEFORE BC's (t=%8.2e), correction=%i",
				 gf[mNew].t,correction),debugFile,"%8.5f ");
    }
    aString label = sPrintF("--AD-- implicitTimeStep: after implicitSolve but BEFORE BC's, t=%e, correction=%i\n",gf[mNew].t,correction);
    determineErrors( gf[mNew],label );
  }

  // apply explicit BC's  --- > really only have to apply to implicit grids I think?
  const int option=-1, grid=-1; // *wdh* Dec 20, 2017 -- pass old time grid function too
  applyBoundaryConditions(gf[mNew],option,grid, &(gf[mCur]));   // ***** gf[mNew].gridVelocity must be correct here!

  updateStateVariables( gf[mNew],1 );  

  if( debug() & 4 )
  {
    if( twilightZoneFlow() )
    {
      gf[mNew].u.display(sPrintF("--AD-- implicitTimeStep: gf[mNew].u after implicitSolve and BC's (t=%8.2e), correction=%i",
				 gf[mNew].t,correction),debugFile,"%8.5f ");
    }
    aString label = sPrintF("--AD-- implicitTimeStep: after implicitSolve and BC's, t=%e, correction=%i\n",gf[mNew].t,correction);
    determineErrors( gf[mNew],label );
  }
  

  return 0;
}


// ===================================================================================================================
/// \brief Initialize the time stepping (a time sub-step function). 
/// \details 
/// \param t0 (input) : current time
/// \param dt0 (input) : current time step
///
// ===================================================================================================================
int DomainSolver::
initializeTimeSteppingBDF( real & t0, real & dt0 )
{
  int init=true;

  FILE *& debugFile =parameters.dbase.get<FILE* >("debugFile");
  FILE *& pDebugFile =parameters.dbase.get<FILE* >("pDebugFile");
  const int & orderOfBDF = parameters.dbase.get<int>("orderOfBDF");

  const Parameters::TimeSteppingMethod & timeSteppingMethod = 
                    parameters.dbase.get<Parameters::TimeSteppingMethod >("timeSteppingMethod");
  const Parameters::ImplicitMethod & implicitMethod = parameters.dbase.get<Parameters::ImplicitMethod>("implicitMethod");
  if( implicitMethod!=Parameters::backwardDifferentiationFormula )
  {
    printF("--DS-- initializeTimeSteppingBDF: ERROR:  timeSteppingMethod!=backwardDifferentiationFormula\n");
    OV_ABORT("ERROR");
  }

  if( debug() & 4 )
    printF(" ====== DomainSolver::initializeTimeSteppingBDF ======\n");
  if( debug() & 2 )
    fprintf(debugFile," *** DomainSolver::initializeTimeSteppingBDF: t0=%e, dt0=%e *** \n",t0,dt0);
 

  assert( parameters.dbase.get<Parameters::TimeSteppingMethod >("timeSteppingMethod")==Parameters::implicit );

  assert( parameters.dbase.get<int >("orderOfPredictorCorrector")==2 );  // for now we just have 2nd-order in time

  if( !parameters.dbase.get<DataBase >("modelData").has_key("AdamsPCData") )
  {
    // this must be the initial call to this routine
    parameters.dbase.get<DataBase >("modelData").put<AdamsPCData>("AdamsPCData");
  }

  AdamsPCData & adamsData = parameters.dbase.get<DataBase >("modelData").get<AdamsPCData>("AdamsPCData");
  
  real & dtb=adamsData.dtb;
  int &mab0 =adamsData.mab0, &mab1=adamsData.mab1, &mab2=adamsData.mab2;
  int &nab0 =adamsData.nab0, &nab1=adamsData.nab1, &nab2=adamsData.nab2, &nab3=adamsData.nab3;
  int &ndt0=adamsData.ndt0;
  real *dtp = adamsData.dtp;

  const int orderOfAccuracy = parameters.dbase.get<int >("orderOfAccuracy");
  const int orderOfTimeAccuracy = parameters.dbase.get<int >("orderOfTimeAccuracy");
  const int & predictorOrder = parameters.dbase.get<int>("predictorOrder");
  if( predictorOrder<0 || predictorOrder>2 )
  {
    printF("DomainSolver::initializeTimeSteppingBDF: ERROR: predictorOrder=%i! Will use default.\n",predictorOrder);
  }
  if( debug() & 1 )
  {
    printF("DomainSolver::initializeTimeSteppingBDF:INFO: predictorOrder=%i\n",predictorOrder);
  }
  
  const int numberOfGridFunctions =  orderOfBDF+1;
  int & mCur = mab0;
  const int mNew   = (mCur + 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t+dt)
  const int mOld   = (mCur - 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t-dt)
  const int mOlder = (mCur - 2 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t-2*dt)

  mab2 = mNew;

  Parameters::ImplicitOption & implicitOption = parameters.dbase.get<Parameters::ImplicitOption >("implicitOption");
  
  implicitOption=Parameters::doNotComputeImplicitTerms; // no need to compute during initialization
  // parameters.dbase.get<Parameters::ImplicitMethod >("implicitMethod")=Parameters::crankNicolson;
  int iparam[10];
  real rparam[10];

  RealCompositeGridFunction & uti = gf[mOld].u; // *not used*
  
   int grid;
   Index Iv[3], &I1=Iv[0], &I2=Iv[1], &I3=Iv[2]; 
   Range N = parameters.dbase.get<Range >("Rt");   // time dependent variables
   RealArray error(numberOfComponents()+3); 
  
  // BDF: 
  // Matrix is:  I - dt*implicitFactor*A 
  real & implicitFactor = parameters.dbase.get<real >("implicitFactor");
  if( orderOfBDF==1 )
    implicitFactor=1.;
  else if( orderOfBDF==2 )
    implicitFactor=2./3.;
  else if( orderOfBDF==3 )
    implicitFactor=6./11.;
  else if( orderOfBDF==4 )
    implicitFactor=12./25.;
  else
  {
    OV_ABORT("ERROR: unexpected orderOfBDF");
  }
  
  // Form the matrix for implicit time stepping (optionally save the solution used for linearization)
  // NOTE: the matrix will only be generated the first time through or if parameters.dbase.get<int >("globalStepNumber") % refactorFrequency == 0 
  // We want to factor the matrix here since it may be needed for computing the RHS
  formMatrixForImplicitSolve(dt,gf[mNew], gf[mCur] );

  // **** To initialize the method we need to compute du/dt at times t and t-dt *****

  // this is a macro (pcMacros.h):
  const int & numberOfSolutionLevels = parameters.dbase.get<int>("numberOfSolutionLevels");
  const int & numberOfTimeDerivativeLevels = parameters.dbase.get<int>("numberOfTimeDerivativeLevels");
  int numberOfExtraPressureTimeLevels=0;
  const int numberOfPastTimes=orderOfBDF-1;      // BDF needs u(t-dt), ... u(t-n*dt), n=numberOfPastTimes  
  const int numberOfPastTimeDerivatives=0;       // BDF needs no past u_t
  // const int numberOfPastTimes=1; 
  // const int numberOfPastTimeDerivatives=1;       
  initializePredictorCorrector(BDF,uti);

  return 0;
}


// ===================================================================================================================
/// \brief Start an individual time step (a time sub-step function).
/// \details 
/// \param t0 (input) : current time
/// \param dt0 (input) : current time step
/// \param correction (input) : for predictor corrector methods this indicates the correction step number.
/// \param currentGF (output) : points to the grid-function holding the current solution (time t0)
/// \param nextGF (output) : points to the grid-function holding the new solution (time t0+dt0)
/// \param advanceOptions.numberOfCorrectorSteps (output) : return the number of corrector steps that will be used.
///
// ===================================================================================================================
int DomainSolver::
startTimeStepBDF( real & t0, real & dt0, int & currentGF, int & nextGF, AdvanceOptions & advanceOptions )
{

  if( parameters.dbase.get<int >("globalStepNumber")<0 )
    parameters.dbase.get<int >("globalStepNumber")=0;
  parameters.dbase.get<int >("globalStepNumber")++;

  assert( parameters.dbase.get<DataBase >("modelData").has_key("AdamsPCData") );
  AdamsPCData & adamsData = parameters.dbase.get<DataBase >("modelData").get<AdamsPCData>("AdamsPCData");
  int &mab0 =adamsData.mab0, &mab1=adamsData.mab1, &mab2=adamsData.mab2;

  const int & orderOfBDF = parameters.dbase.get<int>("orderOfBDF");
  const int numberOfGridFunctions =  orderOfBDF+1;
  const int & mCur = mab0;
  const int mNew   = (mCur + 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t+dt)

  currentGF=mab0;
  nextGF   =mNew;

  advanceOptions.numberOfCorrectorSteps=parameters.dbase.get<int>("numberOfPCcorrections"); 
  advanceOptions.gridChanges=AdvanceOptions::noChangeToGrid;  // fix me for AMR

  return 0;

}

// ===================================================================================================================
/// \brief Take a single time step (a time sub-step function).
/// \details 
/// \param t0 (input) : current time
/// \param dt0 (input) : current time step
/// \param correction (input) : for predictor corrector methods this indicates the correction step number.
/// \param advanceOptions (input) : additional options that adjust the behaviour of this function.
///       advanceOptions.takeTimeStepOption can be used to not apply or only apply the boundary conditions.
///   advanceOptions.correctionIterationsHaveConverged (output) is set to true if the correction iterations
///   have converged (e.g. for moving grids)
///
// ===================================================================================================================
int DomainSolver::
takeTimeStepBDF( real & t0, real & dt0, int correction, AdvanceOptions & advanceOptions )
{
  FILE *& debugFile =parameters.dbase.get<FILE* >("debugFile");
  FILE *& pDebugFile =parameters.dbase.get<FILE* >("pDebugFile");

  const int & orderOfBDF = parameters.dbase.get<int>("orderOfBDF");

  if( true || debug() & 4 )
    printP("DomainSolver::takeTimeStepBDF t0=%e, dt0=%e, correction=%i BDF%i ++++\n",t0,dt0,correction,orderOfBDF );
  if( debug() & 2 )
  {
    fprintf(debugFile," *** DomainSolver::takeTimeStepBDF (start): t0=%e, dt0=%e, correction=%i*** \n",t0,dt0,correction);
  }

  parameters.dbase.get<int>("correctionStage")=correction;
  advanceOptions.correctionIterationsHaveConverged=false; // this may be set to true below

  assert( parameters.dbase.get<Parameters::TimeSteppingMethod >("timeSteppingMethod")==Parameters::implicit );
  parameters.dbase.get<real >("dt")=dt0; // *wdh* 101106 this is the dt used in getUt (cns)

  assert( parameters.dbase.get<int >("orderOfPredictorCorrector")==2 );  // for now we just have 2nd-order in time

  assert( parameters.dbase.get<DataBase >("modelData").has_key("AdamsPCData") );
  AdamsPCData & adamsData = parameters.dbase.get<DataBase >("modelData").get<AdamsPCData>("AdamsPCData");
  
  real & dtb=adamsData.dtb;
  int &mab0 =adamsData.mab0, &mab1=adamsData.mab1, &mab2=adamsData.mab2;
  int &nab0 =adamsData.nab0, &nab1=adamsData.nab1, &nab2=adamsData.nab2, &nab3=adamsData.nab3;
  int &ndt0=adamsData.ndt0;
  real *dtp = adamsData.dtp;

  const Parameters::ImplicitMethod & implicitMethod = 
                parameters.dbase.get<Parameters::ImplicitMethod >("implicitMethod");

  const int & predictorOrder = parameters.dbase.get<int>("predictorOrder");
  int numberOfCorrections=parameters.dbase.get<int>("numberOfPCcorrections"); 

  // If we check a convergence tolerance when correcting (e.g. for moving grids) then this is
  // the minimum number of corrector steps we must take:
  const int minimumNumberOfPCcorrections = parameters.dbase.get<int>("minimumNumberOfPCcorrections"); 
  
  const int numberOfGridFunctions =  orderOfBDF+1;
  int & mCur = mab0;
  const int mNew   = (mCur + 1 + numberOfGridFunctions  ) % numberOfGridFunctions; // holds u(t+dt)
  const int mOld   = (mCur - 1 + numberOfGridFunctions  ) % numberOfGridFunctions; // holds u(t-dt)
  const int mOlder = (mCur - 2 + numberOfGridFunctions  ) % numberOfGridFunctions; // holds u(t-2*dt)
  const int mMinus3= (mCur - 3 + numberOfGridFunctions*2) % numberOfGridFunctions; // holds u(t-3*dt)

  Parameters::ImplicitOption & implicitOption = parameters.dbase.get<Parameters::ImplicitOption >("implicitOption");
  implicitOption=Parameters::doNotComputeImplicitTerms; // no need to compute during initialization
  
  Index Iv[3], &I1=Iv[0], &I2=Iv[1], &I3=Iv[2]; 
  Range N = parameters.dbase.get<Range >("Rt");   // time dependent variables
  RealArray error(numberOfComponents()+3);
  int iparam[10];
  real rparam[10];
  
  if( correction==0 )
  {
    // if( dtb!=dt0 )
    if( fabs(dtb-dt0) > dt0*REAL_EPSILON*100. )
    {
      if( debug() & 2 ) 
        printP("takeTimeStepBDF dtb!=dt0 : re-initialize (dtb=%9.3e, dt0=%9.3e, diff=%8.2e)\n",
               dtb,dt0,fabs(dtb-dt0));
      parameters.dbase.get<int >("initializeImplicitTimeStepping")=true;
    }
    else
    {
      if( debug() & 2 )
	printP("takeTimeStepBDF dtb==dt0 : do not re-initialize\n");
    }
  }
    
  realCompositeGridFunction & ua = gf[mCur].u;     // pointer to u(t)
  realCompositeGridFunction & ub = gf[mOld].u;     // pointer to u(t-dt)
  realCompositeGridFunction & uc = gf[mOlder].u;   // pointer to u(t-2*dt)
  realCompositeGridFunction & ud = gf[mMinus3].u;  // pointer to u(t-3*dt)
  RealCompositeGridFunction & uti = gf[mOld].u;    // not used
    
  if( correction>1  && debug() & 2 )
    printP("takeTimeStepBDF: correction=%i\n",correction);
      
  if( correction >0 )
    parameters.dbase.get<int>("totalNumberOfPCcorrections")++;  // count the total number of corrections.


  // We only need to compute the "explicit" part of the implicit terms once for correction==0: 
  // These values are stored in utImplicit 
  implicitOption =correction==0 ? Parameters::computeImplicitTermsSeparately : Parameters::doNotComputeImplicitTerms;

  if( correction==0 )
  {
    // ------------------------------------------------------
    // ----------------- Moving Grids -----------------------
    // ------------------------------------------------------

    bool gridWasAdapted=false;

    // moveTheGridsMacro(adamsPC,uti); // *wdh* 090804 

    real tb=gf[mCur].t-dtb, tc=tb-dtb, td=tc-dtb; // tc,td not used
    const int predictorOrder=0; 
    const int numberOfPastTimes=orderOfBDF-1;      // BDF needs u(t-dt), ... u(t-n*dt), n=numberOfPastTimes  
    const int numberOfPastTimeDerivatives=0; 
    //  If predictorOrder==2 then explosed points are filled in on ub.
    //  If predictorOrder==3 then explosed points are filled in on ub and uc.
    //  If predictorOrder==4 then explosed points are filled in on ub, uc and ud.
    moveTheGridsMacro(BDF,uti, predictorOrder,tb,ub,tc,ub,td,ub);

    // we need to rebuild the implicit time stepping matrix.
    if( movingGridProblem() )
      parameters.dbase.get<int >("initializeImplicitTimeStepping")=true;
  }


  // ---------------------------------------------------------------------
  // ---------------- Implicit time step ---------------------------------
  // ---------------------------------------------------------------------
  implicitTimeStep( t0,dt0,correction,advanceOptions );
  

  // extrapolate p in time as an initial guess for iterative solvers
  if( correction==0 )  // *new way* 2015/01/22
  { 
    // --- for some reason the implicit scheme always extrapolates p in time ---
    if( parameters.dbase.has_key("extrapolatePoissonSolveInTime") )
      parameters.dbase.get<bool>("predictedPressureNeeded")= parameters.dbase.get<bool>("extrapolatePoissonSolveInTime");
    const int numberOfTimeLevels=3;
    const int gfIndex[numberOfTimeLevels]={mNew,mCur,mOld}; // 
    predictTimeIndependentVariables( numberOfTimeLevels,gfIndex );
  }


  // ------------------------------------------------------------------------
  // ---- solve for time independent variables (e.g. pressure for INS) ------
  // ------------------------------------------------------------------------
  solveForTimeIndependentVariables( gf[mNew] ); 

  if( debug() & 8 )
  {
    aString label =sPrintF("takeTimeStepBDF: Errors after pressure solve, t0+dt0: t0=%e, dt0=%e  \n",t0,dt0);
    determineErrors( gf[mNew],label );
  }

  // -- Correct for forces on moving bodies if we have more corrections --
  //  *wdh* use macro: 2015/03/08
  correctForMovingGridsMacro(BDFS);
  advanceOptions.correctionIterationsHaveConverged=movingGridCorrectionsHaveConverged;  // we have converged 


  return 0;
}

// ===================================================================================================================
/// \brief End an individual time step (a time sub-step function).
/// \details 
/// \param t0 (input) : current time
/// \param dt0 (input) : current time step
/// \param correction (input) : for predictor corrector methods this indicates the correction step number.
///
// ===================================================================================================================
int DomainSolver::
endTimeStepBDF( real & t0, real & dt0, AdvanceOptions & advanceOptions )
{
  //   FILE *& debugFile =parameters.dbase.get<FILE* >("debugFile");
  //   FILE *& pDebugFile =parameters.dbase.get<FILE* >("pDebugFile");


  assert( parameters.dbase.get<Parameters::TimeSteppingMethod >("timeSteppingMethod")==Parameters::implicit );
  assert( parameters.dbase.get<int >("orderOfPredictorCorrector")==2 );  // for now we just have 2nd-order in time

  assert( parameters.dbase.get<DataBase >("modelData").has_key("AdamsPCData") );

  AdamsPCData & adamsData = parameters.dbase.get<DataBase >("modelData").get<AdamsPCData>("AdamsPCData");
  
  real & dtb=adamsData.dtb;
  int &mab0 =adamsData.mab0, &mab1=adamsData.mab1, &mab2=adamsData.mab2;
  int &nab0 =adamsData.nab0, &nab1=adamsData.nab1, &nab2=adamsData.nab2, &nab3=adamsData.nab3;
  int &ndt0=adamsData.ndt0;
  real *dtp = adamsData.dtp;

  const int & orderOfBDF = parameters.dbase.get<int>("orderOfBDF");
  const int numberOfGridFunctions =  orderOfBDF+1;
  // const int numberOfGridFunctions =  movingGridProblem() ? 3 : 2; 

  // -- increment mab0=mCur : 
  mab0 = (mab0 + 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t+dt)
  const int mCur   = (mab0     + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t+dt)
  const int mNew   = (mCur + 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t+dt)
  const int mOld   = (mCur - 1 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t-dt)
  // const int mOlder = (mCur - 2 + numberOfGridFunctions) % numberOfGridFunctions; // holds u(t-2*dt)

  mab1 = mOld;
  mab2 = mNew;
  
  // // permute (mab0,mab1,mab2) 
  // mab0 = (mab0-1 + numberOfGridFunctions) % numberOfGridFunctions;
  // mab1 = (mab1-1 + numberOfGridFunctions) % numberOfGridFunctions;
  // // mab2 is always 1 "ahead" of mab0 
  // mab2 = (mab0-1 + numberOfGridFunctions) % numberOfGridFunctions;

  if( parameters.dbase.get<int >("orderOfPredictorCorrector")==2 )
  {
    nab0 = (nab0+1) % 2;
    nab1 = (nab1+1) % 2;
  }
  else
  {
    nab0 = (nab0-1 +4) % 4;
    nab1 = (nab1-1 +4) % 4;
    nab2 = (nab2-1 +4) % 4;
    nab3 = (nab3-1 +4) % 4;
  }

  ndt0=(ndt0-1 +5)%5;  // for dtp[]
      
  dtb=dt0;
  t0+=dt0;

  const int & globalStepNumber = parameters.dbase.get<int >("globalStepNumber");
  const int & showResiduals = parameters.dbase.get<int>("showResiduals");
  if( showResiduals &&
      (globalStepNumber % parameters.dbase.get<int >("frequencyToSaveSequenceInfo") == 0) )
  {
    // new way:
    realCompositeGridFunction *& pResidual  = parameters.dbase.get<realCompositeGridFunction*>("pResidual"); // current residual
    if( pResidual!=NULL )
    {
      realCompositeGridFunction & residual = *pResidual;
      getResidual( t0,dt0,gf[mab0],residual );
      saveSequenceInfo(t0,residual);
    }
    else
    {
      printF("--BDF--- WARNING -- not saving residual -- FIX ME\n");
    }
    
  }
    
//  output( gf[mab0],initialStep+subStep ); // output to files, user defined output
  output( gf[mab0],parameters.dbase.get<int >("globalStepNumber") ); // output to files, user defined output

  const int zeroUnusedPointsAfterThisManySteps=20;
  if( ( ((parameters.dbase.get<int >("globalStepNumber")+1) % zeroUnusedPointsAfterThisManySteps)==0 ) &&  
      parameters.dbase.get<int >("extrapolateInterpolationNeighbours")==0 )
  {
    // *note* we cannot fixup unused if we extrapolate interp. neighbours since these values will be zeroed out!
    // (esp. important for viscoPlastic model -- linearized solution becomes corrupted)

    if( debug() & 2 ) printF(" ************** DomainSolver::endTimeStep fixupUnusedPoints ************\n");
      
    // zero out unused points to keep them from getting too big ** is this needed?? ****
    for( int m=0; m<=1; m++ )
    {
      // ** gf[m].u.zeroUnusedPoints(coeff);
      fixupUnusedPoints(gf[m].u);
    }
  }
    

  // update the current solution:  
  current = mab0;

  if( debug() & 4 )
    printP("DomainSolver::endTimeStep  t0=%e dt0=%e ----\n",t0,dt0);

  return 0;
}




