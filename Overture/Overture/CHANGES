==============================================================================================
Overture.v25 - released  November 21, 2012
Changes:

   o The following documentation has been significantly updated:
         Cgins User Guide.
         Cgins Reference Manual.
         Ogen User Guide.
         Cgmx User Guide. 

   o New ogen grid scripts:
      - loftedBox, loftedHalfBox: grid for a "cube" or "half-cube" using the LoftedSurfaceMapping.
      - flatPlateWingGrid.cmd : grid for a 3D flat-plate wing. 
      - wingj.cmd : grid for 3D wing from Joukoswky airofil cross-sections.
      - loftedJoukowskyFlatTip : grid for twisted 3D Joukowsky wing with a flattened tip.
      - cylinderInAChannel.cmd : 3D cylinder in a channel.
      - pump2dGrid.cmd : grid for a 2D centrifugal pump.
      - flattenedTorusGrid.cmd : grid for a 3D "ring" (flattened torus). 
      - pillInABoxGrid.cmd : grid for a "pill" (3D disk) in a box.

   o 110605 - bug fixed in NurbsMappings when interpolating a NurbsMapping from another mapping
              and specifying "number of ghost points to include". This option was broken for
              surfaces and 3D volumes.
   o 110624 - added an option to 3d contour plotter to base the colour table min/max values on
              the min/max values of the solutions on the contour and coordinate planes, rather
              than the global min/max.
   o 110628 - fixed parallel grid plotter to plot interpolation points.
   o 110713 - fixed a bug with AMR and moving grids. In rare cases, values on exposed points may
              not have been assigned properly. 
   o 110727 - fixed the moving grid generator so the vertex array is no longer built on Cartesian grids.
              This will save memory for cgcssi and cgins with moving grids.
   o 110731 - fixed a bug in the SweepMapping in the way it computes the normal to the sweep surface.
              If you have previously made a grid with the SweepMapping and it
              no longer works you may need to set the 'orientation' to be -1 to change the direction
              of the normal to the Sweep surface.
   o 110806 - fixed two bugs in the hyperbolic grid generator: when marching in both directions the
              forward direction needed to march one more line, and the stretching was wrong in the
              backward direction. 
   o 110817 - there is now an option in the grid plotter to save the composite grid to a file. This
              grid can then, for example, be read back into ogen and changed or regenerated.
   o 110828 - it should now be possible to use a hyperbolic grid (or DataPointMapping) for parallel
              computations with cgins or cgcssi. Previously I recommended that these mappings be
              converted to Nurbs. The Nurbs mapping currently will use more memory in parallel
              as all control points are duplicated on each processor. 
   o 110828 - fixed a bug in the parallel line smoother for Ogmg.
   o 111207 - There is a new option for saving hard copies. If the file name extension is ".pdf" as
              in "myPlot.pdf" then a pdf output file will be created (using a system call to the 'convert'
              program which is assumed to exist on your machine.)
   o 111210 - There was a bug in the Integrate class if volume integrals were computed for an overlapping
              grid before any surface integrals.
   o 111210 - The default behaviour of getFromADataBase has changed -- the input "fileName" argument
              now has a return value equal to the full path name of the grid file that was found.
   o 111211 - There is now an option when generating an overlapping grid to compute and save the 
              integration weights in the same file. These weights can be read by cgins, for example,
              when running rigid body simulations (and thus the weights do not need to be recomputed).  
              This option is especially useful in parallel since the weights can be pre-computed in serial.
              (Computation of the weights in parallel currently may not work in all cases due to a 
               problem with PETSc.)
   o 120317 - Fixed a bug in ogen when checkOverlappingGrid would detect an invalid interpolation point even
              though ogen did not detect it -- could occur when multiple shared surfaces were located in the
              same area.
   o 120325 - There is a new option in Ogen to define explicit hole cutters. These may be needed in some
              cases when the physical boundary is not very well defined (see the Ogen documentation). 
   o 120422 - Fixed some bugs in Ogen related to shared sides which could have caused grids to be made
              with backup points where there shouldn't have been any, or could have resulted in grids
              that failed the final checking step.
   o 120422 - Fixed some problems related to generating grids on CAD for high-order accurate methods that
              require 2 or more ghost points to lie on the surface (see the hyperbolic and ogen documentation
              for the correct way to do this).
   o 120501 - When interactively specifying the number of grid lines for a Mapping, a value of -1 now means keep
              the current number of grid lines in that direction.
   o 120601 - The "query a grid point" option from the grid plotter now works in parallel.
   o 120601 - Fixed plotting in parallel of derived functions that require derivatives, such as vorticity, enstrophy etc.
   o 120604 - Fixed some problems with the parallel coarse grid generation in the multigrid solver Ogmg.
   o 120703 - The parallel interpolator now works with implicit interpolation so that CG solvers can be run
              in parallel using grids generated with implicit interpolation. This is more expensive since the
              equations are solved by a simple iteration and you should normally set the maximum number of
              interations in CG command files to a value of 10 (or less):
                    maximum number of iterations for implicit interpolation
                       10
   o 120914 - the Cgins inflow boundary condition inflowWithPressureAndTangentialVelocityGiven now works in
              parallel and for fourth-order (for fourth-order one may need to avoid projecting the initial
              conditions for now)
   o 121921 - Kyle's nice in-memory "data-base" class DBase has been moved from cg into Overture so that Overture
              classes can also use it. This is a very useful class.
   o 121023 - The Overture check.p script now works with the parallel version.
   o 121023 - the perl script Overture/bin/perlcmd can be used to substitute and replace all perl commands from 
              an Overture or CG command file and turn it into a new command file that does not require perl.
              This may be useful if you want to run on a machine where embedded perl commands do not work for
              some reason.
                # Example:
                #  To remove perl from the ogen script cicArg.cmd use:
                #     perlcmd cicNoPerl.cmd cicArg.cmd -order=2 -factor=1
                #  Now ogen can be run without using the perl parser:
                #     ogen -noplot cicNoPerl.cmd

==============================================================================================
Overture.v24
Changes:
   NOTE: Due to a bug fix in the HDF file output (100329 below) you will need to regenerate your grids and showfiles
         for this new version.

   o there is a new graphics option, "set home", (in the command window "File menu") that will make the 
              current view the "home" view. The home view is the one that appears when using the "reset" 
              command (the button with the "home" on it). The "reset" button (command GLOB:init view) 
              will return the home view to the default.
   o 090422 : fixed a bug in ogen that mainly applied to multi-domain grids -- sometimes interpolation
              was allowed between grids from different domains. (classify.C l.2615)
   o 090423 : added a check to mogl.C for NumLock being on -- a message is printed if it is.
              You should turn off NumLock since the mouse buttons won't work properly.
   o 090429 : fixed a bug in CompositeGrid.C for grids saved from parallel ogen, some of the 
              interpolation info was not saved correctly (convertLocalInterpolationData).
   o 090529 : fixed plotting of sequences in plotStuff with multi-domain problems. The sequences to plot
              now appear on the main dialog.
   o 090530 : NOTE: running remotely with the gnome window manager can be slow when running command files
              interactively, (not sure why?), KDE seems less likely to have this problem. See note below 090809. 
   o 090531 : fixed a problem with rubber-band zooming (with middle mouse button) with
              extreme zooms (e.g. for fixing trim curves) and picking objects -- this works better now. 
   o 090628 : contour2d, when picking values with the mouse, hidden grids will not be used.
   o 090705 : now when a moving grid computation fails with an invalid grid, the program enters
              the normal interactive update mode of Ogen so you can remake/query the grid (before the
              program entered some funny update mode that was confusing). 
   o 090705 : fixed bug with moving grids, the bounding box was not always computed correctly which
              led to ogen failing when it should have worked (this bug was caused by some code added for parallel).
   o 090804 : fixed a bug in the ogen's moving grid algorithm: the mask on ghost points was not always set
              correctly (the problem occurs when a grid "slides" along a shared boundary).
   o 090808 : there are new parallel copy routines to copy a serial array from one processor to another, see
              ParallelUtility.h and CopyArray.bC
   o 090809 : there is a new option for the .overturerc file:
                showCommandHistory: 1    # set to 0 if interactive scripts are slow to display
              Sometimes running scripts interactively is very slow when running over a network and
              this may be fixed by setting this option to '0'. 
   o 090913 : The new plot option 'set plot bounds' (from the grid or contour plotter) allows one to 
              set fixed bounds on x, y and z. Useful when the grid deforms and changes size. 
              Use 'reset plot bounds' to turn off.
   o 091127 : The new InterpolatePointsOnAGrid class can be used to interpolate a set of points in space
              from a composite grid function. This functionality works in parallel and supports higher order
              interpolation. It replaces the old InterpolatePoints class and even older interpolatePoints function.
   o 091127 : The ExposedPoints class now works in parallel (used to interpolate points that become "exposed"
              during a moving grid computation).
   o 091127 : Fixed some bugs for the parallel version of "extrapolate interpolation neighbours" that is used
              to assign values to unused points next to interpolation points (allowing a wider stencil to be used).
   o 091209 : there are new parallel copy functions in the CopyArray class for copying serial arrays into a 
              single distributed array (see ParallelUtility.h and CopyArray.bC). This is more general than
              the normal P++ copy since the serial arrays can be arbitrarily distributed. 
   o 091209 : There are a variety of new grid generation examples in the sampleGrids directory including: 
                 cubeInABox.cmd, slider.cmd, squareHole.cmd, sphere.cmd, rotatedBoxBesideBox.cmd 
                 valveArg.cmd, plateWithHoles.cmd, plate3dWithHoles.cmd wing3d.cmd, backStepSmooth3d.cmd,
                 divot.cmd, afm.cmd, lens.cmd, solidSphereInABox.cmd 
   o 100226 : The Integrate class should now work in parallel. 
   o 100309 : There is a new LoftedSurfaceMapping that can be used to define a lofted surface such as the
              surface of a wing with a tip. This mapping was used to build some of the surfaces for 
              the overlapping grid for the model wind-turbine with tower and nacelle.
   o 100329 : Bug fixed in the HDF file output of parallel distributed arrays when using the multiple file output
              option (which is the default). Space was being allocated in the main hdf file for the whole array 
              even though no data was written there. This meant that the main hdf file was huge when it
              should not have been. Thanks to Jeff Banks for noticing this. 
  o 100424  : In cleaning up the MappedGrid the "min and max edge length" arrays were removed since these are
              rarely used. 
  o 100722  : There is a new "exponential to linear" stretching option which might be a good choice for
              clustering grid points near boundaries. This function can be used to create very small grid
              cells near boundaries if desired. 
  o 110211  : There are two new functions in showFileFromDataFile.C that can be used to read and write a 
              grid and solution from an 'ovText' data file. Use 'plotStuff -ovText' to read in a grid and
              solution from an "ovText" data file (choose the menu item 'data file format' to
              display the format of the file). From the plotStuff menu use 'save ovText file' to save 
              a grid and solution from a show file into an ovText data file. This is a good way to 
              import a grid and solution into Overture. The solution can subsequently be used as initial conditions 
              for one of the CG solvers, for example. This format is better than the plot3d format since it 
              has more information about boundary conditions, ghost points etc.
  o 110515  : There is a new "transferSolution" program in Overture/bin that can be used to interpolate a
              solution from one overlapping grid to another overlapping grid (e.g. a finer grid, or a grid
              on a larger or smaller domain.). The program reads a solution from a "source" show file and outputs the
              results to a new "target" show file.
  o 110515  : Some improvements have been made for reading and writing plot3d files. There is a new   
              option "save plot3d file" in the plotStuff menu that allows one to save a solution and grid
              into plot3d files (these could then be shown in another graphics program for e.g.). 
              plotStuff can read plot3d grid and solution ("q" or "f") files using the
              command "plotStuff -plot3d".


======================================================================================================
Overture.v23 - released  March 13, 2009

Changes:

   o NOTE: Comments in command files can now begin with # or * 

   o The new version of A++/P++ supports arrays that can have 2^63 = 9e18 elements, the previous version was 
     limited to 2^31 = 2e9 elements. 

   o ** Data base files now contain the Overture version number they were created with. If you are unable
     to read an old file with a newer version of Overture, Overture will tell you which older version to use.
   o fixed bug in plotting sequences in the show file.
   o fixed a bug in Oges -- the initial guess for iterative solvers was not being assigned properly
     for the case of systems of equations.
   o there is a new example in Overture/primer/gridPrint.C that reads a grid from a data base and
     outputs the grid information to a plain text file. 
   o commands generated by perl in command files can now contain a comment line (starting with a '*' or '#')
   o the 2d contour plotter now has an option for flat-shading (toggle button) where the colour of each
     grid cell is constant (based on the average values at the 4 vertices)
   o fixed a bug in ogen that caused the hole-cutting to fail in some special cases in 2D 
     (cutHolesNew.bC, line 2241)
   o fixed the hyperbolic grid generator so that it handles start curves that are "derivative" periodic
   o fixed a bug in Oges.C for predefined equations with mixed-BC's in which sometimes the system was 
     wrongly thought to be singular.
   o fixed a bug in ReductionMapping.C -- the inverseMap was not correct.
   o fixed a bug in the mixed/aDotGradu/generalized-mixed BC on curvilinear grids -- a matrix was built 
     and saved to hold the BC but this matrix was not updated if the coefficents of the mixed BC changed.
   o the option was added to the grid plotter to colour grids by domain number (for multi-domain grids)
   o there is a coefficient matrix example in tests/tcmge.C, that shows how to fill in arbitrary equations.
   o there is a new displayCoeff function to display elements in a coefficient matrix in a nice way. 
   o the new version of Ogen can be used to generate grids in parallel for many cases (some hard cases
     that require backup interpolation will not work yet). 


==============================================================================================
Overture.v22 -- released September 12, 2007. 

Changes:

   o There is a new version of the data base interface for HDF5. This will support parallel I/O.
     No changes should be required to your code, but you will need to install hdf5 before building Overture.
     The HDF4 version should still work, although eventually we may stop supporting it.
     If you move to HDF5 then you will need to re-create all grids and show files, since the formats
     are not compatible.

   o the sample program amrHype.C has been renamed amrh.C -- this program has been improved upon as
     a test of parallel or serial AMR.

   o The LoadBalancer and GridDistribution classes have been added for parallel load balancing. 
     See the example use in pwave.C and amrh.C

   o There is a new perl script Overture/check.p that can be used to run a series of regressions tests.

   o The definition of the vectorSymmetry boundary condition for coefficient matrices has been
     changed to ensure that there is a diagonal element in the matrix. 

   o There is a new plotting function "displacement" for plotting results from solid mechanics applications
     where the computed solution represents the displacement of the grid points.

   o There have been many changes to support parallel computations. These include changes
     to the AMR routines. 

   o The grid generator Ogen has been optimised to use less memory -- for Cartesian grids the
     array of verticies is nolonger built at all. 

   o I have added the new operator divergenceTensorGradient that approximates div( K grad ) u 
     where K is a NxN tensor in N=1,2,3 space dimensions. This operator has been
     implemented using conservative (symmetric) and non-conservative approximations to orders
     of accuracy  2,4,6, and 8.
     It is only available through the optimized interface (function MappedGridOperators::derivative).

  o the divergence operator (obtained through the optimized interface) is now available
    for conservative and non-conservative for orders 2,4,6,8

  o The NurbsMapping has a new option to turn a 3d curve into a 2d curve by projecting onto a plane

  o The files interpolatePoints.{h,C} were changed to interpPoints.{h,C}  (OSX fix)
  o The files Triangle.{h,C} were changed to TriangleClass.{h,C}  (OSX fix)
  o Renames oges.C to ogesFiles.C  (OSX fix)
  o Removed fileOuptut.h --> use FileOutput.h instead.  (OSX fix)
  o Renamed boxlib/List.H to BL_List.H and boxlib/Assert.H to BL_Assert.H (OSX fix)
  o Removed Display.{h,C} (OSX fix)

  o The FiniteVolumeOperators files are no longer distributed. Use the conservative finite 
    difference operators instead.

  o 3D contour: added "pick to query a grid point" to query values of a solution in 3D.
  o 3D grid plotter: added "pick to add coordinate plane <dir>" to plot grid lines on a coordinate   
     plane.  

  o There is a new function userDefinedOutput (in Overture/Ogshow/userDefinedOutput.C) that can
    be called from plotStuff and contour with the option "user defined output". This function can
    be changed by a user and used, for example, to output results from the current solution into
    a text file. The initial implementation shows how to save the results of a contour-cut when the
    solution is determined on a line or curve that cuts through the domain.

  o The NurbsMapping function to interpolate another Mapping now has the option to interpolate ghost
    points from the source Mapping (to ensure the NurbsMapping has the same ghost points). 

  o There is a new configure option "debug" to force all files to be compiled with debugging on.

  o Kyle added to the option to show files to save multiple frame series (used for multi-physics 
    applications to save different variables in different parts of the domains).

  o A new option added to use block matrices when using Oges to solve equations with PETSc. This is
    useful when solving systems of equations since the diagonal block will be inverted with pvioting.

  o Some memory checking functions have been added to Overture to check the current memory being
    used and the maximum used, see OvertureInit.h.

  o There is a new graphics option "turn off graphics" to skip grid/contour/streamline etc. plotting.
    This is useful in batch mode (and in parallel to avoid building a single processor copy of
    the grid/grid-function). Use "turn on graphics" to reset. The corresponding command line 
    argument is -nographics. Note that the command line option -noplot will itself not turn 
    off all graphics as the grid/contour/streamline plotters will be still be called. 

  o The default number of ghost lines for Ogen is now 2.

  o The GenericDataBase/HDF_DataBase class now has separate calls for saving/reading distributed
    arrays -- getDistributed and putDistributed. This allows the data base to distinguish between
    serial and distributed arrays even when compiled in serial.

  o There is a new parallel read/write mode in the hdf5 implementation of HDF5_DataBase.{h,C}. Different
    processors will now write distributed array data to local serial files. This avoid problems using
    HDF5's parallel IO. These extra files are treated in a transparent way to the user. 

  o The AnnulusMapping can now define an elliptical annulus.

  o The grid generator ogen can now build many types of grids in parallel. 

  o The parallel plotting routines for plotting grids and contours have been changed to avoid copying
    all the data to a single processor. This permits the plotting of larger problems.

==================================================================================================

050624 : Overture.v21

   o There have been many changes and bug fixes since version 20. Unfortunately I have not
     made a detailed list of all these changes. 

   o Major changes include: 
          1. improvements to support moving grids and AMR. 
          2. changes to support parallel computations (although the parallel version is not ready yet
             for general use).
          3. new higher-order accurate operators
          4. improvements to the multigrid solver, Ogmg.
          5. improvements to OverBlown for treating reacting flows and multicomponent flows.

 Here is a list of other changes

   o added the option when building triangulations inside the "topology" routine
     to specify (approximately) the maximum area of triangles. 

   o added entity 104, conic arc to the iges reader and added a conic arc to the
     NurbsMapping.
   o added the ability to build a general cylinder (i.e. IGES tabulated cylinder) as a NurbsMapping
     by extruding a 3D curve along a line

   o added the option 
         "resolution factor for triangulations" 
     to the "create mappings" menu to adjust the number of triangles that are generated
     on TrimmedMappings when they are plotted -- this can be used to speed up the plotting
     of CAD geometries with very many patches.

   o fixed the NurbsMapping to properly handle un-clamped Nurbs which can appear in some IGES files.
   o added a picking option "refine plot" to the CompositeSurface update function to allow one to increase the
     resolution of surfaces so that they are plotted with more grid points (or a finer triangulation)

   o added a new ReorientMapping that is used by the ReparameterizationTransform to reorder
     the domain (parameter space) coordinates. For example change a Mapping x(r,s) to x(s,r) 
   o changed the NurbsMapping to represent domains in 2D in addition to curves in 2D. You can 
     use the interpolation option to convert any 2D mapping into a NurbsMapping.
   o fixed a problem with SmoothedPolygonMapping to improve the accuracy of the derivatives by 
     adjusting the number of spline points that are used to approximate the smoothed polygon.

   o added an option to the smooth polygon, "correct corners" to automatically adjust the
     corners. This will cause the direction of the ends to match the normals to the polygon (i.e. not
     the normals to the smoothed polygon which may be different).

   o added new functions getToggleValue and getTextValue to the DailogData. These can be used
     to parse an answer and look for changes to toggle states or text values. These can be used
     to shorten a code that checks an answer from a Dialog.

   o added a function insideOrOutside to the CompositeSurface and UnstructuredMapping that uses
     ray-casting to determine if points are inside a triangulation (assumed to be water-tight).

   o fixed the topology to handle the case when a patch is singular on two opposite ends; before
     only one singular side was considered.

   o added a userDerivedDefinedFunction.C that allows one to define new derived types for plotting
     with plotStuff. There are many predefined derived types such as vorticity but sometimes one wants
     to see some other variable. 

   o the plotPoints function can now be used to plot spheres with different colours and different radii.

   o The OverBlown initial condition and boundary condition menus have been updated, the new dialog versions
     are now functional.

   o fixed a problem in CrossSectionMapping get/put functions that prevented reading back from a data-base file.

   o there is a new primer example, deform.C that shows how to treat a cylinder whose shape deforms over time.

   o plotStuff has a new option -plot3d to read in a plot3d solution file and plot it -- this option is still
     in a testing phase

==================================================================================================


031111: Overture.v20

   o changed periodic check in IntersectionMapping.C -- determining whether the curves
      of intersection are periodic should be more robust.
   o added sub.cmd and filletTwoCyl.cmd to ogen checks
   o Can now type `x+r 45' instead of `x+r:0 45' (default window is the current window)
   o Can set the individual colour of each grid.
   o Changed the meaning of the argument levelToInterpolate in InterpolateRefinements::interpolateCoarseFromFine
     to be more meaningful. This could break code that currently uses it. (Using the default value allLevels
     will still work fine)
   o fixed various problems with the hyperbolic grid generator, especially for growing surface grids
     on CAD surfaces. More robust marching across a surface that has a sharp bend (discontinuous normal).
     - Normal blending is chosen automatically for surface grids based on the angle between the
       start curve and boundary curves -- this value is only a guess.
     - Fixed hype so that it does not crash if there is a grid point that cannot be projected
       onto the triangulation
   o new function in DialogData to set the toggle state by label so you don't have to remember the number:
       int setToggleState(const aString & toggleButtonLabel, int trueFalse);  
   o new configure option 'insure' : use this to build a version with insure.
   o New option in GraphicsParameters to turn on/off the plotting of Nurbs curves as sub-curves.
   o Changed plotCompositeSurface so that the colour of surfaces is taken from cs.getColour(s) but
     the colours for volume-grids stored in a CS are done in the same way as for single volume grids.
   o Fixed problems in MappingBuilder w.r.t. hiding grids, colouring boundaries by BC or share etc.
   o fixed a problem when plotting MG levels for rectangular grids -- scaled wrong
   o 021006 fixed a problem with ogmg for auto generation of levels with periodic grids (stir.mg.hdf)
   o changed selection so that when a ID appears twice in the selection the z-buffers values returned
     are the min and max over all selctions with that ID.
     choosen (as opposed to the first occurence).
   o allowed the picking selection buffer to grow even larger 
   o Ogmg: fixed line smoothers to work with constant coefficient pre-defined equations.
         : default line smoother is now under-relaxed Jacobi which is faster in practice than Zebra.
   o fixed a problem calling the optimised divScalarGrad operator.
   o optimised the tbcc.C test routine -- now 10X faster
   o optimised InterpolatePoints and interpolateExposedPoints
   o fixed a bug that interpolation points could would not be plotted in plotStuff when a solution was plotted first.
   o optimised the boundaryDistance function for computing the distance of all grid points to solid walls.
   o reworked contour plotter menu: created a dialog and added an option to hide grids by picking.
   o added "abortOnEnd" option when running the check.p, heal.p and generate.p regression tests so that test
     scripts do not hang waiting for input.
   o added an option to the grid plotter to set the colour of grids on a given refinement level and base grid.
   o changed output format options to "8bit" and "24bit" from "8 bit" and "24 bit" since the command parser 
     does not like a space.
   o added openGUI() call to GL_GraphicsInterface::stopReadingCommandFile() so that the GUI is opened whenever
     the command file ends and the graphics window is open.
   o Added option to hype for smoothing surface grids. 
   o Negative volumes generated by hype are now highlighted in red.
   o Added option to hype and MappingBuilder to specify the desired grid spacing -- this is used when initially
     determining the number of grid points for the starting curve and for marching.
   o Added a "frame" behind the colour bar and titles so that they always appears on top of the plot.
   o 021109 : added a new contour "line plot" option to plot the solution along a curve such as the
       boundary of a grid or any curve defined by the user.
   o Re-organised and added new options to "hype". There are now options for "post" stretching of the 
     grid lines -- i.e. stretching the grid after it has been generated with the marching algorithm.
     There is a new dialog for specifying properties of the stretching that is performed while the grid is
     geneated -- one can, for example, specify the initial grid spacing and have the distance to march be
     automatically computed from the number of grid lines.
   o IgesReader: added a check to see if the IGES file contains line feeds ^M instead of new lines. The line feeds 
     cause problems and can be removed with dos2unix, for example.
   o hype: I have added an option so that you can query a point on the screen and determine the location
      of the point with respect to the current grid, starting curve and reference surface. This can be used for
      example to determine where to stretch points.
   o hype: fixed a problem generating surface grids where the marching direction was not chosen 
     properly on a start curve. This should fix Kyle's bug and also some problems Anders was having 
   o hype: added "print grid statistics" to display data about the grid spacing and cell volumes.
   o IntersectionMapping: fixed a problem with intersect curves not converging when the curve had a sharp corner.
   o MappingBuilder: One can now create a curve on a CAD surface by intersecting a plane with the surface.
     The plane will be intersected with each trimmed-patched and the resulting segments joined together to
     form a single curve.
   o MappingBuilder: TFI grids created with 'build surface patch' can now be stretched and smoothed
   o MappingBuilder: box grids built with `build box grid' can now be stretched.
   o 021121: fixed a problem with 3D streamlines not being properly removed.
   o added an option to the grid plotter to hide grids by picking and to set the colour of grids by picking
   o added OptionMenu::setCurrentChoice(const aString & label) so you can set the current choice by the label
     instead of a number
   o added a function to call in BoundaryConditionParameters so that all points on mixed boundaries are assigned in
    boundary conditions.  Boundary conditions on mixed boundaries are normally NOT assigned at 
     points on the boundary that are actually interpolation or interior points (like a C-grid).
   o fixed a a bug in the operators finish boundary conditions for coefficients matrices when the grid was
     periodic along axis2 the extrapolation equations were not added
   o fixed a bug with the matrix transform -- the coordinate singularity of the un-transformed mapping was
     not transfered to the transformed mapping. One can now rotate a sphere and then use the orthographic projection.
   o fixed bug in ogen for 3d grids, when holecutting the distance to the boundary was not computed correctly so that
     specifying a maximum hole cutting distance did not work.
   o added an option to the grid plotter to toggle off selected boundaries of grids using the mouse.
   o MappedGridOperators: added a 4th order conservative and symmetric approximation for the 
     laplace and divScalarGrad operators.
--- cvs commit 030121 ---
   o grid plotter: added the option to set the colour of individual grid `boundaries' and to choose the
      colour using the mouse.
   o added optimized overlapping interpolation for interpolation widths of 4-9 (used by higher order methods)
     and fixed a bug in implicit interpolation for width>5.
   o reworked the optimised overlapping-grid interpolation so that the coefficients of the interpolation
     formula are NOT precomputed and stored. Instead the coefficients are computed (mainly) when a function
     is interpolated. This saves storage (which can be substantial for a 3d higher-order interpolant) and
     runs faster. A 3d sixth-order example ran 5 times faster with setup-time 100 times faster.
   o I have added sixth and 8th order versions of all the standard "forward" derivative operators including
     high order versions of the conservative laplacian and divScalarGrad operators.
   o I have added a function to the DialogData to set the sensitivity for a widget with a given label.
   o I have reworked the interface for stretching grid lines on mappings (option `stretch coordinates' from
     the `create mappings' menu or the StretchTransform::update function). The new interface should be much
     easier to use. One can now specify the desired minimum grid spacing and location of the stretching.
     The correct values for the parameters will automatically be computed to achieve this grid spacing. 
     This works for the inverse-tanh, tanh and exponential stretching types. One can also plot the stretching
     function, it's derivative and the ratio of adjacent grid spacings in order to see the quality of the
     stretching.
   o added the cvs directories Overture/hype/cmd/slac and Overture/hype/cmd/truck
--- cvs commit 030220? ---
   o added option to toggle grid lines on the individual boundaries of grids in 3D
   o added platform=intel.d.gcc.ifc to testDistribution which uses the Intel fortran compiler (used by
     some of our users -- ifc has a limit of 99 continuation lines which I have a habit of exceeding)
   o The TridiagonalSolver class can now solve systems of penta-diagonal matricies (including the
     case of periodic and "extended" boundary conditions). These appear with fourth-order approximations.
     Block penta-diagonal systems have NOT been implemented yet.
   o added the "coarsening factor" option to 2d contour plotter to allow contours on fine grids to be
     plotted at a lower resolution. Setting this coarsening-factor to "2", for example, will cause the
     contour to use every other grid point (except near boundaries or interpolation points). Setting the
     value to "-2" will cause the contour plotter to use every other grid point only when the colour
     is uniform thus resulting the same looking contour plot as when the fine grid is used everywhere.
   o The command files being saved in Overture are now flushed after every write to the file.
   o Fixed some reference counting bugs in NormalMapping.C and RevolutionMapping.C
   o Fixed a bug in specifying derivative BC's for the spline mapping
   o fixed a reference counting bug in the SweepMapping
   o fixed a problem in finishBoundaryConditions -- update of corner points in 3D was not done in the correct order
   o I've enhanced the 3D contour plotter so that one can add and delete contour-planes, contour-surfaces and 
     boundary-surfaces by clicking with the mouse.
   o I've added some new options for setting the corner ghost points when finishBoundaryConditions is called.
     There are evenSymmetryCorner, oddSymmetryCorner, taylor2ndOrderEvenCorner, taylor4thOrderEvenCorner
     The taylor BC's are accurate to 2nd and 4th order for general functions but reduce to a even symmetry
     condition for even functions. This is often a useful property for Neumann boundary conditions.
   o I added the ability to plot the first and second derivatives of NURBS and spline curves.
   o I added the new primer example, gridGenExample.C, which shows how to create an overlapping grid directly
     in a program, rather than interactively.
   o There is a *new* option in Oges which allows one to only solve on a sub-set of the grids. See the
     Oges function setGridsToUse. Previously one would have to solve on all grids with the identity 
     operator defined on in-active grids.
   o fixed some bugs in compositeTopology related to periodic trimming curves. Fixed some memory leaks
     in DialogData.
   o I added a "print grid statistics" option to the grid plotter.
   o I added an optimised version of the map and inverseMap for the fourth-order accurate version of the
     DataPointMapping.
   o It is now possible to read a command file from within another command file. Use the "read command file"
     command or the new "include fileName.cmd" command.
   o I have added the ability to embed perl statements into Overture command files. Any statement containing
     a semi-colon, such as "$nx=2*11;", is treated as a perl statement. Any subsquent line containing "$nx"
     (but no ";") will have "$nx" replaced by its value, "22". See the description in the GraphicsDoc document
     for some examples.


==============================================================================================================


?????? - Overture.v19
     o This version uses ??
                 Mesa-3.0         (no change)
                 A++P++-v0.7.6b   (**new version**)
                 HDF4.1r1         (no change)

     o There have been many changed since the last version. Only some of the changes are indicated here.

     o New functionality of the mouse buttons:
       LEFT:         Pick an object by clicking or pick all objects in a rectangular region by clicking 
                     and dragging. (CHANGED FROM LEFT+CTRL!)
       MIDDLE:       Rubberband zoom by clicking and dragging. (CHANGED FROM LEFT BUTTON!)
       RIGHT:        Popup menu.
       LEFT+SHIFT:   Click and drag for interactive translation of the object on the screen
       MIDDLE+SHIFT: Click and drag for interactive rotation (around the x- & y- axes) of the 
                     object on the screen
       RIGHT+SHIFT:  Click and drag horizontally for interactive rotation in the window plane (around 
                     the z-axis). Click and drag vertically for interactive zooming in/out. (NEW!)

     o The graphics interface has been overhauled:
       1) The class PlotStuff has been removed. A typedef to GL_GraphicsInterface is provided for 
          backwards compatibility.
       2) The functionality of the class GenericGraphicsInterface has been increased significantly through
          the addition of many new virtual functions. It should no longer be necessary to have a pointer
          to a GL_GraphicsInterface to obtain access to useful functions.
       3) A main program should only include GenericGraphicsInterface.h and use the function 
          Overture::getGraphicsInterface() to instantiate the graphics interface. See rap/rap.C for an example.
          That way, the main program does not rely on any particular graphics interface. For backwards 
          compatibility, the old way of building a PlotStuff object still works, but is not recommended 
          for new development.
       4) All plot functions, the contour plotter and the streamline plotter have been split off from
          the GraphicsInterface class. They are now static member functions of the new class PlotIt. This 
          changes the calling sequence for these functions. For example, to plot a mapping, you used to say
          gi.plot(map). Instead, you now say PlotIt::plot(gi,map). See include/PlotIt.h for a complete list
          of the affected functions.

     o The class String has now formally been removed. Use aString instead.

     o There is a new OffsetMapping that can be used to build an overlapping grid for a thin shell or plate.

     o The NurbsMapping has been changed.

     o The CompositeSurface has been changed.

     o There is a new CompositeTopology class which determines the connectivity of a CompositeSurface
       by merging edges that lie on adjacent surfaces. 
       
     o The TrimmedMapping has been changed:
         - TrimmedMapping's are now plotted using a triangulation of the trimmed region, this gives
           a more accurate representation.

     o The HyperbolicMapping has many new improvements and a new interface.

     o The 'configure' command has changed - by default some lesser used parts of the Overture library
       are not built, such as the multigrid solver (which is not quite finished) and
       the finite volume operators (which are being merged into the regular operators). These parts
       can be compiled and added to the library through a configure option, type 'configure --help'.

     o It is nolonger necessary to build the libGLw library when using Mesa -- the Overture configure 
       will look for libGLw and if it is not found then the necessary files will be copied and
       compiled into the Overture library.

     o Many of the plotting functions have been sped up a lot, e.g. the contour plotter by 20X.

     o All the operators have been sped up by writing optimised fortran versions, this also reduces
       memory usage.

     o Removed many small or extraneous A++ arrays from many classes to reduce overhead.

     o There are new options for ogen for manually cutting holes, manually specifying mixed boundaries 
       and manually specifying regions for shared boundaries. There is a new incremental hole sweep
       option so that you can watch the hole boundary expand, allowing the detection of errors.

     o The sampleGrids directory has an example of using rap, mbuilder and ogen to generate an
       overlapping grid on a CAD geometry for the asmo automobile.

     o The adaptive mesh refinement routines have been extended and improved. See the program amrHype.C
       in the primer directory and the examples in OverBlown.



001016 - Overture.v18
     o This version uses 
                 Mesa-3.0         (no change)
                 A++P++-v0.7.6b   (**new version**)
                 HDF4.1r1         (no change)

     o ***MAJOR CHANGE*** Each Overture program must now start and finish with the commands shown below:
       int main(int argc, char *argv[])
       {
         Overture::start(argc,argv);  // initialize Overture
       
         ...

         Overture::finish();          // finish and cleanup     
         return 0;
       }
       This change was made to support parallel versions of Overture. The start command will initialize
       some static variables used as default arguments. If you have used the variables nullIntArray,
       nullRealArray, nullRealMappedGridFunction, etc... for previous versions you should now use
       Overture::nullRealArray(), Overture::nullRealMappedGridFunction() etc. These are defined
       int Overture/include/OvertureInit.h

     o The DEFAULT configure options are now "double debug". 

     o The Overture grid generator ogen now has support for building hybrid grids, where the overlap
       is replaced by an unstructured grid. This current works in 2D only. See the examples in the
       ogen documentation. This work was done by Kyle Chand.

     o **Double precision** is now handled differently. There is no need to specify the compile
       flag -DDOUBLE=DOUBLE anymore. Instead the macro OV_USE_DOUBLE will be defined in the
       include file OvertureDefine.h -- this file is included by almost all Overture include files
       so probably no need to include it explicitly. (if "real" is defined then so is OV_USE_DOUBLE)

       David: remember to change your file davidsReal.h (you do have to #include "OvertureDefine.h")
        and change defaultMappedGridFunctions.C

     o There is now support for a 'mixed boundary' option that permits the generation of
       c-grid's and h-grid's as well as other types of grids that were previously not permitted.
       A mixed boundary is partially a physical boundary and partially an interpolation boundary.
       NOTE: You must be careful about assigning boundary conditions when using this new feature --
       the applyBoundaryCondition(..) functions will work properly but if you assign boundary conditions
       directly then you may not do it correctly for mixed boundaries.  see the remarks in ???
       Also see the ogen documentation.

     o The show file can now be used to save one or more "sequence". A "sequence" could be the time
       history of the residual, for example. Save a sequence with Ogshow and read it back with
       the ShowFileReader. plotStuff will find any sequence's put in the show file and allow you
       to plot them.

     o fixed some bugs in the multigrid solver Ogmg and corrected a case when TridiagonalSolver
       could fail with a zero pivot.

     o ** OgesParameters::update() function now takes a CompositeGrid as a second argument.

     o Oges can now call the multigrid solver Ogmg as a option.

     o there is a new 'help' menu option that tells how to get a high resolution hard copy.

     o Popup menus now are starting to get titles (another good suggestion from Anders). To add a title 
       (or sub-title or label) to a menu just add an entry beginning with "!" as in "!my title". 
       Labels can appear at multiple places through the menu. 

     o PlotStuff now can use a rectangular shaped window. One can also now set the point that acts as the
       centre of rotation from the 'set view characteristics' menu in the 'view' pull-down menu. 
       The rotation point can be entered explicitly or chosen with the mouse. Thanks to Anders for help
       with this.

     o You can now change the PlotStuff back-ground colour or use reverse-video (set view characteristics' menu)

     o I have added the capbility to 'pick' points on the screen and convert them to 2D or 3D 'world' (user)
       coordinates. A 3D pick requires picking a point that also lies on a pickable object (such as a mapping).
       See the pickPoints function in the GenericGraphicsInterface. As an example use, you can now build a 
       SplineMapping by clicking points on the screen. 

     o If you have an existing overlapping grid file or a show file you can now build the mappings that
       belong to the overlapping grid (or one of the overlapping grids in the show file). 
       This option is available from the "create mappings" menu. An an example, I used this option to
       regenerate an overlapping grid from a show file saved from a moving grid computation.

     o There is now support for variable-width and variable-type interpolation between overlapping 
       component grids. Previously all interpolation points on a grid interpolated with a fixed
       width stencil (3, say) and the interpolation points were explicit or implicit. To increase
       flexibility, each point may have a different interpolation width and some points may be
       explicit while others are implicit. This option is used now when one asks for explicit 
       interpolation in ogen -- if there is not enough overlap for explicit interpolation for some
       points then the interpolation stencil width will be decreased (or made implicit) just for those
       points that need it. 
     
     o Double precision is now supported when using gcc/g++. Since g77 doesn't support the -r8
       flag we use the fort77 perl script that calls f2c to first convert the fortran files
       to .c files before compiling. fort77 and f2c are available free from the web, see
       the INSTALL_NOTES for further details. Thanks to Bobby, Bill W. and Petri for help in
       getting this done.

     o Fixed a problem with the harmonic averaging option used in some of the conservative finite
       difference operators, such as divScalarGrad, to avoid division by zero in some cases. Thanks
       to Bill Wangard for pointing this problem out.

     o dependencies have been added to the Overture Makefile's

     o There is a new "file output" option available from plotStuff (and OverBlown) for outputing
       grid-functions (and grid geometry arrays such as the vertex and the mask arrays) into an ascii file.

     o The contour plotter (2D) has a new option for querying the value on a contour plot by picking
       points on the screen.

     o I fixed a bug in forming coefficient matrices with neumann like boundary conditions. This problem would
       appear when two grids overlap along a physical boundary and when the grid lines were not
       normal to the boundary. The problem was that ghost points lying outside an interpolation point
       on the boundary used the neumann BC when they should have been extrapolated. 
       *Margot*: this might explain a problem you were having.

     o The *new* default is to save grid files and show files in uncompressed form. This form takes
       more space but allows the files to be read by newer versions of Overture. If you save big files
       in OverBlown you may have to choose the 'compressed' form or else you may hit some HDF limits
       on the number of objects in the file.

     o If you do save grid files in compressed form (the old default) you can convert to uncompressed form
       and then the grids can be read by newer versions. The program Overture/bin/decompress will create 
       a decompressed version of the grid file which can be read (more or less correctly) by new versions of
       Overture. For example, to convert from v18 to v19 you would run Overture.v18/bin/decompress
       on an overlapping grid built from v18. The resulting grid file can be read by Overture.v19.
       If you want to use this for v17 files you would have to copy the file Overture.v18/bin/decompress.C
       and compile it with v17.

     o The plotStuff post-processor now has the ability to build "derived" types of grid functions. This
       allows one to look at derivatives of solutions, or to plot certain quantities such as the pressure,
       given the other primitive variables. See the new documentation for plotStuff.

     o The Twilightzone functions, OGFunction, OGPolyFunction and OGTrigFunction now have a laplacian
       operator. There is also a new OGPulseFunction for defining a generalized Gaussian pulse, useful
       for testing AMR applications.

     o There is a new RocketMapping for specifying curves related to rocket geometries. This mapping
       is a merging of the Mapping's written by Nathan Crane when he visited for the summer.

     o Some of the 'help' functions in Overture will now automatically have netscape go to the correct
       page in the on-line documentation (if there is a netscape window open). The function helpOverture in
       Overture/otherStuff/helpOverture.C is used to open web pages. It calls the perl script
       Overture/doc/openOvertureHelp.p which looks through the master index for keywords and the
       corresponding URL. The master index file info is saved in Overture/doc/help.index.

     o the graphics interface has been extensively re-written by Anders with new features including support
       for multiple windows, a new command and command-history window, short-cut buttons, a new dialog
       for setting view characteristics etc. See the new PlotStuff documentation.

     o There is a new "schlieren" option available from the "derived functions" menu in plotStuff
       for plotting Schliren like images for CFD (choose the gray scale colour table from the
       contour menu)

     o There is a new option so that you can specify where getFromADataBase
       will look for overlapping grids by setting an environment variable
           setenv OvertureGridDirectories "/home/henshaw/sampleGrids:/home/henshaw/ogen"
       This will work with OverBlown, for example.

-------------------------------

990907 - Overture.v17
     o This version uses 
                 Mesa-3.0         (**NEW**)
                 A++P++-v0.7.2c   (**NEW***)
                 HDF4.1r1         (no change)

     o The Integrate class now computes boundary integration weights directly where there
       is no overlap on the boundary.

     o I have fixed (almost) the problem of the screen locking up when the right mouse
       button is pressed when the program is not in the event loop. The fix was to de-activate
       the right mouse button when the event loop exits to run user code. This fix works
       even if you debug a program (with dbx, say) provided that you do not stop in dbx while inside
       the event loop -- this would happen if you hit <ctrl>-c while the code is waiting for input
       from the PlotStuff window. If you do stop in the event loop in the debugger you must not hit 
       the right mouse button on the PlotStuff window or else you will hang your terminal.
     o the grid functions now have a fixupUnusedPoints member function that can be used to set specific
       values (often zero) at unused points.
     o I have sped up the Interpolant function for overlapping grids. Implicit interpolation is now
       done as an iteration instead of solving a system of equations.

     o I have started to clean up various routines so that they are more careful about allocating
       memory and more careful about what gets 'updated' in a MappedGrid. Therefore some geometry
       arrays in the MappedGrid may no longer be created where they used to be (for example Oges used 
       to update the vertex and inverseVertexDerivative but does not anymore) and you may have
       to update them yourselves. This problem will appear with the 'seg fault' informational message.

     o Overture classes are now starting to get the "sizeOf()" function that returns the number of
       bytes that the class uses. These are approximate sizes.

     o I have fixed a problem in Ogen that Cheryl noticed of a lot of memory being used when computing
       'all interpolation' (noticeable for large grids only). Actually a problem with the DataPointMapping
       inverse using a lot of temporary storage.
     o The finite difference operators have a new operator, divVectorScalar. Thanks to Bill Wangard
       for supplying this.
     
     o Overture is starting to get support for unstructured grids and hybrid grids. The UnstructuredMapping
       class, for example, can be used to build an unstructured grid.

     o The Oges class has been extensively rewritten and cleaned up. There is now an interface to the PETSc
       sparse matrix solvers (thanks to Petri Fast). PETSc has some very fast solvers. 

------------------------------


990723 - Overture.v16
     o This version uses 
                 Mesa-2.4         (**same**)
                 A++P++-v0.7.2c?  (**NEW***)
                 HDF4.1r1         (no change)

     o **This version uses a new version of A++.

     o ***The Mapping classs inverseMap(x,r,rx) function now expects r to have a valid initial guess.
       -- therefore you should make sure that when you call this routine that there are not NaN's in r or
          else you could get errors saying that the inverse didn't converge. Set r=-1.; if you don't 
          know an initial guess and then something reasonable will be chosen.
          You can turn this feature off by changing setting useInitialGuessForInverse=FALSE; at the 
          top of the file Mapping.C

     o *** I have changed the names of some of the GraphicsParameters enum's for setting parameters. All the 
       names that began as GI_SET_... have been changed to GI_... (The _SET has been removed). You can
       use the perl program, Overture/bin/changeTo16 to make these changes, type `changeTo16 file.C'. 
       Warning: changeTo16 will overwrite the existing file.

     o This version includes Ogmg, an overlapping grid multigrid solver. Ogmg can be used to solve
       scalar elliptic boundary value problems. See the documentation for further details.

     o There is a *new* Integrate class that can be used to integrate grid functions on overlapping
       grids. You can use this class to compute volume or surface integrals. See the `OtherStuff'
       documentation for further details.

     o Note to David Brown: change divergence.C : _SET_

     o The derivative operators x,y,z,xx,... now can be used to compute only some components.
       If u is a realMappedGridFunction then u.x(all,all,all,N) will only compute the derivatives
       of the components in N *AND* the return result will be a grid function with N components.
       Previously the above statment would return a grid function of the same size as u.
       Similarly if q is a realCompositeGridFunction then q.x(N) will compute the derivatives of
       the components N of u and return the result as a grid function with N components. 

     o To be consistent with the above change it is now possible to easily operate on certain components
       of a GridCollectionFunction or CompositeGridFunction, as in the example
           floatGridCollectionFunction u(gc,all,all,all,2);
           u(0)=1.;   // set component 0 of u to be 1.
           u(1)=2.;   // set component 1 of u to be 2.
           u(0)=u(0)*2.+u(1)*u(0);
       The above code is inefficient since a new gridCollectionFunction is built every time an expression 
       like u(0) appears. Using the link function would be a more efficient but not so cute way to 
       accomplish the same thing.

     o plotting functions have been changed so that adaptive grids and grid functions are plotted
       correctly.

     o There are *new* functions available in Bill's MappedGridOperators (and CompositeGridOperators)
         o conservative discretizations of div, laplacian, divScalarGrad and scalarGrad with either
           arithmetic or harmonic averaging of the "scalar". There is also a normalDotScalarGrad
           boundary condition. The conservative discretizations are only implemented to second-order
           accuracy so far. 

     o redefined the derivatives in the DataPointMapping to be more accurate and symmetric.
     o fixed a bug in to do with using Oges and interative solvers with double precision.
     o fixed a memory leak in MappedGrid that would mainly appear in moving grid computations.

     o The SplineMapping has been improved to include splines under tension and more general
       boundary conditions and parameterizations to equidistribute arclength and curvature.

     o The CrossSectionMapping has been improved with help from Thomas. 
     
     o You can now "open a graphics window" at any time. The `open graphics' option is found 
       in the file pull down menu.
       If you have a long command file to run through it can be MUCH quicker to run through it 
       with a "noplot" option (such as for ogen) and then turn on graphics at the end. 
       The `open graphics' option is found in the file pull down menu.

     o You can now plot grid lines on arbitrary coordinate planes in 3D on Mappings and grids. 

     o you can now plot ghost lines on Mappings (before one could only do this for MappedGrid's).

     o The DataPointMapping now has a specialized inverse defined which is 2-5 times faster than before.

     o The grid generator no longer requires the specification of 'non-conforming' grids such as the
       inletOutlet grid. This feature is now automatically detected.
     o I think I fixed the problem with plots disappearing when one zooms too much.

     o The HyperbolicMapping has seen many changes. It computes both surface and volume grids
       and no longer uses HYPGEN and SURGRD from Nasa. The HyperbolicSurfaceMapping is obsolete
       and has disappeared.

     o The elliptic grid generator has changed a lot but it also need more work.

     o There is a new SweepMapping for generating mappings by sweeping another mapping
       along a curve. Thanks to Thomas Rutaganira for developing this class.

     o I have changed the way that the corners of the SquareMapping and BoxMapping are input,
       the old way still works but will eventually be removed.

------------------------

9805?? - Overture.v15
     o This version uses 
                 Mesa-2.4         (**NEW** see note below)
                 A++P++.v0.6.8f   (no change)
                 HDF4.1r1         (no change)

     o *NOTE* There has been a change in the interface to access gridFunction's in a MappedGrid. You should now
       say mg.vertex()(I1,I2,I3) instead of mg.vertex(I1,I2,I3). This change will greatly reduce the overhead
       in building a MappedGrid. You can use the perl script Overture/bin/changeTo15 to change files to conform
       to the above changes. Type "changeTo15 file.C" or "changeTo15 *.C" to change the files. I suggest making
       a backup before doing this.

     o A *NEW* Overlapping Grid Generator, Ogen,  has been added to this version. It combines the method
       of the current Overture grid generator (Cgsh) with the approach used by Anders Petersson (Xcog, Chalmesh).
       This new grid generator (Ogen) is described in the ogen.ps documentation and all the sample
       command files (which now sit in Overture/sampleGrids) generate grids using Ogen. The key feature
       of Ogen is that if the algorithm fails then most of the grid points remain valid and the invalid
       points are highlighted. Ogen can be run in a debug mode so that the grid is plotted at various stages in the
       grid generation algorithm. 

     o **NOTE** The equals operator for grid functions now is a very SHALLOW copy -- only the data in the arrays
         will be copied, unless the operand to the left of the `=' is a null grid function in which case a deep
         copy will be performed. The equals operator used to be a semi-deep copy. The new behaviour is more like
         the behaviour of A++ arrays.

     o **NOTE** By default the grid generator will now interpolate the GHOST POINTS on interpolation boundaries,
       rather than the last grid point (or last grid cell on a cell-centered grid).
       Thus the interpolation of overlapping grid will be done consistently with mesh refinement grids where 
       it is most common to interpolate the ghost line. You can make grids in the old way by changing a parameter
       when running ogen. The extendedIndexRange in a MappedGrid is like the indexRange except on interpolation
       sides where it extends to include the ghost points that are interpolated. 

     o **NOTE** The graphics interface has been changed again to hopefully fix all the
       problems with screen flashing etc. The graphics libraries that you link to when you
       build an executable with Overture now must include -lGLw in
       addition to the other Mesa or OpenGL libraries. If you are using Mesa you must
       take the following steps (theses instructions are also in the Overture/README file):

      -------- comments from Overture/README
      You will need to make some motif widgets that come with Mesa since Overture
      uses the libGLw library. To make this library:
      (a) Goto the Mesa/widgets-sgi directory. (You will need to download the MesaDemos
          part of Mesa)  Change the line in the Makefile:
               INCDIRS = -I../include -I/usr/include/Motif1.2
          to point to the location of your motif, for example:
               INCDIRS = -I../include -I$(MOTIF)/include
          where $MOTIF is the environmental variable as defined for Overture (see below).
      (b) Type "make <machine-name>" 
          This will make the GLw library and copy it to the Mesa/lib directory.
          
      (c) Copy the .h files from Mesa/widgets-sgi to the Gl include directory,
              cp *.h ../include/GL

     --------

     o **NOTE** The mask array in a MappedGrid is now assigned values at the ghost points if the closest 
       boundary point is used. The mask was previously zero at ghost points.

     o A couple of bug fixes were made for the Dec alpha.

     o **Note to David Brown**: Change to MappedGridFiniteVolumeOperators.h (and MGFVO.C) file:
          virtual GenericMappedGridOperators* virtualConstructor() const;  // add const

     o **NOTE** The getFromADataBaseFile routine now automatically recognizes grid files created by Anders Petersson's 
       grid generator Xcog. Thus you can use Xcog grids within Overture applications.
       Thanks to Geoff and Anders for help with this. Xcog can be obtained from
                 http://www.na.chalmers.se/~andersp

     o There is a new contrib directory in Overture that contains some contributed software. 
       I have added some sample PDE solvers written by Jacob Ystrom (used for a course).

     o I have added 3d streamlines, 3d iso-surfaces (available from the contour option), and
       the ability to plot the solution along any given line that passes through the domain (available
       from the contour option).

     o The sparse solver Oges now zeroes out any unused points in the right-hand side so iterative solvers
       won't fail if you have some bad values at unused points. I have made some improvements to
       speed up Oges (for any solution method).

     o when reading in command files a ".cmd" will be added to the end of the file name
       if the original file name is not found.

     o there are new display options for grid functions and A++ arrays (see "otherStuff" doc's) that allow
       one to specify a format and write A++ arrays to files.

     o Database files for single-grid overlapping grids are now much smaller since the mask and other
       arrays are no longer saved. 

     o The OGFunction classes now permit one to evaluate the twilight-zone function at vertex, cell,
       or face centers. Thanks for David for this sugguestion. See the section in the grid function 
       docs for further details.

     o There are some new stretching functions available for stretching grids lines, including 
       forward hyperbolic tangent and exponential.

     o (Eva:) In the grid generator ogen you can now read in Mappings that are associated with an
       overlapping grid file (or xCog file). The grid file will be read and the Mapping's
       extracted. You can then make changes to these Mappings and use them to build a different
       overlapping grid.
     
     o (Eva:) The airfoil mapping is now available directly with ogen. I have added NACA 4 digit series
       airfoils. There is a new example in the ogen documentation on making a grid for a NACA0012 airfoil.

     o The PlotStuff documentation now explains how to get high resolution hard copies (Mesa users 
       only for now).

     o You can now save encapuslated postScript files. These can be embedded in TeX files in the 
       same way as postScript file.

     o (Jerry:) There is a new plotting option for 3d contours to plot contours on specified coordinate
       planes of component grids.
       
     o The defaultPrompt in the GenericGraphics interface is now private. If you have written a mapping
       that sets the default prompt you should use the new way to set the default prompt. See one of
       the existing Mapping's for an example.
     
     o The pull down help menu now has some minimal help on the use of the mouse and window buttons etc. 

     o ** The obsolete functions u(...), ux(...), uxx(...) in the OGFunction Classes have been removed. 
       Use (...), x(...), xx(...) instead. There is also a new "general derivative function" gd(...)
       that can be used to compute any derivative.

     o David: add an extra arg to FiniteVOlMappedGridOps::applyBoundaryConditions
            : boundaryConditions.C : change "e->u("  to "(*e)("
            : oldBoundaryConditions.C : change "e->u("  to "(*e)("
            : 
     o It is now possible to interpolate just some components as in u.interpolate(Range(1,2))

     o ** There is a new installation process for Overture. First type "configure <machine-name>"
       to build the Makefile's. Then just type "make" to build Overture. 

     o You can now input parameters separated by commas in questions asked by Mapping's or plotting or Ogen.
       Before it was an error if you had input numbers separated by commas.

     o There is a new conversion routine, Overture/bin/ps2ppm, (which you may have to make by going to
       the Overture/bin directory and typing "make ps2ppm), that can convert a post-script file generated
       by PlotStuff into a raster file (.ppm file). The later can be converted to gif using some utility
       routine.

     o Many more boundary conditions have been implemented for the finite-difference coefficient matrices.

     o The equals operator for mappedGridFunction's, gridCollectionFunction's and compositeGridFunction's
       has been changed to a SHALLOW copy (unless the left had operand is a null grid function). Thus 
       if the left hand operand is not null then only the array data will be copied and the arrays must
       be conformable. This change was for efficiency and to be more consistent with the way A++ works.

     o The divScalarGrad and divScalarGradCoefficients operators have now been implemented in the
       finite difference operators.

      o There is a perl script, generate.p, in the Overture/sampleGrids directory that will automatically
        generate a wide variety of grids and check to see if they seem to be correctly generated by
        comparing some grid characteristics (number of interpolation points etc.) to values generated
        by me.

------------------------

970728 - Overture.v12
     o This version uses 
                 A++P++.v0.6.8f   (*new*)
                 Mesa-2.2         (no change)
                 HDF4.1r1         (*new*)

     o I have added a symbolic link "Overture.v12/HDF" that points 
       to HDF4.1r1 so if you set an environmental variable HDF you can then
       say "setenv HDF $Overture/HDF" to always get the correct version of HDF

     o You will have to **remake your data base files** for this version. I have implemented 
       a new improved storage of data in the HDF files that make the files 2-4 or more times 
       smaller and 4+ times faster to read/write. The new method (which is optional) uses a 
       streaming mode that is much more efficient when saving small objects, see the data base documentation
       for more details.

     o There is a new "view" pull-down menu at the top of the graphics screen. It has
       a "clipping plane" option that opens a new dialog widget that can be used to 
       turn on/off and position clipping planes. 

     o **Anders, Rob, Jeff H.** I think I have finally fixed the graphics interface so you can now open a window on
       an sgi for a version of Overture compiled on the sun. I also fixed the problem that Rob and Jeff Hittinger
       had that caused the graphics to bomb if the X variable borderWidth was set to non-zero. This should also fix the 
       problem Anders had opening a window on his Dec machine.

     o To change the default size of the plotStuff window you can set the following in your .Xdefaults file:
        *plotStuff*width:  500
        *plotStuff*height: 500

     o NEW: mouse driven translate, rotate and zoom: Holding the SHIFT key down depress the
       left mouse button and drag the cursor; the plotted objects will translate in the
       same direction as the mouse. Holding the SHIFT key down depress the
       middle mouse button and drag the cursor to rotate the view. Moving the cursor left or right will rotate about
       the y-axis (the vertical screen direction) and moving up or down will rotate about
       the x-axis (horizontal screen direction). Holding the CONTROL key down, depress the
       left mouse button and drag the cursor left or right to zoom in or out.

     o The getFromADataBase function and plotStuff will automatically add a .hdf or .show to the file name if the original
       file name is not found. 

     o ***Barry noticed that some of the BC's were very slow in 3D*** I have now optimized many of the 
       (non-trivial) boundary conditions to run much faster. 
       I have also optimized the generation of coefficient matrices (including special cases for rectangular grids).
       These speedups should be especially noticed in 3D.

     o **NOTE** For those using Mesa (OpenGL) (Sun, Dec users) there are some new features for saving postScript files.
       PostScript files are now rendered in an off-screen buffer at a default resolution of 1024x1024.
       Thus you DO NOT have to make your window large anymore in order to get a good quality figure -- in fact
       the PlotStuff window can even be partially covered when you save a file.
       There are other options to change the postScript format (resolution, 8-bit colour, 24-bit colour,
       black-and-white, gray-scale) found in the file pull-down menu. 
       See also the PlotStuff documentation (saving postScipt files, hardCopy) for further details.
      
----------------------------

970425 - Overture.v11
     o This version uses A++P++ version v0.6.8e
     o This version uses Mesa-2.2 : I have added a symbolic link "Overture.v11/OpenGL" that points 
       to Mesa-2.2 so if you set an environmental variable Overture you can then
       say "setenv OPENGL $Overture/OpenGL" to get the correct OpenGL. I am using a new feature in 2.2
       that lets me plot lines on surfaces correctly without having to explicitly offset them. The
       wire-frame contour is now hidden line.
     o you will have to *remake* your overlapping grids with this version.
     o The Stencil Class by Krister has been added to Overture, the documentation is available
       from the Overture home page.
     o you can now change the colour table on contours -- there is a gray scale colour
       table that can be used instead of the rainbow for black and white plots.
       You can also specify your own function to define a colour table.
     o (Jacob:) you can now specify the min/max values for colouring stream lines so that
       the colours will be consistent in movies.
     o New PlotStuff feature: typing "x+r 45" will rotate the view by 45 degress 
       about the x-axis, with similar functionality for the other rotation/translation commands.
     o (Barry/Fredrik:) new boundary conditions have been added, (1) extrapolate a normal/tangential component, 
       (2) give a tangential component, and (3) give the normal derivative of a normal/tangential component. 
       Thanks to Geoff for adding the centerBoundaryTangent to the MappedGrid.
     o There is a new class SpectralOperators for performing Fourier transforms and 
       pseudo-spectral derivatives on A++ arrays. The operators use this class for performing
       pseudo-spectral derivatives on grid functions defined on rectangular periodic 
       domains (1,2, or 3D). See the operator documentation for further details.
     o (Dan:) The grid collection functions now have relational operators that return a mask as an integer 
       grid collection function.
     o Geoff has made the following changes:

        I believe I have finished fixing up MappedGrid and the documentation
        so that all geometry moves with the centering of the grid, except for
        those data with the word "vertex" in their names.  There is now also
        a new MappedGridFunction, "centerArea," that contains the length of
        the "centerNormal" vector.  Also there is a new MappedGridFunction,
        "corner" that contains the locations of corners of cells (a.k.a.
        control volumes).  For a cell-centered grid, "corner" is aliased to
        "vertex."

        Dan needs to have the gridline with index zero line up between
        refinement levels.  Currently the gridline with index one lines
        up between refinement levels and also between multigrid levels.
        Also, he suggested that by default, the gridlines should be
        indexed starting with zero at the boundary.  Currently by
        default, the gridlines are indexed starting with one at the
        boundary.
        
        I have just implemented changes in my latest version, so that
        gridlines are indexed by default starting with zero at the left
        boundary and slao so that the gridlines with index zero line up
        between refinement levels and multigrid levels.  I hope you
        will soon be able to incorporate this latest version into your
        distribution.  The changes I mentioned previously that support
        new geometry arrays "corner" and "centerArea" will require that
        people re-generate their grid data files.

        I have implemented the computation of boundary overlap.  There is
        a menu item "Check boundary overlap" to do this in the "Specify a
        CompositeGrid" menu.  This check should give some idea of whether
        the overlap computation for the entire grid has some chance of
        succeeding, before doing this computation.  If the boundary overlap
        computation fails then the overlap computation for the entire grid
        will fail.

----------------------------------


970219 - Overture.v10
     o **NOTE** There has been a change in Overture that will affect *you*. The access to some commonly used
       data members in grids and grid functions has been changed to a function call. If cg is a CompositeGrid
       then use 
                  cg.numberOfDimensions()
       instead of cg.numberOfDimensions. Similar changes for numberOfGrids, numberOfComponents, 
       isAllVertexCentered etc. If you recompile your code you will get error messages indicating which lines
       need to be changed. The error on sun's is
         "coso.C", line 615: Error: Taking address of the bound function MappedGrid::numberOfDimensions()
       The perl script Overture/bin/change can be used to change files to the new format. Type 
       "change file1.C file2.C ..." -- use at your own risk, the files will be over-written.
     o it is now possible to plot a back-ground grid when plotting grids, contours, streamlines and Mappings.
       (2D only though)
     o it is now possible to plot stuff (except stream-lines) on ghost lines. 
       Only ghost points (cells) whose closest boundary point
       it a computational point (as indicated by the mask) will be plotted.
     o With the newest version of A++ the assert macro is nolonger turned off -- thus you may hit
       some assert's that never occured before.
     o The names of the twilight zone functions have been changed (thanks to a suggestion by Krister)
       so if you have
              OGFunction e; or OGPolyFunction e;   or OGTrigFunction e; 
       then use e(...), e.x(...), e.xy(...), etc. [ Instead of the old way e.u(...), e.ux(...)]
       The old names are still there but they will disappear in the next version.
     o  There are new versions of Mapping::map and Mapping::inverseMap called mapC and inverseMapC
        needed by some compilers (IBM:xlC) that don't like passing
        views of arrays to non-const references, as in mapping.mapC(r(I),x(I),xr(I))
     o There is a new PlotStuff function to plot a time sequence of 1D functions, forming a surface.

     o *Jacob* the leak in the A++ adopt (which is not really a leak) that seemed to give you over 1 million
       arrays has now been fixed.
     o *Dan* grid collection functions now have a member function numberOfRefinementLevels()
     o Geoff has made changes to the Grid and GridGenerator, here are his comments:

          All GenericGridCollections, GridCollections and CompositeGrids now can
          contain grids at different refinement levels and multigrid levels.
          Each of these classes contains four optional lists of sub-collections
          of grids that can be updated with the update() function, namely:
          
            baseGrid[k]        -- contains one base (unrefined) grid k, all
                                  of the refinement grids descended from it,
                                  and all coarser multigrid levels of these grids.
          
            refinementLevel[l] -- contains all grids at refinement level l.  This
                                  includes refenement grids descended from all of
                                  the base grids, at all multigrid levels.
          
            componentGrid[k]   -- contains one component grid k, which may be
                                  either a base grid or a refinement grid, and
                                  all of its coarser multigrid levels.
          
            multigridLevel[l]  -- contains all grids at multigrid level l.  This
                                  includes multigrid corasenings of all component
                                  grids.
          
          Along with each of these lists of sub-collections X, there is a
          corresponding integer "numberOfXs" and an integer array "Xnumber".
          These indicate the number of different Xs there are in the entire
          collection, and for each grid in the entire collection, which X the
          grid belongs to.  For example, "numberOfComponentGrids" indicates the
          number of different component grids in the entire collection, and
          componentGridNumber(k) gives the component grid number of grid[k],
          which is the same number for each multigrid level of the the same
          component grid.
          
          For the class GenericGridCollection, each of the sub-collections in
          these lists is also a GenericGridCollection.  For the classes
          GridCollection and CompositeGrid, each of the sub-collections is a
          GridCollection, with one exception:  for the class CompositeGrid, the
          sub-collections in multigridLevel are CompositeGrids.  The latter are
          probably what you want to work with in your multigrid solvers and your
          general-purpose graphics codes when there is more than one multigrid
          level in the main CompositeGrid.
          
          The overlapping grid generator ogen can create a CompositeGrid with any
          number (within reason) of multigrid levels.  It does not yet allow for
          the addition of refinements.



----------------------

961201 - Overture.v9
     o Uses A++P++.v0.6.7a, HDF 40r1p1_patchedsrc, Mesa 1.2.8 (Mesa 2.0 is buggy)
     o You should ***remake your grids*** as Geoff has made some changes. There was a bug fix in the moving
       grid generation.
     o ****Show files made for moving grids will have to be remade*****
     o ****The mapping functions map and inverseMap have been changed to be more efficient. If you
       have written a Mapping then you will have to change it! (sorry). The change is that the
       input arrays r,x,xr are now dimensioned r(I,0:d-1), x(I,0:r-1) and xr(I,0:r-1,0:d-1) instead
       of the old way r(0:d-1,I), x(0:r-1,I) and xr(0:r-1,0:d-1,I) -- thus the index corresponding
       to the number of points to invert has been placed first instead of last.
     o I have added extra features to the 1d contour plots for plotting multiple components at once, 
       plotting a background grid, and moving the axes. There is also a new
       PlotStuff function to plot line plots of data stored in A++ arrays. See the documentation.
     o (David:) I have added orderOfAccuracy to BoundaryConditionParameters
     o A bug was fixed in Oges -- Oges did not recompute the right null vector when the grid changed.
     o The ShowFileReader class can be used by solvers to read initial conditions from a show file.
       See the "Ogshow" documentation.
     o There are some new new primer examples. mappedGridExample6 shows how to choose the time step for
       a PDE. example9 shows how to use the data base operations to save a restart file.
     o (Jerry:) bug fixed in plotting 3D contours -- I was stomping on memory since I used a reshape instead of resize.
     o (Jerry:) There is a new option for 3D contour plotting to make a 2D plot of a coordinate plane on a single
       component grid. You can easily sweep through all the planes in a given direction (they appear
       as different components to the 2D contour plotter).
     o (Jacob:) The data base function "find" now correctly finds items with the class names: int, float, double, 
       string, intArray, floatArray and doubleArray. It only used to work for user defined class names.
     o (Eugene:) I have added Eugene's elliptic smoothing mapping to the Overture library, accessible through
       the ogen/create mappings/transform/elliptic option. I had to make quite a few changes due to the changes
       in the Mapping's noted above. I added some enhancements such as seeing the grid change as the iterations
       proceed. If something doesn't work I probably am to blame. 

------------------


961007 - Overture.v8
     o You will get some error messages unless you remake your overlapping grids (I don't think 
       that the errors are fatal, though).
     o We have upgraded to the newest version of boxlib, this should only affect Dan at the moment.
     o A function "multiply" has been added which can be used to multiply a grid function times
       a coefficient matrix. This is useful when creating a coefficient matrix for a variable
       coefficient operator, such as sin(x)*d/dx. See the operator documentation.
     o There was a bug when interpolating a grid function that was linked to another grid function.
       This should hopefully fix Karen's long-standing bug that she was unable to isolate.
     o **Remember** if you want to link to component 2 of a q then say  q.link(u,Range(2,2)) and *NOT* q.link(u,2)
       The latter will link to components (0:2) (this syntax has changed from a much earlier version of link).
     o There is a new option in plotStuff that allows one to make a movie and simultaneously save the frames
       as ppm files (the format used by mpeg); the command is called `movie and save'. 
       In addition, in Overture/bin I have a written a command, ppm2mpeg, that will convert
       these files into an mpeg movie. There is also a new `save ppm' menu option in the `file' menu.

-----------------

960923 - Overture.v7
     o The stretching functions had a bug so that the positions of the ghost lines were not
       computed correctly. This has been fixed.
     o We now use A++P++.v.0.6.6a which fixes some bugs and improves the performance of scalar indexing.
       Ultra users should link to the A++/SUNULTRA_OPTIMIZED directory and expect to see a 2-4 speedup
       in their codes.
     o Changes are being made so that Overture can run in parallel; these changes should be transparent.

-----------------

960826 - Overture.v6
     o Ogshow: now allows you to "flush" the file so that you can still plot your results if your
       program crashes. Use the member function setFlushFrequency(int) in Ogshow to indicate how many frames
       should be saved before flushing the file. Actually, multiple files are now created every time
       the file is flushed. These multiple files are handled automatically by plotStuff.

     o GridGenerator: Geoff has changed the grid generator to take advantage of the "vectorized"
       mappings. Grid generation seems to be on the order of 3-10 times faster in 2D and 70-100 times
       faster in 3D. This should eventually improve even more with future enhancements to A++
       and when I have time to vectorize the stretching functions. 
       *** You will have to regenerate your grids. Geoff has also changed the commands that are 
       used when creating an overlapping grid so you will have to edit your command files.

-----------------

960807 - Overture.v5
   o enhancements
       plotStuff:
         o "erase" button on main window
         o postscript files are saved in compressed form -- they are now 10-100 times smaller
   o changes
     o The "GridFunctionType" enum, previously an enum found in {float,int,double}MappedGridFunction
       and {float,int,double}GridCollectionFunction and {float,int,double}CompositeGridFunction 
       is now found only in the *new* class GridFunctionParameters.
       Operators that used to take a GridFunctionType as an argument now take
       a GridFunctionParameters object as an argument. Thus instead of saying
                realMappedGridFunction u(mg);
                u.x(realMappedGridFunction::cellCentered);
       to compute a cellCentered x-derivative you would now say
             GridFunctionParameters cellCentered.outputType = GridFunctionParameters::cellCentered;
             u.x(cellCentered);

     o The manner in which "components" for applyBoundaryCondition are specified has been generalized.
       This will only affect you if you have used the bcParameters.components array to specify
       components. See the documentation, op.dvi, for the new interface.


---------------------------------

960722 - Overture.v4
   o enhancements: (many suggested by Rob Lowrie)
       plotStuff: 
          o showFile can be specified on command line as in "plotStuff file.show"
          o prompt now shows what routine you are in
          o support for cascading menus (suggested by Karen Pao) making choosing
            components, for example, much easier. See also the new ogen interface.
       ogen: 
          o command files can be specified on the command line as in "ogen file.cmd"
          o "save command file" changed to "log commands to file"
          o commands are logged by default to ogen.cmd

   o Overture.v4.d : This is a double precision version of Overture.
      To use it you should add the -DDOUBLE flag when you compile C++ codes and
      you should add the flags -r8 -i4 to any (single precision) fortran
      routines that you want to compile into double precision automatically.
      With -DDOUBLE set on, the types real, realArray, realMappedGridFunction etc. 
      will become double, doubleArray, doubleMappedGridFunction etc. You should
      remake your grids with the ogen in Overture.v4.d/bin so they will be
      double precision.

-----------------

960707 - Overture.v3
   o Overture now works properly on the sun-ultra running solaris as well as
     on SGI's using either Mesa or native OpenGL.

   o note that on solaris the sprintf function does NOT return a char* but rather
     an int equal to the number of chars written. I have written the function
     sPrintF which behaves just like the old sprintf so you may want to use this.

   o There have been some changes to Makefile's so that we can run on solaris or the
     old 4.1.3 system. See the Makefile in the primer directory.
     The ultra's expect that the LD_LIBRARY_PATH be more carefully set than before. 
     You may want to look at my .cshrc to see what I do.

-------------------------

960527 - major new release
  
  o see the Makefile in the Overture/primer directory for changes needed to Makefile's
  o this version of Overture no longer uses fortran CMPGRD so you don't have to link to it.
  o data base files are saved using HDF, the DSK package is nolonger used, you will have 
    to link to the hdf libraries.
  o you CANNOT make overlapping grids with the fortran cmpgrd (cgsh) anymore.
  o Overture/bin/ogen is a new C++ overlapping grid generator; sample command files can
    be found in ~henshaw/res/cgsh.
  o there is a *NEW* way to read in overlapping grids -- see the examples in the 
    Overture/primer directory (example{4,5,6}.C) for how to read in an overlapping grid.
  o show files (Ogshow) work as before except there is a *NEW* way to construct
    an Ogshow object -- see Overture/primer/example4.C 

