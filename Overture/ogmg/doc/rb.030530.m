% determine the optimal relaxtion parameters for Red-Black smoothing
% for 2nd and 4th order accuracy

% This version uses a brute force approach to find the max eigenvalue
% of the smoothing operator since I am not sure how to do it analytically

% function f = objfun(x)
% f = exp(x(1))*(4*x(1)^2+2*x(2)^2+4*x(1)*x(2)+2*x(2)+1);


% x0 = [-1,1];    % Starting guess
% options = optimset('LargeScale','off');
% [x,fval,exitflag,output] = fminunc(@objfun,x0,options);


% determine optimal relaxation parameters for GS-RB
%
set(gca,'FontSize',16);

order=4;
% order=2;
nu=1;

if order==2 
  fid=fopen('redBlackOrder2.out','w');
else
  fid=fopen('redBlackOrder4.out','w');
end

c1=.5;
c1=1/3;
% c1=.3;
% c1=.4;



% x = cos(theta1) [0,1]
% y = cos(theta2) [-1,0]

nx=501; % 101; % 501; % 1001; % 501;        
ny=501; % 101; % 501; % 1001; % 501; 
xa=0.;  xb=1.;
ya=-1.; yb=0.;
hx=(xb-xa)/(nx-1);
hy=(yb-ya)/(ny-1);

if order==4 
  c41=16/15;
  c42=1/15;
else
  c41=1.;
  c42=0.;
end


c1a=.5;
c1b=.25;
nc=25; 9;
dc=(c1b-c1a)/(nc-1);

cv=zeros(nc,1);
wOptv=zeros(nc,1);
wub=zeros(nc,1);
muOptv=zeros(nc,1);
muOne=zeros(nc,1);

% ============= loop over cMin =============================
for ic=1:nc

c1=c1a+(ic-1)*dc;

c2=1-c1;

wOpt=0;
muOpt=2.;

fprintf(fid,'=============================================\n');
fprintf(fid,'file generated by rb.m\n');
fprintf(fid,'c1=%10.3f c2=%10.3f\n',c1,c1);
fprintf(fid,'nu=%i, nx=%i, ny=%i\n',nu,nx,ny);

cmax=1-c1;

nw=41;
wa=1.;
wb=1.2;
if order==4 & nc>1
  wGuess =15./( 7+cmax+sqrt( 7*(7+9*cmax)*(1-cmax) ) );
  wa=wGuess-.025;
  wb=wGuess;
end 

dw=(wb-wa)/(nw-1);

wv=zeros(nw,1);
muv=zeros(nw,1);
l1=zeros(nw,1);
l2=zeros(nw,1);
l3=zeros(nw,1);

% ======================== loop over omega ==========================
for iw=1:nw

w=wa+dw*(iw-1);

lambdaMax=0.;
l1Max=0;
l2Max=0;
l3Max=0;

z1Max=0;
z2Max=0;
lambdaNum=1;
l1z1Max=0;
l1z2Max=0;

for j=1:ny
for i=1:nx

  z1=xa+(i-1)*hx;
  z2=ya+(j-1)*hy;

  % lambda is maximized for z1 and z2s in [0,1]
  z2s=-z2;
  alpha   =c1*(  c41*z1 - 2*c42*z1^2 )+c2*(  c41*z2s - 2*c42*z2s^2 ) + c42;
  alphaBar=c1*( -c41*z1 - 2*c42*z1^2 )+c2*( -c41*z2s - 2*c42*z2s^2 ) + c42;  % z1-> -z1,  z2 -> -z2 
  s =1-w*(1-alpha);
  sb=1-w*(1-alphaBar);
  s22=( (sb+1)^2+(sb-1)*(1-s) )/4;
  if nu==1 
    lambda1=abs( s22 );
  else
    s11=( (s +1)^2+(sb-1)*(1-s) )/4;
    s12=( (sb+1)*(1-s )+s^2 -1  )/4;
    s21=( (s +1)*(1-sb)+sb^2-1  )/4;

    if nu==2
      lambda1=sqrt(abs( s12*s21+s22^2 ));
    else
      lambda1=(abs( s11*s12*s21+2*s12*s21*s22+s22^3 ))^(1/3);
    end
  end
%  lambda1=abs( 1 - w*(1-alphaBar)*( 1-w*(alpha-alphaBar)/4 ));


  alpha   =c1*(  c41*z1 - 2*c42*z1^2 )+c2*(  c41*z2 - 2*c42*z2^2 ) + c42;
  alphaBar=c1*( -c41*z1 - 2*c42*z1^2 )+c2*( -c41*z2 - 2*c42*z2^2 ) + c42;  % z1-> -z1,  z2 -> -z2 

  s =1-w*(1-alpha);
  sb=1-w*(1-alphaBar);

  s11=( (s +1)^2+(sb-1)*(1-s) )/4;
  s22=( (sb+1)^2+(sb-1)*(1-s) )/4;
  s12=( (sb+1)*(1-s )+s^2 -1  )/4;
  s21=( (s +1)*(1-sb)+sb^2-1  )/4;

  ssum=(s11+s22);
  sdiff=(s11-s22);
  sprod=(s12*s21);
  des=sqrt(sdiff^2+4*sprod);



  lambda2=abs( (1/2)*( ssum + des ) );

  lambda3=abs( (1/2)*( ssum - des ) );

  lm=max(lambda1,max(lambda2,lambda3));
  
  if lm>lambdaMax 
    lambdaMax=lm;
    z1Max=z1;
    z2Max=z2;
    if lambda1>=lambdaMax
      lambdaNum=1;
      z2Max=z2s;
    elseif lambda2>lambda3 
      lambdaNum=2;
    else
     lambdaNum=3;
    end
  end

  % keep track of the max of each lamba
  if lambda1>l1Max
    l1Max=lambda1;
    l1z1Max=z1;
    l1z2Max=z2s;
  end
  if lambda2>l2Max
    l2Max=lambda2;
  end
  if lambda3>l3Max
    l3Max=lambda3;
  end


end
end

fprintf('order=%i,nu=%i:cMin=%6.3f w=%6.3f mu=%6.3f (lambda%i) at (z1,z2)=(%8.2e,%8.2e) (lam1=%6.3f at(%8.2e,%8.2e)) \n',order,nu,c1,w,lambdaMax,lambdaNum,z1Max,z2Max,l1Max,l1z1Max,l1z2Max);
fprintf(fid,'order=%i,nu=%i:cMin=%6.3f w=%6.3f mu=%6.3f (lambda%i) at (z1,z2)=(%8.2e,%8.2e) (lam1=%6.3f at(%8.2e,%8.2e))\n',order,nu,c1,w,lambdaMax,lambdaNum,z1Max,z2Max,l1Max,l1z1Max,l1z2Max);

wv(iw)=w;
muv(iw)=lambdaMax;
l1(iw)=l1Max;
l2(iw)=l2Max;
l3(iw)=l3Max;


if lambdaMax < muOpt 
  wOpt=w;
  muOpt=lambdaMax;
end 
if w==1
  muOne(ic)=lambdaMax;
end 

end % iw


if nw<5 
  plot(wv,muv,'b','LineWidth',3);
  hold on;
  plot(wv,l1,'r',wv,l2,'g',wv,l3,'c');
  title(sprintf('\\omega-RB-GS, nu=%i, order=%i, c_{min}=%8.2e',nu,order,c1));
  grid on;
  xlabel('\omega');
  legend('\mu','|\lambda_1|','|\lambda_2|','|\lambda_3|',4);
  hold off;
  pause;
end

cv(ic)=c1;
wOptv(ic)=wOpt;
muOptv(ic)=muOpt;

cmax=1-c1;
wub(ic)=15./( 7+cmax+sqrt( 7*(7+9*cmax)*(1-cmax) ) );


end % ic

fclose(fid);

plot(cv,wOptv,cv,wub);
title(sprintf('\\omega-RB-GS, nu=%i, order=%i',nu,order));
legend('\omega_{opt}','\omega_{up}');
xlabel('cMin');
grid on;
pause;
if order==4 
  print -depsc2 redBlack.order4.wOpt.eps
end


plot(cv,muOptv,cv,muOne);
title(sprintf('\\omega-RB-GS, nu=%i, order=%i',nu,order));
legend('\mu_{opt}','\mu(\omega=1)');
xlabel('cMin');
grid on;
if order==4 
  print -depsc2 redBlack.order4.muOpt.eps
end


% print -depsc2 redBlack.order2.c2.eps
% print -depsc2 redBlack.order2.c3.eps
% print -depsc2 redBlack.order4.c2.eps
% print -depsc2 redBlack.order4.c3.eps
