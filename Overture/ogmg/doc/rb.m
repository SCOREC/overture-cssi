% determine the optimal relaxtion parameters for Red-Black smoothing
% for 2nd and 4th order accuracy

% This version uses a brute force approach to find the max eigenvalue
% of the smoothing operator since I am not sure how to do it analytically

% function f = objfun(x)
% f = exp(x(1))*(4*x(1)^2+2*x(2)^2+4*x(1)*x(2)+2*x(2)+1);


% x0 = [-1,1];    % Starting guess
% options = optimset('LargeScale','off');
% [x,fval,exitflag,output] = fminunc(@objfun,x0,options);


% determine optimal relaxation parameters for GS-RB
%
set(gca,'FontSize',16);

order=4;
% order=2;
nu=1;

nc=9; % 1; % 25; 9;  % number of "c" values to check


c1a=.5;
c1b=.25; % .1; % .25;
dc=(c1b-c1a)/max(1,nc-1);


if order==2 
  fid=fopen('redBlackOrder2.out','w');
else
  fid=fopen('redBlackOrder4.out','w');
end

% x = cos(theta1) [0,1]
% y = cos(theta2) [-1,0]

nx=501; % 251; % 501; % 1001; % 501;        
ny=nx;
xa=0.;  xb=1.;
ya=-1.; yb=0.;
hx=(xb-xa)/(nx-1);
hy=(yb-ya)/(ny-1);

cv=zeros(nc,1);
wOptv=zeros(nc,1);
wub=zeros(nc,1);
muOptv=zeros(nc,1);
muOne=zeros(nc,1);
muub=zeros(nc,1);

% ============= loop over cMin =============================
for ic=1:nc

c1=c1a+(ic-1)*dc;

c2=1-c1;

wOpt=0;
muOpt=2.;

fprintf(fid,'=============================================\n');
fprintf(fid,'file generated by rb.m\n');
fprintf(fid,'c1=%10.3f c2=%10.3f\n',c1,c1);
fprintf(fid,'nu=%i, nx=%i, ny=%i\n',nu,nx,ny);

cmax=1-c1;

nw=fix(nx/5+.5); % 41;
wa=1.;
wb=1.2;

if nc>1 
  % optimize the computation - minimize search interval for w
  % Guess the range of w to look at
  if order==4 
    wUpperBound =15./( 7+cmax+sqrt( 7*(7+9*cmax)*(1-cmax) ) );
  else
    wUpperBound = 2./(1+sqrt(c1*(2-c1)));
  end 
  wa=wUpperBound-.025;
  if ic>1
    wa=wOptv(ic-1);
  end
  wb=wUpperBound+.005;
end
dw=(wb-wa)/(nw-1);

wv=zeros(nw,1);
muv=zeros(nw,1);
l1=zeros(nw,1);
l2=zeros(nw,1);
l3=zeros(nw,1);


% ======================== loop over omega ==========================
for iw=1:nw

  w=wa+dw*(iw-1);

  [lambdaMax,lambdaNum,z1Max,z2Max,l1Max,l2Max,l3Max,l1z1Max,l1z2Max]=smoothingFactor(w,c1,nx,ny,order,nu);


  if nc==1
    fprintf('order=%i,nu=%i:cMin=%6.4f w=%6.4f mu=%6.4f (lambda%i) at (z1,z2)=(%8.2e,%8.2e) (lam1=%6.3f at(%8.2e,%8.2e)) \n',order,nu,c1,w,lambdaMax,lambdaNum,z1Max,z2Max,l1Max,l1z1Max,l1z2Max);
  end
  fprintf(fid,'order=%i,nu=%i:cMin=%6.4f w=%6.4f mu=%6.4f (lambda%i) at (z1,z2)=(%8.2e,%8.2e) (lam1=%6.3f at(%8.2e,%8.2e))\n',order,nu,c1,w,lambdaMax,lambdaNum,z1Max,z2Max,l1Max,l1z1Max,l1z2Max);

  wv(iw)=w;
  muv(iw)=lambdaMax;
  l1(iw)=l1Max;
  l2(iw)=l2Max;
  l3(iw)=l3Max;


  if lambdaMax < muOpt 
    wOpt=w;
    muOpt=lambdaMax;
  end 
  if nc>1 & lambdaMax>muOpt+hx
    % lambdaMax is increasing -- we must have passed the minimum
    break;
  end
end % iw

fprintf('order=%i,nu=%i:cMin=%6.4f wOpt=%6.4f muOpt=%6.4f (dw=%8.2e)\n',order,nu,c1,wOpt,muOpt,dw);
fprintf(fid,'>>order=%i,nu=%i:cMin=%6.4f wOpt=%6.4f muOpt=%6.4f (dw=%8.2e)\n',order,nu,c1,wOpt,muOpt,dw);

if nw<5 | nc==1
  plot(wv,muv,'b','LineWidth',3);
  hold on;
  plot(wv,l1,'r',wv,l2,'g',wv,l3,'c');
  title(sprintf('\\omega-RB-GS, nu=%i, order=%i, c_{min}=%8.2e',nu,order,c1));
  grid on;
  xlabel('\omega');
  legend('\mu','|\lambda_1|','|\lambda_2|','|\lambda_3|',4);
  hold off;
  pause;
end

cv(ic)=c1;
wOptv(ic)=wOpt;
muOptv(ic)=muOpt;

% cmax=1-c1;
% wub(ic)=15./( 7+cmax+sqrt( 7*(7+9*cmax)*(1-cmax) ) );
if order==4 
  wub(ic)=15./( 8-c1+sqrt( 7*(16-9*c1)*c1 ) );
else
  wub(ic)=2./(1+sqrt(c1*(2-c1)));
end

  if nc>1 
    w=1;
    muOne(ic)=smoothingFactor(w,c1,nx,ny,order,nu);
    muub(ic)=smoothingFactor(wub(ic),c1,nx,ny,order,nu);
  end

end % ic


if nc>1 
  


  plot(cv,wOptv,'b-o',cv,wub,'g');
  title(sprintf('\\omega-RB-GS, nu=%i, order=%i',nu,order));
  legend('\omega_{opt}','\omega_{ub}');
  xlabel('cMin');
  grid on;
  pause;
  if order==4 
    print -depsc2 redBlack.order4.wOpt.eps;
  else
    print -depsc2 redBlack.order2.wOpt.eps;
  end
  fprintf(fid,'c=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',cv(ic));
  end
  fprintf(fid,'];\n');
  fprintf(fid,'wOpt=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',wOptv(ic));
  end
  fprintf(fid,'];\n');
  fprintf(fid,'wub=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',wub(ic));
  end
  fprintf(fid,'];\n');
  fprintf(fid,'muOpt=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',muOptv(ic));
  end
  fprintf(fid,'];\n');
  fprintf(fid,'muub=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',muub(ic));
  end
  fprintf(fid,'];\n');
  fprintf(fid,'muOne=[');
  for ic=1:nc
    fprintf(fid,'%14.8e ',muOne(ic));
  end
  fprintf(fid,'];\n');
  
  
  plot(cv,muOptv,'b-o',cv,muub,'g-x',cv,muOne,'r-+');
  title(sprintf('\\omega-RB-GS, nu=%i, order=%i',nu,order));
  legend('\mu_{opt}','\mu_{ub}','\mu(\omega=1)');
  xlabel('cMin');
  grid on;
  if order==4 
    print -depsc2 redBlack.order4.muOpt.eps;
  else
    print -depsc2 redBlack.order2.muOpt.eps;
  end

end

fclose(fid);

% print -depsc2 redBlack.order2.c2.eps
% print -depsc2 redBlack.order2.c3.eps
% print -depsc2 redBlack.order4.c2.eps
% print -depsc2 redBlack.order4.c3.eps
